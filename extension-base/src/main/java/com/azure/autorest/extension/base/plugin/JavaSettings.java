// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.

package com.azure.autorest.extension.base.plugin;

import java.util.function.Consumer;

/**
 Settings that are used by the Java AutoRest Generator.
 */
public class JavaSettings
{
    private static String version = "3.0.0";

    private static JavaSettings _instance;

    private static NewPlugin host;

    private static String _header;

    private static boolean addCredentials;

    static void setHeader(String value) {
        if ("MICROSOFT_MIT".equals(value))
        {
            _header = MicrosoftMitLicenseHeader + "\n" + String.format(DefaultCodeGenerationHeader, version);
        }
        else if ("MICROSOFT_APACHE".equals(value))
        {
            _header = MicrosoftApacheLicenseHeader + "\n" + String.format(DefaultCodeGenerationHeader, version);
        }
        else if ("MICROSOFT_MIT_NO_VERSION".equals(value))
        {
            _header = MicrosoftMitLicenseHeader + "\n" + DefaultCodeGenerationHeaderWithoutVersion;
        }
        else if ("MICROSOFT_APACHE_NO_VERSION".equals(value))
        {
            _header = MicrosoftApacheLicenseHeader + "\n" + DefaultCodeGenerationHeaderWithoutVersion;
        }
        else if ("MICROSOFT_MIT_NO_CODEGEN".equals(value))
        {
            _header = MicrosoftMitLicenseHeader + "\n" + "Code generated by Microsoft (R) AutoRest Code Generator.";
        }
        else if ("NONE".equals(value))
        {
            _header = "";
        } else if ("MICROSOFT_MIT_SMALL".equals(value)) {
            _header = MicrosoftMitSmallLicenseHeader + "Code generated by Microsoft (R) AutoRest Code Generator.";
        } else if ("MICROSOFT_MIT_SMALL_NO_CODEGEN".equals(value)) {
            _header = MicrosoftMitSmallLicenseHeader;
        }
        else
        {
            _header = value;
        }
    }

    static void setHost(NewPlugin host) {
        JavaSettings.host = host;
    }

    public static JavaSettings getInstance()
    {
        if (_instance == null)
        {
            _instance = new JavaSettings(
                    value -> addCredentials = value,
                    host.getBooleanValue("azure-arm"),
                    host.getBooleanValue("fluent"),
                    host.getBooleanValue("regenerate-manager"),
                    host.getBooleanValue("regenerate-pom"),
                    _header,
                    80,
                    host.getStringValue("serviceName"),
                    host.getStringValue("namespace").toLowerCase(),
                    host.getBooleanValue("enable-xml", false),
                    host.getBooleanValue("non-null-annotations", false),
                    host.getBooleanValue("client-side-validations", false),
                    host.getStringValue("client-type-prefix"),
                    host.getBooleanValue("generate-client-interfaces", true),
                    host.getBooleanValue("generate-client-as-impl", true),
                    host.getStringValue("implementation-subpackage", "implementation"),
                    host.getStringValue("models-subpackage", "models"),
                    host.getBooleanValue("required-parameter-client-methods", true),
                    host.getBooleanValue("add-context-parameter", false),
                    host.getStringValue("sync-methods", "essential"));
        }
        return _instance;
    }

    private Consumer<Boolean> setAddCredentials;

    /**
     Create a new JavaSettings object with the provided properties.

     @param setAddCredentials
     @param isAzure
     @param isFluent
     @param regenerateManagers
     @param regeneratePom
     @param fileHeaderText
     @param maximumJavadocCommentWidth
     @param serviceName
     @param shouldGenerateXmlSerialization
     @param nonNullAnnotations Whether or not to add the @NotNull annotation to required parameters in client methods.
     @param clientTypePrefix The prefix that will be added to each generated client type.
     @param generateClientInterfaces Whether or not interfaces will be generated for Service and Method Group clients.
     @param implementationSubpackage The sub-package that the Service and Method Group client implementation classes will be put into.
     @param modelsSubpackage The sub-package that Enums, Exceptions, and Model types will be put into.
     @param requiredParameterClientMethods Whether or not Service and Method Group client method overloads that omit optional parameters will be created.
     */
    private JavaSettings(Consumer<Boolean> setAddCredentials, boolean isAzure, boolean isFluent, boolean regenerateManagers, boolean regeneratePom, String fileHeaderText, int maximumJavadocCommentWidth, String serviceName, String package_Keyword, boolean shouldGenerateXmlSerialization, boolean nonNullAnnotations, boolean clientSideValidations, String clientTypePrefix, boolean generateClientInterfaces, boolean generateClientAsImpl, String implementationSubpackage, String modelsSubpackage, boolean requiredParameterClientMethods, boolean addContextParameter, String syncMethods)
    {
        this.setAddCredentials = obj -> setAddCredentials.accept(obj);
        IsAzure = isAzure;
        IsFluent = isFluent;
        RegenerateManagers = regenerateManagers;
        RegeneratePom = regeneratePom;
        FileHeaderText = fileHeaderText;
        MaximumJavadocCommentWidth = maximumJavadocCommentWidth;
        ServiceName = serviceName;
        Package = package_Keyword;
        setShouldGenerateXmlSerialization(shouldGenerateXmlSerialization);
        NonNullAnnotations = nonNullAnnotations;
        ClientSideValidations = clientSideValidations;
        ClientTypePrefix = clientTypePrefix;
        GenerateClientInterfaces = generateClientInterfaces;
        GenerateClientAsImpl = generateClientAsImpl;
        ImplementationSubpackage = implementationSubpackage;
        ModelsSubpackage = modelsSubpackage;
        RequiredParameterClientMethods = requiredParameterClientMethods;
        AddContextParameter = addContextParameter;
//C# TO JAVA CONVERTER WARNING: Java does not have an 'ignoreCase' parameter for the static 'valueOf' method of enum types:
//ORIGINAL LINE: SyncMethods = (SyncMethodsGeneration) Enum.Parse(typeof(SyncMethodsGeneration), syncMethods, true);
        SyncMethods =  SyncMethodsGeneration.valueOf(syncMethods);
    }

    private boolean IsAzure;
    public final boolean getIsAzure()
    {
        return IsAzure;
    }

    private boolean IsFluent;
    public final boolean getIsFluent()
    {
        return IsFluent;
    }

    public final boolean getIsAzureOrFluent()
    {
        return getIsAzure() || getIsFluent();
    }

    public final boolean getAddCredentials()
    {
        return addCredentials;
    }
    public final void setAddCredentials(boolean value)
    {
        setAddCredentials.accept(value);
    }

    private boolean RegenerateManagers;
    public final boolean getRegenerateManagers()
    {
        return RegenerateManagers;
    }

    private boolean RegeneratePom;
    public final boolean getRegeneratePom()
    {
        return RegeneratePom;
    }

    private String FileHeaderText;
    public final String getFileHeaderText()
    {
        return FileHeaderText;
    }

    private int MaximumJavadocCommentWidth;
    public final int getMaximumJavadocCommentWidth()
    {
        return MaximumJavadocCommentWidth;
    }

    private String ServiceName;
    public final String getServiceName()
    {
        return ServiceName;
    }

    private String Package;
    public final String getPackage()
    {
        return Package;
    }

    private boolean ShouldGenerateXmlSerialization;
    public final boolean getShouldGenerateXmlSerialization()
    {
        return ShouldGenerateXmlSerialization;
    }
    public final void setShouldGenerateXmlSerialization(boolean value)
    {
        ShouldGenerateXmlSerialization = value;
    }

    /**
     Whether or not to add the @NotNull annotation to required parameters in client methods.
     */
    private boolean NonNullAnnotations;
    public final boolean getNonNullAnnotations()
    {
        return NonNullAnnotations;
    }

    private boolean ClientSideValidations;
    public final boolean getClientSideValidations()
    {
        return ClientSideValidations;
    }

    /**
     The prefix that will be added to each generated client type.
     */
    private String ClientTypePrefix;
    public final String getClientTypePrefix()
    {
        return ClientTypePrefix;
    }

    /**
     Whether or not interfaces will be generated for Service and Method Group clients.
     */
    private boolean GenerateClientInterfaces;
    public final boolean getGenerateClientInterfaces()
    {
        return GenerateClientInterfaces;
    }

    /**
     Whether or not interfaces will be generated for Service and Method Group clients.
     */
    private boolean GenerateClientAsImpl;
    public final boolean getGenerateClientAsImpl()
    {
        return GenerateClientAsImpl;
    }

    /**
     The sub-package that the Service and Method Group client implementation classes will be put into.
     */
    private String ImplementationSubpackage;
    public final String getImplementationSubpackage()
    {
        return ImplementationSubpackage;
    }

    /**
     The sub-package that Enums, Exceptions, and Model types will be put into.
     */
    private String ModelsSubpackage;
    public final String getModelsSubpackage()
    {
        return ModelsSubpackage;
    }

    /**
     Whether or not Service and Method Group client method overloads that omit optional parameters will be created.
     */
    private boolean RequiredParameterClientMethods;
    public final boolean getRequiredParameterClientMethods()
    {
        return RequiredParameterClientMethods;
    }

    /**
     Indicates whether the leading com.microsoft.rest.v3.Context parameter should be included in generated methods.
     */
    private boolean AddContextParameter;
    public final boolean getAddContextParameter()
    {
        return AddContextParameter;
    }

    private SyncMethodsGeneration SyncMethods = SyncMethodsGeneration.values()[0];
    public final SyncMethodsGeneration getSyncMethods()
    {
        return SyncMethods;
    }

    public enum SyncMethodsGeneration
    {
        All(2),
        Essential(1),
        None(0);

        private int value;

        SyncMethodsGeneration(int value) {
            this.value = value;
        }
    }



    public static final String DefaultCodeGenerationHeader = "Code generated by Microsoft (R) AutoRest Code Generator %s" + "\r\n" +
            "Changes may cause incorrect behavior and will be lost if the code is regenerated.";

    public static final String DefaultCodeGenerationHeaderWithoutVersion = "Code generated by Microsoft (R) AutoRest Code Generator." + "\r\n" +
            "Changes may cause incorrect behavior and will be lost if the code is regenerated.";

    public static final String MicrosoftApacheLicenseHeader = "Copyright (c) Microsoft and contributors.  All rights reserved." + "\r\n" +
            "\r\n" +
            "Licensed under the Apache License, Version 2.0 (the \"License\");" + "\r\n" +
            "you may not use this file except in compliance with the License." + "\r\n" +
            "You may obtain a copy of the License at" + "\r\n" +
            "  http://www.apache.org/licenses/LICENSE-2.0" + "\r\n" +
            "\r\n" +
            "Unless required by applicable law or agreed to in writing, software" + "\r\n" +
            "distributed under the License is distributed on an \"AS IS\" BASIS," + "\r\n" +
            "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied." + "\r\n" +
            "\r\n" +
            "See the License for the specific language governing permissions and" + "\r\n" +
            "limitations under the License." + "\r\n" +
            "";

    public static final String MicrosoftMitLicenseHeader = "Copyright (c) Microsoft Corporation. All rights reserved." + "\r\n" +
            "Licensed under the MIT License. See License.txt in the project root for license information." + "\r\n" +
            "";

    public static final String MicrosoftMitSmallLicenseHeader = "Copyright (c) Microsoft Corporation. All rights reserved." + "\r\n" +
            "Licensed under the MIT License." + "\r\n" +
            "";
}