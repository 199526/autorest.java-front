@using System.Linq;
@using AutoRest.Core.Utilities
@using AutoRest.Java
@using AutoRest.Java.Model
@inherits AutoRest.Core.Template<AutoRest.Java.Model.MethodJv>
@if (Model.LocalParameters.Any(p => !p.IsConstant && !p.IsRequired))
{
@:/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().SplitByLines("*", 100).Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().SplitByLines("*", 100).Period()
}
@: *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().SplitByLines(" *", 100).Trim())
}
@: * @@throws IllegalArgumentException thrown if parameters fail the validation
@: * @@throws @Model.OperationExceptionTypeString thrown if the request is rejected by server
@: * @@throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
@if (Model.ReturnTypeResponseName.Else("void") != "void")
{
@: * @@return the @Model.ReturnTypeResponseName.EscapeXmlComment() object if successful.
}
@: */
@:@Model.ReturnTypeResponseName @(Model.Name)(@Model.MethodRequiredParameterDeclaration);
@EmptyLine

@if (false == AutoRest.Core.Settings.Instance.Host?.GetValue<bool?>("with-single-async-method").Result)
{
@:/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().SplitByLines(" *", 100).Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().SplitByLines(" *", 100).Period()
}
@: *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().SplitByLines(" *", 100).Trim())
}
@Model.CallbackDocumentation
@: * @@throws IllegalArgumentException thrown if parameters fail the validation
@: * @@return the {@@link ServiceFuture} object
@: */
@:ServiceFuture<@Model.ReturnTypeJv.ServiceFutureGenericParameterString> @(Model.Name)Async(@Model.MethodRequiredParameterDeclarationWithCallback);
@EmptyLine
}
@:/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().SplitByLines(" *", 120).Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().SplitByLines(" *", 120).Period()
}
@: *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @((param.Documentation.IsNullOrEmpty() ? "the " + param.ModelType.Name + " value" : param.Documentation.ToString()).EscapeXmlComment().SplitByLines(" *", 100).Trim())
}
@: * @@throws IllegalArgumentException thrown if parameters fail the validation
@if (Model.ReturnTypeResponseName.Else("void") != "void")
{
@: * @@return the observable to the @Model.ReturnTypeResponseName.EscapeXmlComment() object
}
else
{
@: * @@return the {@@link @Model.ReturnTypeJv.ClientResponseType} object if successful.
}
@: */
@:Observable<@Model.ReturnTypeJv.ServiceResponseGenericParameterString> @(Model.Name)Async(@Model.MethodRequiredParameterDeclaration);
@EmptyLine
@if (false == AutoRest.Core.Settings.Instance.Host?.GetValue<bool?>("with-single-async-method").Result)
{
@:/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().SplitByLines(" *", 100).Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().SplitByLines(" *", 100).Period()
}
@: *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @((param.Documentation.IsNullOrEmpty() ? "the " + param.ModelType.Name + " value" : param.Documentation.ToString()).EscapeXmlComment().SplitByLines(" *", 100).Trim())
}
@: * @@throws IllegalArgumentException thrown if parameters fail the validation
@if (Model.ReturnTypeResponseName.Else("void") != "void")
{
@: * @@return the observable to the @Model.ReturnTypeResponseName.EscapeXmlComment() object
}
else
{
@: * @@return the {@@link @Model.ReturnTypeJv.ClientResponseType} object if successful.
}
@: */
@:Observable<@Model.ReturnTypeJv.ServiceResponseGenericParameterStringWrapped> @(Model.Name)WithServiceResponseAsync(@Model.MethodRequiredParameterDeclaration);
}
}
@EmptyLine
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().SplitByLines(" *", 100).Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().SplitByLines(" *", 100).Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().SplitByLines(" *", 100).Trim())
}
 * @@throws IllegalArgumentException thrown if parameters fail the validation
 * @@throws @Model.OperationExceptionTypeString thrown if the request is rejected by server
 * @@throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
@if (Model.ReturnTypeResponseName.Else("void") != "void")
{
@: * @@return the @Model.ReturnTypeResponseName.EscapeXmlComment() object if successful.
}
 */
@Model.ReturnTypeResponseName @(Model.Name)(@Model.MethodParameterDeclaration);
@EmptyLine
@if (false == AutoRest.Core.Settings.Instance.Host?.GetValue<bool?>("with-single-async-method").Result)
{
@:/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().SplitByLines(" *", 100).Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().SplitByLines(" *", 100).Period()
}
@: *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().SplitByLines(" *", 100).Trim())
}
@Model.CallbackDocumentation
@: * @@throws IllegalArgumentException thrown if parameters fail the validation
@: * @@return the {@@link ServiceFuture} object
@: */
@:ServiceFuture<@Model.ReturnTypeJv.ServiceFutureGenericParameterString> @(Model.Name)Async(@Model.MethodParameterDeclarationWithCallback);
@EmptyLine
}
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().SplitByLines(" *", 100).Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().SplitByLines(" *", 100).Period()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
@: * @@param @param.Name @((param.Documentation.IsNullOrEmpty() ? "the " + param.ModelType.Name + " value" : param.Documentation.ToString()).EscapeXmlComment().SplitByLines(" *", 100).Trim())
}
 * @@throws IllegalArgumentException thrown if parameters fail the validation
@if (Model.ReturnTypeResponseName.Else("void") != "void")
{
@: * @@return the observable to the @Model.ReturnTypeResponseName.EscapeXmlComment() object
}
else
{
@: * @@return a representation of the deferred computation of this call if successful.
}
 */
Observable<@Model.ReturnTypeJv.ServiceResponseGenericParameterString> @(Model.Name)Async(@Model.MethodParameterDeclaration);
@EmptyLine
@if (false == AutoRest.Core.Settings.Instance.Host?.GetValue<bool?>("with-single-async-method").Result)
{
@:/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().SplitByLines(" *", 100).Period()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().SplitByLines(" *", 100).Period()
}
@: *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant))
{
@: * @@param @param.Name @((param.Documentation.IsNullOrEmpty() ? "the " + param.ModelType.Name + " value" : param.Documentation.ToString()).EscapeXmlComment().SplitByLines(" *", 100).Trim())
}
@: * @@throws IllegalArgumentException thrown if parameters fail the validation
@if (Model.ReturnTypeResponseName.Else("void") != "void")
{
@: * @@return the observable to the @Model.ReturnTypeResponseName.EscapeXmlComment() object
}
else
{
@: * @@return a representation of the deferred computation of this call if successful..
}
@: */
@:Observable<@Model.ReturnTypeJv.ServiceResponseGenericParameterStringWrapped> @(Model.Name)WithServiceResponseAsync(@Model.MethodParameterDeclaration);
}