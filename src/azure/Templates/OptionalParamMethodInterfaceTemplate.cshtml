@using System.Linq;
@using AutoRest.Core.Utilities
@using AutoRest.Java
@using AutoRest.Java.Model
@inherits AutoRest.Core.Template<AutoRest.Java.Model.MethodJv>
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period().SplitByLines("* ", 110).Trim()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period().SplitByLines("* ", 110).Trim()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().SplitByLines("* ", 110).Trim())
}
 * @@param @(Model.Name.ToCamelCase())OptionalParameter the object representing the optional parameters to be set before calling this API
 * @@throws IllegalArgumentException thrown if parameters fail the validation
 * @@throws @Model.OperationExceptionTypeString thrown if the request is rejected by server
 * @@throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
@if (Model.ReturnTypeResponseName.Else("void") != "void")
{
@: * @@return the @Model.ReturnTypeResponseName.EscapeXmlComment() object if successful.
}
 */
@Model.ReturnTypeResponseName @(Model.Name)(@Model.MethodOptionalParameterDeclaration);
@EmptyLine
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period().SplitByLines("* ", 110).Trim()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period().SplitByLines("* ", 110).Trim()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().SplitByLines("* ", 110).Trim())
}
 * @@param @(Model.Name.ToCamelCase())OptionalParameter the object representing the optional parameters to be set before calling this API
 * @@throws IllegalArgumentException thrown if parameters fail the validation
@if (Model.ReturnTypeResponseName.Else("void") != "void")
{
@: * @@return the observable to the @Model.ReturnTypeResponseName.EscapeXmlComment() object
}
else
{
@: * @@return a representation of the deferred computation of this call if successful.
}
 */
Observable<@Model.ReturnTypeJv.ServiceResponseGenericParameterString> @(Model.Name)Async(@Model.MethodOptionalParameterDeclaration);
