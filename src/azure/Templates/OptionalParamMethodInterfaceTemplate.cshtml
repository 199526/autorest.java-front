@using System.Linq;
@using AutoRest.Core.Utilities
@using AutoRest.Java
@using AutoRest.Java.Model
@inherits AutoRest.Core.Template<AutoRest.Java.Model.MethodJv>
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period().SplitByLines("* ", 110).Trim()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period().SplitByLines("* ", 110).Trim()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().SplitByLines("* ", 110).Trim())
}
 * @@param @(Model.Name.ToCamelCase())OptionalParameter the object representing the optional parameters to be set before calling this API
 * @@throws IllegalArgumentException thrown if parameters fail the validation
 * @@throws @Model.OperationExceptionTypeString thrown if the request is rejected by server
 * @@throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
@if (Model.ReturnTypeResponseName.Else("void") != "void")
{
@: * @@return the @Model.ReturnTypeResponseName.EscapeXmlComment() object if successful.
}
 */
@Model.ReturnTypeResponseName @(Model.Name)(@Model.MethodOptionalParameterDeclaration);
@EmptyLine
/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period().SplitByLines("* ", 110).Trim()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period().SplitByLines("* ", 110).Trim()
}
 *
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@: * @@param @param.Name @(param.Documentation.Else("the " + param.ModelType.Name + " value").EscapeXmlComment().SplitByLines("* ", 110).Trim())
}
 * @@param @(Model.Name.ToCamelCase())OptionalParameter the object representing the optional parameters to be set before calling this API
 * @@throws IllegalArgumentException thrown if parameters fail the validation
@if (Model.ReturnTypeResponseName.Else("void") != "void")
{
@: * @@return the observable to the @Model.ReturnTypeResponseName.EscapeXmlComment() object
}
else
{
@: * @@return a representation of the deferred computation of this call if successful.
}
 */
Observable<@Model.ReturnTypeJv.ServiceResponseGenericParameterString> @(Model.Name)Async(@Model.MethodOptionalParameterDeclaration);
@EmptyLine
@if (true == AutoRest.Core.Settings.Instance.Host?.GetValue<bool?>("with-expanded-parameters").Result)
{
@:/**
@if (!string.IsNullOrEmpty(Model.Summary))
{
@: * @Model.Summary.EscapeXmlComment().Period().SplitByLines("* ", 110).Trim()
}
@if (!string.IsNullOrEmpty(Model.Description))
{
@: * @Model.Description.EscapeXmlComment().Period().SplitByLines("* ", 110).Trim()
}
@: *
@: * @@return the first stage of the @(Model.Name) call
@: */
@:@(Model.Extensions["InterfaceReturn"].ToString()) @(Model.Name)();
@EmptyLine
@:/**
@: * Grouping of @(Model.Name) definition stages.
@: */
@:interface @(Model.Extensions["InterfaceDefinitionStages"].ToString()) {
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@:    /**
@:     * The stage of the definition to be specify @(param.Name).
@:     */
@:    interface @(param.Extensions["InterfaceMethodName"].ToString().ToPascalCase()) {
@:        /**
@:         * @((param.Documentation == null) ? "Specifies " + param.Name + "." : param.Documentation.EscapeXmlComment().SplitByLines("* ", 110).Trim())
@:         * 
@:         * @@return next definition stage
@:         */
@:        @(param.Extensions["InterfaceReturn"]) @(param.Extensions["InterfaceMethodName"])(@(param.ClientType.ParameterVariant.Name) @(param.Name));
@:    }
}
@EmptyLine
@:    /**
@:     * The stage of the definition which allows for any other optional settings to be specified.
@:     */
@:    interface WithAllOptions {
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && !p.IsRequired))
{
@:        /**
@:         * @((param.Documentation == null) ? "Specifies " + param.Name + "." : param.Documentation.EscapeXmlComment().SplitByLines("* ", 110).Trim())
@:         * 
@:         * @@return next definition stage
@:         */
@:        @(param.Extensions["InterfaceReturn"]) @(param.Extensions["InterfaceMethodName"])(@(param.ClientType.ParameterVariant.Name) @(param.Name));
@EmptyLine
}
@:    }
@EmptyLine
@:    /**
@:     * The last stage of the definition which will make the operation call.
@:    */
@:    interface WithExecute extends @(Model.Extensions["InterfaceDefinitionStages"].ToString()).WithAllOptions {
@:        /**
@:         * Execute the request.
@:         *
@if (Model.ReturnTypeResponseName.Else("void") != "void")
{
@:         * @@return the @Model.ReturnTypeResponseName.EscapeXmlComment() object if successful.
}
@:         */
@:        @Model.ReturnTypeResponseName execute();
@EmptyLine
@:        /**
@:         * Execute the request asynchronously.
@:         *
@if (Model.ReturnTypeResponseName.Else("void") != "void")
{
@:         * @@return the observable to the @Model.ReturnTypeResponseName.EscapeXmlComment() object
}
else
{
@:         * @@return a representation of the deferred computation of this call if successful.
}
@:         */
@:        Observable<@Model.ReturnTypeJv.ServiceResponseGenericParameterString> executeAsync();
@:    }
@:}
@EmptyLine
@:/**
@: * The entirety of @(Model.Name) definition.
@: */
@:interface @(Model.Extensions["InterfaceDefinition"].ToString()) extends
@foreach (var param in Model.LocalParameters.Where(p => !p.IsConstant && p.IsRequired))
{
@:    @(Model.Extensions["InterfaceDefinitionStages"].ToString() + "." + param.Extensions["InterfaceMethodName"].ToString().ToPascalCase()),
}
@:    @(Model.Extensions["InterfaceDefinitionStages"].ToString()).WithExecute {
@:}
}


