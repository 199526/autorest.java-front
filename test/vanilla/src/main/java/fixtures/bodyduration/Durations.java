/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodyduration;

import com.microsoft.rest.v2.RestResponse;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import io.reactivex.Completable;
import io.reactivex.Maybe;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;
import org.joda.time.Period;

/**
 * An instance of this class provides access to all the operations defined in
 * Durations.
 */
public interface Durations {
    /**
     * Get null duration value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Period object if successful.
     */
    Period getNull();

    /**
     * Get null duration value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Period&gt;} object.
     */
    ServiceFuture<Period> getNullAsync(ServiceCallback<Period> serviceCallback);

    /**
     * Get null duration value.
     *
     * @return the {@link Single&lt;RestResponse&lt;Void, Period&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Period>> getNullWithRestResponseAsync();

    /**
     * Get null duration value.
     *
     * @return the {@link Maybe&lt;Period&gt;} object if successful.
     */
    Maybe<Period> getNullAsync();

    /**
     * Put a positive duration value.
     *
     * @param durationBody the Period value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void putPositiveDuration(@NonNull Period durationBody);

    /**
     * Put a positive duration value.
     *
     * @param durationBody the Period value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Void&gt;} object.
     */
    ServiceFuture<Void> putPositiveDurationAsync(@NonNull Period durationBody, ServiceCallback<Void> serviceCallback);

    /**
     * Put a positive duration value.
     *
     * @param durationBody the Period value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;RestResponse&lt;Void, Void&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Void>> putPositiveDurationWithRestResponseAsync(@NonNull Period durationBody);

    /**
     * Put a positive duration value.
     *
     * @param durationBody the Period value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Completable} object if successful.
     */
    Completable putPositiveDurationAsync(@NonNull Period durationBody);

    /**
     * Get a positive duration value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Period object if successful.
     */
    Period getPositiveDuration();

    /**
     * Get a positive duration value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Period&gt;} object.
     */
    ServiceFuture<Period> getPositiveDurationAsync(ServiceCallback<Period> serviceCallback);

    /**
     * Get a positive duration value.
     *
     * @return the {@link Single&lt;RestResponse&lt;Void, Period&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Period>> getPositiveDurationWithRestResponseAsync();

    /**
     * Get a positive duration value.
     *
     * @return the {@link Maybe&lt;Period&gt;} object if successful.
     */
    Maybe<Period> getPositiveDurationAsync();

    /**
     * Get an invalid duration value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Period object if successful.
     */
    Period getInvalid();

    /**
     * Get an invalid duration value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Period&gt;} object.
     */
    ServiceFuture<Period> getInvalidAsync(ServiceCallback<Period> serviceCallback);

    /**
     * Get an invalid duration value.
     *
     * @return the {@link Single&lt;RestResponse&lt;Void, Period&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Period>> getInvalidWithRestResponseAsync();

    /**
     * Get an invalid duration value.
     *
     * @return the {@link Maybe&lt;Period&gt;} object if successful.
     */
    Maybe<Period> getInvalidAsync();
}
