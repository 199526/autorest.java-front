/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodynumber.implementation;

import com.microsoft.rest.v3.BodyResponse;
import com.microsoft.rest.v3.RestProxy;
import com.microsoft.rest.v3.ServiceCallback;
import com.microsoft.rest.v3.ServiceFuture;
import com.microsoft.rest.v3.VoidResponse;
import com.microsoft.rest.v3.annotations.BodyParam;
import com.microsoft.rest.v3.annotations.ExpectedResponses;
import com.microsoft.rest.v3.annotations.GET;
import com.microsoft.rest.v3.annotations.Host;
import com.microsoft.rest.v3.annotations.PUT;
import com.microsoft.rest.v3.annotations.UnexpectedResponseExceptionType;
import fixtures.bodynumber.Numbers;
import fixtures.bodynumber.models.ErrorException;
import java.math.BigDecimal;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * Numbers.
 */
public final class NumbersImpl implements Numbers {
    /**
     * The proxy service used to perform REST calls.
     */
    private NumbersService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestNumberTestServiceImpl client;

    /**
     * Initializes an instance of NumbersImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public NumbersImpl(AutoRestNumberTestServiceImpl client) {
        this.service = RestProxy.create(NumbersService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Numbers to be used by the
     * proxy service to perform REST calls.
     */
    @Host("http://localhost:3000")
    private interface NumbersService {
        @GET("number/null")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<BodyResponse<Double>> getNull();

        @GET("number/invalidfloat")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<BodyResponse<Double>> getInvalidFloat();

        @GET("number/invaliddouble")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<BodyResponse<Double>> getInvalidDouble();

        @GET("number/invaliddecimal")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<BodyResponse<BigDecimal>> getInvalidDecimal();

        @PUT("number/big/float/3.402823e+20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putBigFloat(@BodyParam("application/json; charset=utf-8") double numberBody);

        @GET("number/big/float/3.402823e+20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<BodyResponse<Double>> getBigFloat();

        @PUT("number/big/double/2.5976931e+101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putBigDouble(@BodyParam("application/json; charset=utf-8") double numberBody);

        @GET("number/big/double/2.5976931e+101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<BodyResponse<Double>> getBigDouble();

        @PUT("number/big/double/99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putBigDoublePositiveDecimal(@BodyParam("application/json; charset=utf-8") double numberBody);

        @GET("number/big/double/99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<BodyResponse<Double>> getBigDoublePositiveDecimal();

        @PUT("number/big/double/-99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putBigDoubleNegativeDecimal(@BodyParam("application/json; charset=utf-8") double numberBody);

        @GET("number/big/double/-99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<BodyResponse<Double>> getBigDoubleNegativeDecimal();

        @PUT("number/big/decimal/2.5976931e+101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putBigDecimal(@BodyParam("application/json; charset=utf-8") BigDecimal numberBody);

        @GET("number/big/decimal/2.5976931e+101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<BodyResponse<BigDecimal>> getBigDecimal();

        @PUT("number/big/decimal/99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putBigDecimalPositiveDecimal(@BodyParam("application/json; charset=utf-8") BigDecimal numberBody);

        @GET("number/big/decimal/99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<BodyResponse<BigDecimal>> getBigDecimalPositiveDecimal();

        @PUT("number/big/decimal/-99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putBigDecimalNegativeDecimal(@BodyParam("application/json; charset=utf-8") BigDecimal numberBody);

        @GET("number/big/decimal/-99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<BodyResponse<BigDecimal>> getBigDecimalNegativeDecimal();

        @PUT("number/small/float/3.402823e-20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putSmallFloat(@BodyParam("application/json; charset=utf-8") double numberBody);

        @GET("number/small/float/3.402823e-20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<BodyResponse<Double>> getSmallFloat();

        @PUT("number/small/double/2.5976931e-101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putSmallDouble(@BodyParam("application/json; charset=utf-8") double numberBody);

        @GET("number/small/double/2.5976931e-101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<BodyResponse<Double>> getSmallDouble();

        @PUT("number/small/decimal/2.5976931e-101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putSmallDecimal(@BodyParam("application/json; charset=utf-8") BigDecimal numberBody);

        @GET("number/small/decimal/2.5976931e-101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<BodyResponse<BigDecimal>> getSmallDecimal();
    }

    /**
     * Get null Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    public double getNull() {
        return getNullAsync().block();
    }

    /**
     * Get null Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Double> getNullAsync(ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getNullAsync(), serviceCallback);
    }

    /**
     * Get null Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<Double>> getNullWithRestResponseAsync() {
        return service.getNull();
    }

    /**
     * Get null Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Double> getNullAsync() {
        return getNullWithRestResponseAsync()
            .flatMap((BodyResponse<Double> res) -> Mono.just(res.body()));
    }

    /**
     * Get invalid float Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    public double getInvalidFloat() {
        return getInvalidFloatAsync().block();
    }

    /**
     * Get invalid float Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Double> getInvalidFloatAsync(ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getInvalidFloatAsync(), serviceCallback);
    }

    /**
     * Get invalid float Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<Double>> getInvalidFloatWithRestResponseAsync() {
        return service.getInvalidFloat();
    }

    /**
     * Get invalid float Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Double> getInvalidFloatAsync() {
        return getInvalidFloatWithRestResponseAsync()
            .flatMap((BodyResponse<Double> res) -> Mono.just(res.body()));
    }

    /**
     * Get invalid double Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    public double getInvalidDouble() {
        return getInvalidDoubleAsync().block();
    }

    /**
     * Get invalid double Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Double> getInvalidDoubleAsync(ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getInvalidDoubleAsync(), serviceCallback);
    }

    /**
     * Get invalid double Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<Double>> getInvalidDoubleWithRestResponseAsync() {
        return service.getInvalidDouble();
    }

    /**
     * Get invalid double Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Double> getInvalidDoubleAsync() {
        return getInvalidDoubleWithRestResponseAsync()
            .flatMap((BodyResponse<Double> res) -> Mono.just(res.body()));
    }

    /**
     * Get invalid decimal Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BigDecimal object if successful.
     */
    public BigDecimal getInvalidDecimal() {
        return getInvalidDecimalAsync().block();
    }

    /**
     * Get invalid decimal Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<BigDecimal> getInvalidDecimalAsync(ServiceCallback<BigDecimal> serviceCallback) {
        return ServiceFuture.fromBody(getInvalidDecimalAsync(), serviceCallback);
    }

    /**
     * Get invalid decimal Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<BigDecimal>> getInvalidDecimalWithRestResponseAsync() {
        return service.getInvalidDecimal();
    }

    /**
     * Get invalid decimal Number value.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BigDecimal> getInvalidDecimalAsync() {
        return getInvalidDecimalWithRestResponseAsync()
            .flatMap((BodyResponse<BigDecimal> res) -> Mono.just(res.body()));
    }

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putBigFloat(@NonNull double numberBody) {
        putBigFloatAsync(numberBody).block();
    }

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putBigFloatAsync(@NonNull double numberBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBigFloatAsync(numberBody), serviceCallback);
    }

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<VoidResponse> putBigFloatWithRestResponseAsync(@NonNull double numberBody) {
        return service.putBigFloat(numberBody);
    }

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> putBigFloatAsync(@NonNull double numberBody) {
        return putBigFloatWithRestResponseAsync(numberBody)
            .flatMap((VoidResponse res) -> Mono.just(res.body()));
    }

    /**
     * Get big float value 3.402823e+20.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    public double getBigFloat() {
        return getBigFloatAsync().block();
    }

    /**
     * Get big float value 3.402823e+20.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Double> getBigFloatAsync(ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getBigFloatAsync(), serviceCallback);
    }

    /**
     * Get big float value 3.402823e+20.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<Double>> getBigFloatWithRestResponseAsync() {
        return service.getBigFloat();
    }

    /**
     * Get big float value 3.402823e+20.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Double> getBigFloatAsync() {
        return getBigFloatWithRestResponseAsync()
            .flatMap((BodyResponse<Double> res) -> Mono.just(res.body()));
    }

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putBigDouble(@NonNull double numberBody) {
        putBigDoubleAsync(numberBody).block();
    }

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putBigDoubleAsync(@NonNull double numberBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBigDoubleAsync(numberBody), serviceCallback);
    }

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<VoidResponse> putBigDoubleWithRestResponseAsync(@NonNull double numberBody) {
        return service.putBigDouble(numberBody);
    }

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> putBigDoubleAsync(@NonNull double numberBody) {
        return putBigDoubleWithRestResponseAsync(numberBody)
            .flatMap((VoidResponse res) -> Mono.just(res.body()));
    }

    /**
     * Get big double value 2.5976931e+101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    public double getBigDouble() {
        return getBigDoubleAsync().block();
    }

    /**
     * Get big double value 2.5976931e+101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Double> getBigDoubleAsync(ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getBigDoubleAsync(), serviceCallback);
    }

    /**
     * Get big double value 2.5976931e+101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<Double>> getBigDoubleWithRestResponseAsync() {
        return service.getBigDouble();
    }

    /**
     * Get big double value 2.5976931e+101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Double> getBigDoubleAsync() {
        return getBigDoubleWithRestResponseAsync()
            .flatMap((BodyResponse<Double> res) -> Mono.just(res.body()));
    }

    /**
     * Put big double value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putBigDoublePositiveDecimal() {
        putBigDoublePositiveDecimalAsync().block();
    }

    /**
     * Put big double value 99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putBigDoublePositiveDecimalAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBigDoublePositiveDecimalAsync(), serviceCallback);
    }

    /**
     * Put big double value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<VoidResponse> putBigDoublePositiveDecimalWithRestResponseAsync() {
        final double numberBody = 99999999.99;
        return service.putBigDoublePositiveDecimal(numberBody);
    }

    /**
     * Put big double value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> putBigDoublePositiveDecimalAsync() {
        return putBigDoublePositiveDecimalWithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.just(res.body()));
    }

    /**
     * Get big double value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    public double getBigDoublePositiveDecimal() {
        return getBigDoublePositiveDecimalAsync().block();
    }

    /**
     * Get big double value 99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Double> getBigDoublePositiveDecimalAsync(ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getBigDoublePositiveDecimalAsync(), serviceCallback);
    }

    /**
     * Get big double value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<Double>> getBigDoublePositiveDecimalWithRestResponseAsync() {
        return service.getBigDoublePositiveDecimal();
    }

    /**
     * Get big double value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Double> getBigDoublePositiveDecimalAsync() {
        return getBigDoublePositiveDecimalWithRestResponseAsync()
            .flatMap((BodyResponse<Double> res) -> Mono.just(res.body()));
    }

    /**
     * Put big double value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putBigDoubleNegativeDecimal() {
        putBigDoubleNegativeDecimalAsync().block();
    }

    /**
     * Put big double value -99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putBigDoubleNegativeDecimalAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBigDoubleNegativeDecimalAsync(), serviceCallback);
    }

    /**
     * Put big double value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<VoidResponse> putBigDoubleNegativeDecimalWithRestResponseAsync() {
        final double numberBody = -99999999.99;
        return service.putBigDoubleNegativeDecimal(numberBody);
    }

    /**
     * Put big double value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> putBigDoubleNegativeDecimalAsync() {
        return putBigDoubleNegativeDecimalWithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.just(res.body()));
    }

    /**
     * Get big double value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    public double getBigDoubleNegativeDecimal() {
        return getBigDoubleNegativeDecimalAsync().block();
    }

    /**
     * Get big double value -99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Double> getBigDoubleNegativeDecimalAsync(ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getBigDoubleNegativeDecimalAsync(), serviceCallback);
    }

    /**
     * Get big double value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<Double>> getBigDoubleNegativeDecimalWithRestResponseAsync() {
        return service.getBigDoubleNegativeDecimal();
    }

    /**
     * Get big double value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Double> getBigDoubleNegativeDecimalAsync() {
        return getBigDoubleNegativeDecimalWithRestResponseAsync()
            .flatMap((BodyResponse<Double> res) -> Mono.just(res.body()));
    }

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putBigDecimal(@NonNull BigDecimal numberBody) {
        putBigDecimalAsync(numberBody).block();
    }

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putBigDecimalAsync(@NonNull BigDecimal numberBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBigDecimalAsync(numberBody), serviceCallback);
    }

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<VoidResponse> putBigDecimalWithRestResponseAsync(@NonNull BigDecimal numberBody) {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        return service.putBigDecimal(numberBody);
    }

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> putBigDecimalAsync(@NonNull BigDecimal numberBody) {
        return putBigDecimalWithRestResponseAsync(numberBody)
            .flatMap((VoidResponse res) -> Mono.just(res.body()));
    }

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BigDecimal object if successful.
     */
    public BigDecimal getBigDecimal() {
        return getBigDecimalAsync().block();
    }

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<BigDecimal> getBigDecimalAsync(ServiceCallback<BigDecimal> serviceCallback) {
        return ServiceFuture.fromBody(getBigDecimalAsync(), serviceCallback);
    }

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<BigDecimal>> getBigDecimalWithRestResponseAsync() {
        return service.getBigDecimal();
    }

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BigDecimal> getBigDecimalAsync() {
        return getBigDecimalWithRestResponseAsync()
            .flatMap((BodyResponse<BigDecimal> res) -> Mono.just(res.body()));
    }

    /**
     * Put big decimal value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putBigDecimalPositiveDecimal() {
        putBigDecimalPositiveDecimalAsync().block();
    }

    /**
     * Put big decimal value 99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putBigDecimalPositiveDecimalAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBigDecimalPositiveDecimalAsync(), serviceCallback);
    }

    /**
     * Put big decimal value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<VoidResponse> putBigDecimalPositiveDecimalWithRestResponseAsync() {
        final BigDecimal numberBody = new BigDecimal("99999999.99");
        return service.putBigDecimalPositiveDecimal(numberBody);
    }

    /**
     * Put big decimal value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> putBigDecimalPositiveDecimalAsync() {
        return putBigDecimalPositiveDecimalWithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.just(res.body()));
    }

    /**
     * Get big decimal value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BigDecimal object if successful.
     */
    public BigDecimal getBigDecimalPositiveDecimal() {
        return getBigDecimalPositiveDecimalAsync().block();
    }

    /**
     * Get big decimal value 99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<BigDecimal> getBigDecimalPositiveDecimalAsync(ServiceCallback<BigDecimal> serviceCallback) {
        return ServiceFuture.fromBody(getBigDecimalPositiveDecimalAsync(), serviceCallback);
    }

    /**
     * Get big decimal value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<BigDecimal>> getBigDecimalPositiveDecimalWithRestResponseAsync() {
        return service.getBigDecimalPositiveDecimal();
    }

    /**
     * Get big decimal value 99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BigDecimal> getBigDecimalPositiveDecimalAsync() {
        return getBigDecimalPositiveDecimalWithRestResponseAsync()
            .flatMap((BodyResponse<BigDecimal> res) -> Mono.just(res.body()));
    }

    /**
     * Put big decimal value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putBigDecimalNegativeDecimal() {
        putBigDecimalNegativeDecimalAsync().block();
    }

    /**
     * Put big decimal value -99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putBigDecimalNegativeDecimalAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBigDecimalNegativeDecimalAsync(), serviceCallback);
    }

    /**
     * Put big decimal value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<VoidResponse> putBigDecimalNegativeDecimalWithRestResponseAsync() {
        final BigDecimal numberBody = new BigDecimal("-99999999.99");
        return service.putBigDecimalNegativeDecimal(numberBody);
    }

    /**
     * Put big decimal value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> putBigDecimalNegativeDecimalAsync() {
        return putBigDecimalNegativeDecimalWithRestResponseAsync()
            .flatMap((VoidResponse res) -> Mono.just(res.body()));
    }

    /**
     * Get big decimal value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BigDecimal object if successful.
     */
    public BigDecimal getBigDecimalNegativeDecimal() {
        return getBigDecimalNegativeDecimalAsync().block();
    }

    /**
     * Get big decimal value -99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<BigDecimal> getBigDecimalNegativeDecimalAsync(ServiceCallback<BigDecimal> serviceCallback) {
        return ServiceFuture.fromBody(getBigDecimalNegativeDecimalAsync(), serviceCallback);
    }

    /**
     * Get big decimal value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<BigDecimal>> getBigDecimalNegativeDecimalWithRestResponseAsync() {
        return service.getBigDecimalNegativeDecimal();
    }

    /**
     * Get big decimal value -99999999.99.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BigDecimal> getBigDecimalNegativeDecimalAsync() {
        return getBigDecimalNegativeDecimalWithRestResponseAsync()
            .flatMap((BodyResponse<BigDecimal> res) -> Mono.just(res.body()));
    }

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putSmallFloat(@NonNull double numberBody) {
        putSmallFloatAsync(numberBody).block();
    }

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putSmallFloatAsync(@NonNull double numberBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putSmallFloatAsync(numberBody), serviceCallback);
    }

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<VoidResponse> putSmallFloatWithRestResponseAsync(@NonNull double numberBody) {
        return service.putSmallFloat(numberBody);
    }

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> putSmallFloatAsync(@NonNull double numberBody) {
        return putSmallFloatWithRestResponseAsync(numberBody)
            .flatMap((VoidResponse res) -> Mono.just(res.body()));
    }

    /**
     * Get big double value 3.402823e-20.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    public double getSmallFloat() {
        return getSmallFloatAsync().block();
    }

    /**
     * Get big double value 3.402823e-20.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Double> getSmallFloatAsync(ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getSmallFloatAsync(), serviceCallback);
    }

    /**
     * Get big double value 3.402823e-20.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<Double>> getSmallFloatWithRestResponseAsync() {
        return service.getSmallFloat();
    }

    /**
     * Get big double value 3.402823e-20.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Double> getSmallFloatAsync() {
        return getSmallFloatWithRestResponseAsync()
            .flatMap((BodyResponse<Double> res) -> Mono.just(res.body()));
    }

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putSmallDouble(@NonNull double numberBody) {
        putSmallDoubleAsync(numberBody).block();
    }

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putSmallDoubleAsync(@NonNull double numberBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putSmallDoubleAsync(numberBody), serviceCallback);
    }

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<VoidResponse> putSmallDoubleWithRestResponseAsync(@NonNull double numberBody) {
        return service.putSmallDouble(numberBody);
    }

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> putSmallDoubleAsync(@NonNull double numberBody) {
        return putSmallDoubleWithRestResponseAsync(numberBody)
            .flatMap((VoidResponse res) -> Mono.just(res.body()));
    }

    /**
     * Get big double value 2.5976931e-101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    public double getSmallDouble() {
        return getSmallDoubleAsync().block();
    }

    /**
     * Get big double value 2.5976931e-101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Double> getSmallDoubleAsync(ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getSmallDoubleAsync(), serviceCallback);
    }

    /**
     * Get big double value 2.5976931e-101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<Double>> getSmallDoubleWithRestResponseAsync() {
        return service.getSmallDouble();
    }

    /**
     * Get big double value 2.5976931e-101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Double> getSmallDoubleAsync() {
        return getSmallDoubleWithRestResponseAsync()
            .flatMap((BodyResponse<Double> res) -> Mono.just(res.body()));
    }

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putSmallDecimal(@NonNull BigDecimal numberBody) {
        putSmallDecimalAsync(numberBody).block();
    }

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putSmallDecimalAsync(@NonNull BigDecimal numberBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putSmallDecimalAsync(numberBody), serviceCallback);
    }

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<VoidResponse> putSmallDecimalWithRestResponseAsync(@NonNull BigDecimal numberBody) {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        return service.putSmallDecimal(numberBody);
    }

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> putSmallDecimalAsync(@NonNull BigDecimal numberBody) {
        return putSmallDecimalWithRestResponseAsync(numberBody)
            .flatMap((VoidResponse res) -> Mono.just(res.body()));
    }

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BigDecimal object if successful.
     */
    public BigDecimal getSmallDecimal() {
        return getSmallDecimalAsync().block();
    }

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<BigDecimal> getSmallDecimalAsync(ServiceCallback<BigDecimal> serviceCallback) {
        return ServiceFuture.fromBody(getSmallDecimalAsync(), serviceCallback);
    }

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<BigDecimal>> getSmallDecimalWithRestResponseAsync() {
        return service.getSmallDecimal();
    }

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BigDecimal> getSmallDecimalAsync() {
        return getSmallDecimalWithRestResponseAsync()
            .flatMap((BodyResponse<BigDecimal> res) -> Mono.just(res.body()));
    }
}
