/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodynumber.implementation;

import com.google.common.reflect.TypeToken;
import com.microsoft.rest.v2.RestProxy;
import com.microsoft.rest.v2.RestResponse;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.annotations.BodyParam;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.Headers;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PUT;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import com.microsoft.rest.v2.http.HttpClient;
import fixtures.bodynumber.Numbers;
import fixtures.bodynumber.models.ErrorException;
import io.reactivex.Completable;
import io.reactivex.Maybe;
import io.reactivex.Observable;
import io.reactivex.Single;
import io.reactivex.functions.Function;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * An instance of this class provides access to all the operations defined in
 * Numbers.
 */
public class NumbersImpl implements Numbers {
    /**
     * The RestProxy service to perform REST calls.
     */
    private NumbersService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestNumberTestServiceImpl client;

    /**
     * Initializes an instance of Numbers.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public NumbersImpl(AutoRestNumberTestServiceImpl client) {
        this.service = RestProxy.create(NumbersService.class, client.httpPipeline(), client.serializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for Numbers to be used by
     * RestProxy to perform REST calls.
     */
    @Host("https://localhost")
    interface NumbersService {
        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getNull" })
        @GET("number/null")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Double>> getNull();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getInvalidFloat" })
        @GET("number/invalidfloat")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Double>> getInvalidFloat();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getInvalidDouble" })
        @GET("number/invaliddouble")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Double>> getInvalidDouble();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getInvalidDecimal" })
        @GET("number/invaliddecimal")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, BigDecimal>> getInvalidDecimal();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers putBigFloat" })
        @PUT("number/big/float/3.402823e+20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Void>> putBigFloat(@BodyParam("application/json; charset=utf-8") double numberBody);

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getBigFloat" })
        @GET("number/big/float/3.402823e+20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Double>> getBigFloat();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers putBigDouble" })
        @PUT("number/big/double/2.5976931e+101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Void>> putBigDouble(@BodyParam("application/json; charset=utf-8") double numberBody);

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getBigDouble" })
        @GET("number/big/double/2.5976931e+101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Double>> getBigDouble();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers putBigDoublePositiveDecimal" })
        @PUT("number/big/double/99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Void>> putBigDoublePositiveDecimal(@BodyParam("application/json; charset=utf-8") double numberBody);

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getBigDoublePositiveDecimal" })
        @GET("number/big/double/99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Double>> getBigDoublePositiveDecimal();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers putBigDoubleNegativeDecimal" })
        @PUT("number/big/double/-99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Void>> putBigDoubleNegativeDecimal(@BodyParam("application/json; charset=utf-8") double numberBody);

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getBigDoubleNegativeDecimal" })
        @GET("number/big/double/-99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Double>> getBigDoubleNegativeDecimal();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers putBigDecimal" })
        @PUT("number/big/decimal/2.5976931e+101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Void>> putBigDecimal(@BodyParam("application/json; charset=utf-8") BigDecimal numberBody);

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getBigDecimal" })
        @GET("number/big/decimal/2.5976931e+101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, BigDecimal>> getBigDecimal();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers putBigDecimalPositiveDecimal" })
        @PUT("number/big/decimal/99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Void>> putBigDecimalPositiveDecimal(@BodyParam("application/json; charset=utf-8") BigDecimal numberBody);

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getBigDecimalPositiveDecimal" })
        @GET("number/big/decimal/99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, BigDecimal>> getBigDecimalPositiveDecimal();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers putBigDecimalNegativeDecimal" })
        @PUT("number/big/decimal/-99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Void>> putBigDecimalNegativeDecimal(@BodyParam("application/json; charset=utf-8") BigDecimal numberBody);

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getBigDecimalNegativeDecimal" })
        @GET("number/big/decimal/-99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, BigDecimal>> getBigDecimalNegativeDecimal();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers putSmallFloat" })
        @PUT("number/small/float/3.402823e-20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Void>> putSmallFloat(@BodyParam("application/json; charset=utf-8") double numberBody);

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getSmallFloat" })
        @GET("number/small/float/3.402823e-20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Double>> getSmallFloat();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers putSmallDouble" })
        @PUT("number/small/double/2.5976931e-101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Void>> putSmallDouble(@BodyParam("application/json; charset=utf-8") double numberBody);

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getSmallDouble" })
        @GET("number/small/double/2.5976931e-101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Double>> getSmallDouble();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers putSmallDecimal" })
        @PUT("number/small/decimal/2.5976931e-101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Void>> putSmallDecimal(@BodyParam("application/json; charset=utf-8") BigDecimal numberBody);

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getSmallDecimal" })
        @GET("number/small/decimal/2.5976931e-101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, BigDecimal>> getSmallDecimal();

    }

    /**
     * Get null Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    public double getNull() {
        return getNullAsync().blockingGet();
    }

    /**
     * Get null Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Double> getNullAsync(ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getNullAsync(), serviceCallback);
    }

    /**
     * Get null Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Double> object
     */
    public Single<RestResponse<Void, Double>> getNullWithRestResponseAsync() {
        return service.getNull();
    }

    /**
     * Get null Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Double> object
     */
    public Maybe<Double> getNullAsync() {
        return getNullWithRestResponseAsync()
            .flatMapMaybe(new Function<RestResponse<Void, Double>, Maybe<Double>>() {
                public Maybe<Double> apply(RestResponse<Void, Double> restResponse) {
                    if (restResponse.body() == null) {
                        return Maybe.empty();
                    } else {
                        return Maybe.just(restResponse.body());
                    }
                }
            });
        }


    /**
     * Get invalid float Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    public double getInvalidFloat() {
        return getInvalidFloatAsync().blockingGet();
    }

    /**
     * Get invalid float Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Double> getInvalidFloatAsync(ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getInvalidFloatAsync(), serviceCallback);
    }

    /**
     * Get invalid float Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Double> object
     */
    public Single<RestResponse<Void, Double>> getInvalidFloatWithRestResponseAsync() {
        return service.getInvalidFloat();
    }

    /**
     * Get invalid float Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Double> object
     */
    public Maybe<Double> getInvalidFloatAsync() {
        return getInvalidFloatWithRestResponseAsync()
            .flatMapMaybe(new Function<RestResponse<Void, Double>, Maybe<Double>>() {
                public Maybe<Double> apply(RestResponse<Void, Double> restResponse) {
                    if (restResponse.body() == null) {
                        return Maybe.empty();
                    } else {
                        return Maybe.just(restResponse.body());
                    }
                }
            });
        }


    /**
     * Get invalid double Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    public double getInvalidDouble() {
        return getInvalidDoubleAsync().blockingGet();
    }

    /**
     * Get invalid double Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Double> getInvalidDoubleAsync(ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getInvalidDoubleAsync(), serviceCallback);
    }

    /**
     * Get invalid double Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Double> object
     */
    public Single<RestResponse<Void, Double>> getInvalidDoubleWithRestResponseAsync() {
        return service.getInvalidDouble();
    }

    /**
     * Get invalid double Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Double> object
     */
    public Maybe<Double> getInvalidDoubleAsync() {
        return getInvalidDoubleWithRestResponseAsync()
            .flatMapMaybe(new Function<RestResponse<Void, Double>, Maybe<Double>>() {
                public Maybe<Double> apply(RestResponse<Void, Double> restResponse) {
                    if (restResponse.body() == null) {
                        return Maybe.empty();
                    } else {
                        return Maybe.just(restResponse.body());
                    }
                }
            });
        }


    /**
     * Get invalid decimal Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BigDecimal object if successful.
     */
    public BigDecimal getInvalidDecimal() {
        return getInvalidDecimalAsync().blockingGet();
    }

    /**
     * Get invalid decimal Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BigDecimal> getInvalidDecimalAsync(ServiceCallback<BigDecimal> serviceCallback) {
        return ServiceFuture.fromBody(getInvalidDecimalAsync(), serviceCallback);
    }

    /**
     * Get invalid decimal Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, BigDecimal> object
     */
    public Single<RestResponse<Void, BigDecimal>> getInvalidDecimalWithRestResponseAsync() {
        return service.getInvalidDecimal();
    }

    /**
     * Get invalid decimal Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, BigDecimal> object
     */
    public Maybe<BigDecimal> getInvalidDecimalAsync() {
        return getInvalidDecimalWithRestResponseAsync()
            .flatMapMaybe(new Function<RestResponse<Void, BigDecimal>, Maybe<BigDecimal>>() {
                public Maybe<BigDecimal> apply(RestResponse<Void, BigDecimal> restResponse) {
                    if (restResponse.body() == null) {
                        return Maybe.empty();
                    } else {
                        return Maybe.just(restResponse.body());
                    }
                }
            });
        }


    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the void object if successful.
     */
    public void putBigFloat(double numberBody) {
        putBigFloatAsync(numberBody).blockingAwait();
    }

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putBigFloatAsync(double numberBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBigFloatAsync(numberBody), serviceCallback);
    }

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Void> object
     */
    public Single<RestResponse<Void, Void>> putBigFloatWithRestResponseAsync(double numberBody) {
        return service.putBigFloat(numberBody);
    }

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Void> object
     */
    public Completable putBigFloatAsync(double numberBody) {
        return putBigFloatWithRestResponseAsync(numberBody)
            .toCompletable();
        }


    /**
     * Get big float value 3.402823e+20.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    public double getBigFloat() {
        return getBigFloatAsync().blockingGet();
    }

    /**
     * Get big float value 3.402823e+20.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Double> getBigFloatAsync(ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getBigFloatAsync(), serviceCallback);
    }

    /**
     * Get big float value 3.402823e+20.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Double> object
     */
    public Single<RestResponse<Void, Double>> getBigFloatWithRestResponseAsync() {
        return service.getBigFloat();
    }

    /**
     * Get big float value 3.402823e+20.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Double> object
     */
    public Maybe<Double> getBigFloatAsync() {
        return getBigFloatWithRestResponseAsync()
            .flatMapMaybe(new Function<RestResponse<Void, Double>, Maybe<Double>>() {
                public Maybe<Double> apply(RestResponse<Void, Double> restResponse) {
                    if (restResponse.body() == null) {
                        return Maybe.empty();
                    } else {
                        return Maybe.just(restResponse.body());
                    }
                }
            });
        }


    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the void object if successful.
     */
    public void putBigDouble(double numberBody) {
        putBigDoubleAsync(numberBody).blockingAwait();
    }

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putBigDoubleAsync(double numberBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBigDoubleAsync(numberBody), serviceCallback);
    }

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Void> object
     */
    public Single<RestResponse<Void, Void>> putBigDoubleWithRestResponseAsync(double numberBody) {
        return service.putBigDouble(numberBody);
    }

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Void> object
     */
    public Completable putBigDoubleAsync(double numberBody) {
        return putBigDoubleWithRestResponseAsync(numberBody)
            .toCompletable();
        }


    /**
     * Get big double value 2.5976931e+101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    public double getBigDouble() {
        return getBigDoubleAsync().blockingGet();
    }

    /**
     * Get big double value 2.5976931e+101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Double> getBigDoubleAsync(ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getBigDoubleAsync(), serviceCallback);
    }

    /**
     * Get big double value 2.5976931e+101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Double> object
     */
    public Single<RestResponse<Void, Double>> getBigDoubleWithRestResponseAsync() {
        return service.getBigDouble();
    }

    /**
     * Get big double value 2.5976931e+101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Double> object
     */
    public Maybe<Double> getBigDoubleAsync() {
        return getBigDoubleWithRestResponseAsync()
            .flatMapMaybe(new Function<RestResponse<Void, Double>, Maybe<Double>>() {
                public Maybe<Double> apply(RestResponse<Void, Double> restResponse) {
                    if (restResponse.body() == null) {
                        return Maybe.empty();
                    } else {
                        return Maybe.just(restResponse.body());
                    }
                }
            });
        }


    /**
     * Put big double value 99999999.99.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the void object if successful.
     */
    public void putBigDoublePositiveDecimal(double numberBody) {
        putBigDoublePositiveDecimalAsync(numberBody).blockingAwait();
    }

    /**
     * Put big double value 99999999.99.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putBigDoublePositiveDecimalAsync(double numberBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBigDoublePositiveDecimalAsync(numberBody), serviceCallback);
    }

    /**
     * Put big double value 99999999.99.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Void> object
     */
    public Single<RestResponse<Void, Void>> putBigDoublePositiveDecimalWithRestResponseAsync(double numberBody) {
        return service.putBigDoublePositiveDecimal(numberBody);
    }

    /**
     * Put big double value 99999999.99.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Void> object
     */
    public Completable putBigDoublePositiveDecimalAsync(double numberBody) {
        return putBigDoublePositiveDecimalWithRestResponseAsync(numberBody)
            .toCompletable();
        }


    /**
     * Get big double value 99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    public double getBigDoublePositiveDecimal() {
        return getBigDoublePositiveDecimalAsync().blockingGet();
    }

    /**
     * Get big double value 99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Double> getBigDoublePositiveDecimalAsync(ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getBigDoublePositiveDecimalAsync(), serviceCallback);
    }

    /**
     * Get big double value 99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Double> object
     */
    public Single<RestResponse<Void, Double>> getBigDoublePositiveDecimalWithRestResponseAsync() {
        return service.getBigDoublePositiveDecimal();
    }

    /**
     * Get big double value 99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Double> object
     */
    public Maybe<Double> getBigDoublePositiveDecimalAsync() {
        return getBigDoublePositiveDecimalWithRestResponseAsync()
            .flatMapMaybe(new Function<RestResponse<Void, Double>, Maybe<Double>>() {
                public Maybe<Double> apply(RestResponse<Void, Double> restResponse) {
                    if (restResponse.body() == null) {
                        return Maybe.empty();
                    } else {
                        return Maybe.just(restResponse.body());
                    }
                }
            });
        }


    /**
     * Put big double value -99999999.99.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the void object if successful.
     */
    public void putBigDoubleNegativeDecimal(double numberBody) {
        putBigDoubleNegativeDecimalAsync(numberBody).blockingAwait();
    }

    /**
     * Put big double value -99999999.99.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putBigDoubleNegativeDecimalAsync(double numberBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBigDoubleNegativeDecimalAsync(numberBody), serviceCallback);
    }

    /**
     * Put big double value -99999999.99.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Void> object
     */
    public Single<RestResponse<Void, Void>> putBigDoubleNegativeDecimalWithRestResponseAsync(double numberBody) {
        return service.putBigDoubleNegativeDecimal(numberBody);
    }

    /**
     * Put big double value -99999999.99.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Void> object
     */
    public Completable putBigDoubleNegativeDecimalAsync(double numberBody) {
        return putBigDoubleNegativeDecimalWithRestResponseAsync(numberBody)
            .toCompletable();
        }


    /**
     * Get big double value -99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    public double getBigDoubleNegativeDecimal() {
        return getBigDoubleNegativeDecimalAsync().blockingGet();
    }

    /**
     * Get big double value -99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Double> getBigDoubleNegativeDecimalAsync(ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getBigDoubleNegativeDecimalAsync(), serviceCallback);
    }

    /**
     * Get big double value -99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Double> object
     */
    public Single<RestResponse<Void, Double>> getBigDoubleNegativeDecimalWithRestResponseAsync() {
        return service.getBigDoubleNegativeDecimal();
    }

    /**
     * Get big double value -99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Double> object
     */
    public Maybe<Double> getBigDoubleNegativeDecimalAsync() {
        return getBigDoubleNegativeDecimalWithRestResponseAsync()
            .flatMapMaybe(new Function<RestResponse<Void, Double>, Maybe<Double>>() {
                public Maybe<Double> apply(RestResponse<Void, Double> restResponse) {
                    if (restResponse.body() == null) {
                        return Maybe.empty();
                    } else {
                        return Maybe.just(restResponse.body());
                    }
                }
            });
        }


    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the void object if successful.
     */
    public void putBigDecimal(BigDecimal numberBody) {
        putBigDecimalAsync(numberBody).blockingAwait();
    }

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putBigDecimalAsync(BigDecimal numberBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBigDecimalAsync(numberBody), serviceCallback);
    }

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Void> object
     */
    public Single<RestResponse<Void, Void>> putBigDecimalWithRestResponseAsync(BigDecimal numberBody) {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        return service.putBigDecimal(numberBody);
    }

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Void> object
     */
    public Completable putBigDecimalAsync(BigDecimal numberBody) {
        return putBigDecimalWithRestResponseAsync(numberBody)
            .toCompletable();
        }


    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BigDecimal object if successful.
     */
    public BigDecimal getBigDecimal() {
        return getBigDecimalAsync().blockingGet();
    }

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BigDecimal> getBigDecimalAsync(ServiceCallback<BigDecimal> serviceCallback) {
        return ServiceFuture.fromBody(getBigDecimalAsync(), serviceCallback);
    }

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, BigDecimal> object
     */
    public Single<RestResponse<Void, BigDecimal>> getBigDecimalWithRestResponseAsync() {
        return service.getBigDecimal();
    }

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, BigDecimal> object
     */
    public Maybe<BigDecimal> getBigDecimalAsync() {
        return getBigDecimalWithRestResponseAsync()
            .flatMapMaybe(new Function<RestResponse<Void, BigDecimal>, Maybe<BigDecimal>>() {
                public Maybe<BigDecimal> apply(RestResponse<Void, BigDecimal> restResponse) {
                    if (restResponse.body() == null) {
                        return Maybe.empty();
                    } else {
                        return Maybe.just(restResponse.body());
                    }
                }
            });
        }


    /**
     * Put big decimal value 99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the void object if successful.
     */
    public void putBigDecimalPositiveDecimal(BigDecimal numberBody) {
        putBigDecimalPositiveDecimalAsync(numberBody).blockingAwait();
    }

    /**
     * Put big decimal value 99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putBigDecimalPositiveDecimalAsync(BigDecimal numberBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBigDecimalPositiveDecimalAsync(numberBody), serviceCallback);
    }

    /**
     * Put big decimal value 99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Void> object
     */
    public Single<RestResponse<Void, Void>> putBigDecimalPositiveDecimalWithRestResponseAsync(BigDecimal numberBody) {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        return service.putBigDecimalPositiveDecimal(numberBody);
    }

    /**
     * Put big decimal value 99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Void> object
     */
    public Completable putBigDecimalPositiveDecimalAsync(BigDecimal numberBody) {
        return putBigDecimalPositiveDecimalWithRestResponseAsync(numberBody)
            .toCompletable();
        }


    /**
     * Get big decimal value 99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BigDecimal object if successful.
     */
    public BigDecimal getBigDecimalPositiveDecimal() {
        return getBigDecimalPositiveDecimalAsync().blockingGet();
    }

    /**
     * Get big decimal value 99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BigDecimal> getBigDecimalPositiveDecimalAsync(ServiceCallback<BigDecimal> serviceCallback) {
        return ServiceFuture.fromBody(getBigDecimalPositiveDecimalAsync(), serviceCallback);
    }

    /**
     * Get big decimal value 99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, BigDecimal> object
     */
    public Single<RestResponse<Void, BigDecimal>> getBigDecimalPositiveDecimalWithRestResponseAsync() {
        return service.getBigDecimalPositiveDecimal();
    }

    /**
     * Get big decimal value 99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, BigDecimal> object
     */
    public Maybe<BigDecimal> getBigDecimalPositiveDecimalAsync() {
        return getBigDecimalPositiveDecimalWithRestResponseAsync()
            .flatMapMaybe(new Function<RestResponse<Void, BigDecimal>, Maybe<BigDecimal>>() {
                public Maybe<BigDecimal> apply(RestResponse<Void, BigDecimal> restResponse) {
                    if (restResponse.body() == null) {
                        return Maybe.empty();
                    } else {
                        return Maybe.just(restResponse.body());
                    }
                }
            });
        }


    /**
     * Put big decimal value -99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the void object if successful.
     */
    public void putBigDecimalNegativeDecimal(BigDecimal numberBody) {
        putBigDecimalNegativeDecimalAsync(numberBody).blockingAwait();
    }

    /**
     * Put big decimal value -99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putBigDecimalNegativeDecimalAsync(BigDecimal numberBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBigDecimalNegativeDecimalAsync(numberBody), serviceCallback);
    }

    /**
     * Put big decimal value -99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Void> object
     */
    public Single<RestResponse<Void, Void>> putBigDecimalNegativeDecimalWithRestResponseAsync(BigDecimal numberBody) {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        return service.putBigDecimalNegativeDecimal(numberBody);
    }

    /**
     * Put big decimal value -99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Void> object
     */
    public Completable putBigDecimalNegativeDecimalAsync(BigDecimal numberBody) {
        return putBigDecimalNegativeDecimalWithRestResponseAsync(numberBody)
            .toCompletable();
        }


    /**
     * Get big decimal value -99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BigDecimal object if successful.
     */
    public BigDecimal getBigDecimalNegativeDecimal() {
        return getBigDecimalNegativeDecimalAsync().blockingGet();
    }

    /**
     * Get big decimal value -99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BigDecimal> getBigDecimalNegativeDecimalAsync(ServiceCallback<BigDecimal> serviceCallback) {
        return ServiceFuture.fromBody(getBigDecimalNegativeDecimalAsync(), serviceCallback);
    }

    /**
     * Get big decimal value -99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, BigDecimal> object
     */
    public Single<RestResponse<Void, BigDecimal>> getBigDecimalNegativeDecimalWithRestResponseAsync() {
        return service.getBigDecimalNegativeDecimal();
    }

    /**
     * Get big decimal value -99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, BigDecimal> object
     */
    public Maybe<BigDecimal> getBigDecimalNegativeDecimalAsync() {
        return getBigDecimalNegativeDecimalWithRestResponseAsync()
            .flatMapMaybe(new Function<RestResponse<Void, BigDecimal>, Maybe<BigDecimal>>() {
                public Maybe<BigDecimal> apply(RestResponse<Void, BigDecimal> restResponse) {
                    if (restResponse.body() == null) {
                        return Maybe.empty();
                    } else {
                        return Maybe.just(restResponse.body());
                    }
                }
            });
        }


    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the void object if successful.
     */
    public void putSmallFloat(double numberBody) {
        putSmallFloatAsync(numberBody).blockingAwait();
    }

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putSmallFloatAsync(double numberBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putSmallFloatAsync(numberBody), serviceCallback);
    }

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Void> object
     */
    public Single<RestResponse<Void, Void>> putSmallFloatWithRestResponseAsync(double numberBody) {
        return service.putSmallFloat(numberBody);
    }

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Void> object
     */
    public Completable putSmallFloatAsync(double numberBody) {
        return putSmallFloatWithRestResponseAsync(numberBody)
            .toCompletable();
        }


    /**
     * Get big double value 3.402823e-20.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    public double getSmallFloat() {
        return getSmallFloatAsync().blockingGet();
    }

    /**
     * Get big double value 3.402823e-20.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Double> getSmallFloatAsync(ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getSmallFloatAsync(), serviceCallback);
    }

    /**
     * Get big double value 3.402823e-20.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Double> object
     */
    public Single<RestResponse<Void, Double>> getSmallFloatWithRestResponseAsync() {
        return service.getSmallFloat();
    }

    /**
     * Get big double value 3.402823e-20.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Double> object
     */
    public Maybe<Double> getSmallFloatAsync() {
        return getSmallFloatWithRestResponseAsync()
            .flatMapMaybe(new Function<RestResponse<Void, Double>, Maybe<Double>>() {
                public Maybe<Double> apply(RestResponse<Void, Double> restResponse) {
                    if (restResponse.body() == null) {
                        return Maybe.empty();
                    } else {
                        return Maybe.just(restResponse.body());
                    }
                }
            });
        }


    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the void object if successful.
     */
    public void putSmallDouble(double numberBody) {
        putSmallDoubleAsync(numberBody).blockingAwait();
    }

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putSmallDoubleAsync(double numberBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putSmallDoubleAsync(numberBody), serviceCallback);
    }

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Void> object
     */
    public Single<RestResponse<Void, Void>> putSmallDoubleWithRestResponseAsync(double numberBody) {
        return service.putSmallDouble(numberBody);
    }

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Void> object
     */
    public Completable putSmallDoubleAsync(double numberBody) {
        return putSmallDoubleWithRestResponseAsync(numberBody)
            .toCompletable();
        }


    /**
     * Get big double value 2.5976931e-101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    public double getSmallDouble() {
        return getSmallDoubleAsync().blockingGet();
    }

    /**
     * Get big double value 2.5976931e-101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Double> getSmallDoubleAsync(ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getSmallDoubleAsync(), serviceCallback);
    }

    /**
     * Get big double value 2.5976931e-101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Double> object
     */
    public Single<RestResponse<Void, Double>> getSmallDoubleWithRestResponseAsync() {
        return service.getSmallDouble();
    }

    /**
     * Get big double value 2.5976931e-101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Double> object
     */
    public Maybe<Double> getSmallDoubleAsync() {
        return getSmallDoubleWithRestResponseAsync()
            .flatMapMaybe(new Function<RestResponse<Void, Double>, Maybe<Double>>() {
                public Maybe<Double> apply(RestResponse<Void, Double> restResponse) {
                    if (restResponse.body() == null) {
                        return Maybe.empty();
                    } else {
                        return Maybe.just(restResponse.body());
                    }
                }
            });
        }


    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the void object if successful.
     */
    public void putSmallDecimal(BigDecimal numberBody) {
        putSmallDecimalAsync(numberBody).blockingAwait();
    }

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putSmallDecimalAsync(BigDecimal numberBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putSmallDecimalAsync(numberBody), serviceCallback);
    }

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Void> object
     */
    public Single<RestResponse<Void, Void>> putSmallDecimalWithRestResponseAsync(BigDecimal numberBody) {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        return service.putSmallDecimal(numberBody);
    }

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, Void> object
     */
    public Completable putSmallDecimalAsync(BigDecimal numberBody) {
        return putSmallDecimalWithRestResponseAsync(numberBody)
            .toCompletable();
        }


    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BigDecimal object if successful.
     */
    public BigDecimal getSmallDecimal() {
        return getSmallDecimalAsync().blockingGet();
    }

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BigDecimal> getSmallDecimalAsync(ServiceCallback<BigDecimal> serviceCallback) {
        return ServiceFuture.fromBody(getSmallDecimalAsync(), serviceCallback);
    }

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, BigDecimal> object
     */
    public Single<RestResponse<Void, BigDecimal>> getSmallDecimalWithRestResponseAsync() {
        return service.getSmallDecimal();
    }

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return a {@link Single} emitting the RestResponse<Void, BigDecimal> object
     */
    public Maybe<BigDecimal> getSmallDecimalAsync() {
        return getSmallDecimalWithRestResponseAsync()
            .flatMapMaybe(new Function<RestResponse<Void, BigDecimal>, Maybe<BigDecimal>>() {
                public Maybe<BigDecimal> apply(RestResponse<Void, BigDecimal> restResponse) {
                    if (restResponse.body() == null) {
                        return Maybe.empty();
                    } else {
                        return Maybe.just(restResponse.body());
                    }
                }
            });
        }


}
