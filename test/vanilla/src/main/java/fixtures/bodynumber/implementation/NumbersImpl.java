/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodynumber.implementation;

import com.microsoft.rest.RestProxy;
import fixtures.bodynumber.Numbers;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.annotations.BodyParam;
import com.microsoft.rest.annotations.ExpectedResponses;
import com.microsoft.rest.annotations.GET;
import com.microsoft.rest.annotations.Headers;
import com.microsoft.rest.annotations.Host;
import com.microsoft.rest.annotations.PUT;
import com.microsoft.rest.annotations.UnexpectedResponseExceptionType;
import com.microsoft.rest.http.HttpClient;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import fixtures.bodynumber.models.ErrorException;
import java.io.IOException;
import java.math.BigDecimal;
import rx.functions.Func1;
import rx.Observable;
import rx.Single;

/**
 * An instance of this class provides access to all the operations defined
 * in Numbers.
 */
public class NumbersImpl implements Numbers {
    /** The RestProxy service to perform REST calls. */
    private NumbersService service;
    /** The service client containing this operation class. */
    private AutoRestNumberTestServiceImpl client;

    /**
     * Initializes an instance of Numbers.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public NumbersImpl(AutoRestNumberTestServiceImpl client) {
        this.service = RestProxy.create(NumbersService.class, client.restClient().baseURL(), client.httpClient(), client.serializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for Numbers to be
     * used by RestProxy to perform REST calls.
    */
    @Host("https://localhost")
    interface NumbersService {
        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getNull" })
        @GET("number/null")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Double> getNull();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getInvalidFloat" })
        @GET("number/invalidfloat")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Double> getInvalidFloat();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getInvalidDouble" })
        @GET("number/invaliddouble")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Double> getInvalidDouble();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getInvalidDecimal" })
        @GET("number/invaliddecimal")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BigDecimal> getInvalidDecimal();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers putBigFloat" })
        @PUT("number/big/float/3.402823e+20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putBigFloat(@BodyParam("application/json; charset=utf-8") double numberBody);

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getBigFloat" })
        @GET("number/big/float/3.402823e+20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Double> getBigFloat();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers putBigDouble" })
        @PUT("number/big/double/2.5976931e+101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putBigDouble(@BodyParam("application/json; charset=utf-8") double numberBody);

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getBigDouble" })
        @GET("number/big/double/2.5976931e+101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Double> getBigDouble();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers putBigDoublePositiveDecimal" })
        @PUT("number/big/double/99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putBigDoublePositiveDecimal(@BodyParam("application/json; charset=utf-8") double numberBody);

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getBigDoublePositiveDecimal" })
        @GET("number/big/double/99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Double> getBigDoublePositiveDecimal();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers putBigDoubleNegativeDecimal" })
        @PUT("number/big/double/-99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putBigDoubleNegativeDecimal(@BodyParam("application/json; charset=utf-8") double numberBody);

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getBigDoubleNegativeDecimal" })
        @GET("number/big/double/-99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Double> getBigDoubleNegativeDecimal();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers putBigDecimal" })
        @PUT("number/big/decimal/2.5976931e+101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putBigDecimal(@BodyParam("application/json; charset=utf-8") BigDecimal numberBody);

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getBigDecimal" })
        @GET("number/big/decimal/2.5976931e+101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BigDecimal> getBigDecimal();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers putBigDecimalPositiveDecimal" })
        @PUT("number/big/decimal/99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putBigDecimalPositiveDecimal(@BodyParam("application/json; charset=utf-8") BigDecimal numberBody);

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getBigDecimalPositiveDecimal" })
        @GET("number/big/decimal/99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BigDecimal> getBigDecimalPositiveDecimal();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers putBigDecimalNegativeDecimal" })
        @PUT("number/big/decimal/-99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putBigDecimalNegativeDecimal(@BodyParam("application/json; charset=utf-8") BigDecimal numberBody);

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getBigDecimalNegativeDecimal" })
        @GET("number/big/decimal/-99999999.99")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BigDecimal> getBigDecimalNegativeDecimal();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers putSmallFloat" })
        @PUT("number/small/float/3.402823e-20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putSmallFloat(@BodyParam("application/json; charset=utf-8") double numberBody);

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getSmallFloat" })
        @GET("number/small/float/3.402823e-20")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Double> getSmallFloat();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers putSmallDouble" })
        @PUT("number/small/double/2.5976931e-101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putSmallDouble(@BodyParam("application/json; charset=utf-8") double numberBody);

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getSmallDouble" })
        @GET("number/small/double/2.5976931e-101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Double> getSmallDouble();

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers putSmallDecimal" })
        @PUT("number/small/decimal/2.5976931e-101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> putSmallDecimal(@BodyParam("application/json; charset=utf-8") BigDecimal numberBody);

        @Headers({ "x-ms-logging-context: fixtures.bodynumber.Numbers getSmallDecimal" })
        @GET("number/small/decimal/2.5976931e-101")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<BigDecimal> getSmallDecimal();

    }

    /**
     * Get null Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    public double getNull() {
        return getNullAsync().toBlocking().value();
    }

    /**
     * Get null Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Double> getNullAsync(final ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getNullAsync(), serviceCallback);
    }

    /**
     * Get null Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Double object
     */
    public Single<Double> getNullAsync() {
        return service.getNull();
    }


    /**
     * Get invalid float Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    public double getInvalidFloat() {
        return getInvalidFloatAsync().toBlocking().value();
    }

    /**
     * Get invalid float Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Double> getInvalidFloatAsync(final ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getInvalidFloatAsync(), serviceCallback);
    }

    /**
     * Get invalid float Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Double object
     */
    public Single<Double> getInvalidFloatAsync() {
        return service.getInvalidFloat();
    }


    /**
     * Get invalid double Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    public double getInvalidDouble() {
        return getInvalidDoubleAsync().toBlocking().value();
    }

    /**
     * Get invalid double Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Double> getInvalidDoubleAsync(final ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getInvalidDoubleAsync(), serviceCallback);
    }

    /**
     * Get invalid double Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Double object
     */
    public Single<Double> getInvalidDoubleAsync() {
        return service.getInvalidDouble();
    }


    /**
     * Get invalid decimal Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BigDecimal object if successful.
     */
    public BigDecimal getInvalidDecimal() {
        return getInvalidDecimalAsync().toBlocking().value();
    }

    /**
     * Get invalid decimal Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BigDecimal> getInvalidDecimalAsync(final ServiceCallback<BigDecimal> serviceCallback) {
        return ServiceFuture.fromBody(getInvalidDecimalAsync(), serviceCallback);
    }

    /**
     * Get invalid decimal Number value.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDecimal object
     */
    public Single<BigDecimal> getInvalidDecimalAsync() {
        return service.getInvalidDecimal();
    }


    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putBigFloat(double numberBody) {
        putBigFloatAsync(numberBody).toBlocking().value();
    }

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putBigFloatAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBigFloatAsync(numberBody), serviceCallback);
    }

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putBigFloatAsync(double numberBody) {
        return service.putBigFloat(numberBody);
    }


    /**
     * Get big float value 3.402823e+20.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    public double getBigFloat() {
        return getBigFloatAsync().toBlocking().value();
    }

    /**
     * Get big float value 3.402823e+20.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Double> getBigFloatAsync(final ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getBigFloatAsync(), serviceCallback);
    }

    /**
     * Get big float value 3.402823e+20.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Double object
     */
    public Single<Double> getBigFloatAsync() {
        return service.getBigFloat();
    }


    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putBigDouble(double numberBody) {
        putBigDoubleAsync(numberBody).toBlocking().value();
    }

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putBigDoubleAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBigDoubleAsync(numberBody), serviceCallback);
    }

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putBigDoubleAsync(double numberBody) {
        return service.putBigDouble(numberBody);
    }


    /**
     * Get big double value 2.5976931e+101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    public double getBigDouble() {
        return getBigDoubleAsync().toBlocking().value();
    }

    /**
     * Get big double value 2.5976931e+101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Double> getBigDoubleAsync(final ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getBigDoubleAsync(), serviceCallback);
    }

    /**
     * Get big double value 2.5976931e+101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Double object
     */
    public Single<Double> getBigDoubleAsync() {
        return service.getBigDouble();
    }


    /**
     * Put big double value 99999999.99.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putBigDoublePositiveDecimal(double numberBody) {
        putBigDoublePositiveDecimalAsync(numberBody).toBlocking().value();
    }

    /**
     * Put big double value 99999999.99.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putBigDoublePositiveDecimalAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBigDoublePositiveDecimalAsync(numberBody), serviceCallback);
    }

    /**
     * Put big double value 99999999.99.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putBigDoublePositiveDecimalAsync(double numberBody) {
        return service.putBigDoublePositiveDecimal(numberBody);
    }


    /**
     * Get big double value 99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    public double getBigDoublePositiveDecimal() {
        return getBigDoublePositiveDecimalAsync().toBlocking().value();
    }

    /**
     * Get big double value 99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Double> getBigDoublePositiveDecimalAsync(final ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getBigDoublePositiveDecimalAsync(), serviceCallback);
    }

    /**
     * Get big double value 99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Double object
     */
    public Single<Double> getBigDoublePositiveDecimalAsync() {
        return service.getBigDoublePositiveDecimal();
    }


    /**
     * Put big double value -99999999.99.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putBigDoubleNegativeDecimal(double numberBody) {
        putBigDoubleNegativeDecimalAsync(numberBody).toBlocking().value();
    }

    /**
     * Put big double value -99999999.99.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putBigDoubleNegativeDecimalAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBigDoubleNegativeDecimalAsync(numberBody), serviceCallback);
    }

    /**
     * Put big double value -99999999.99.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putBigDoubleNegativeDecimalAsync(double numberBody) {
        return service.putBigDoubleNegativeDecimal(numberBody);
    }


    /**
     * Get big double value -99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    public double getBigDoubleNegativeDecimal() {
        return getBigDoubleNegativeDecimalAsync().toBlocking().value();
    }

    /**
     * Get big double value -99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Double> getBigDoubleNegativeDecimalAsync(final ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getBigDoubleNegativeDecimalAsync(), serviceCallback);
    }

    /**
     * Get big double value -99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Double object
     */
    public Single<Double> getBigDoubleNegativeDecimalAsync() {
        return service.getBigDoubleNegativeDecimal();
    }


    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putBigDecimal(BigDecimal numberBody) {
        putBigDecimalAsync(numberBody).toBlocking().value();
    }

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putBigDecimalAsync(BigDecimal numberBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBigDecimalAsync(numberBody), serviceCallback);
    }

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putBigDecimalAsync(BigDecimal numberBody) {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        return service.putBigDecimal(numberBody);
    }


    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BigDecimal object if successful.
     */
    public BigDecimal getBigDecimal() {
        return getBigDecimalAsync().toBlocking().value();
    }

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BigDecimal> getBigDecimalAsync(final ServiceCallback<BigDecimal> serviceCallback) {
        return ServiceFuture.fromBody(getBigDecimalAsync(), serviceCallback);
    }

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDecimal object
     */
    public Single<BigDecimal> getBigDecimalAsync() {
        return service.getBigDecimal();
    }


    /**
     * Put big decimal value 99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putBigDecimalPositiveDecimal(BigDecimal numberBody) {
        putBigDecimalPositiveDecimalAsync(numberBody).toBlocking().value();
    }

    /**
     * Put big decimal value 99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putBigDecimalPositiveDecimalAsync(BigDecimal numberBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBigDecimalPositiveDecimalAsync(numberBody), serviceCallback);
    }

    /**
     * Put big decimal value 99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putBigDecimalPositiveDecimalAsync(BigDecimal numberBody) {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        return service.putBigDecimalPositiveDecimal(numberBody);
    }


    /**
     * Get big decimal value 99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BigDecimal object if successful.
     */
    public BigDecimal getBigDecimalPositiveDecimal() {
        return getBigDecimalPositiveDecimalAsync().toBlocking().value();
    }

    /**
     * Get big decimal value 99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BigDecimal> getBigDecimalPositiveDecimalAsync(final ServiceCallback<BigDecimal> serviceCallback) {
        return ServiceFuture.fromBody(getBigDecimalPositiveDecimalAsync(), serviceCallback);
    }

    /**
     * Get big decimal value 99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDecimal object
     */
    public Single<BigDecimal> getBigDecimalPositiveDecimalAsync() {
        return service.getBigDecimalPositiveDecimal();
    }


    /**
     * Put big decimal value -99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putBigDecimalNegativeDecimal(BigDecimal numberBody) {
        putBigDecimalNegativeDecimalAsync(numberBody).toBlocking().value();
    }

    /**
     * Put big decimal value -99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putBigDecimalNegativeDecimalAsync(BigDecimal numberBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putBigDecimalNegativeDecimalAsync(numberBody), serviceCallback);
    }

    /**
     * Put big decimal value -99999999.99.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putBigDecimalNegativeDecimalAsync(BigDecimal numberBody) {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        return service.putBigDecimalNegativeDecimal(numberBody);
    }


    /**
     * Get big decimal value -99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BigDecimal object if successful.
     */
    public BigDecimal getBigDecimalNegativeDecimal() {
        return getBigDecimalNegativeDecimalAsync().toBlocking().value();
    }

    /**
     * Get big decimal value -99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BigDecimal> getBigDecimalNegativeDecimalAsync(final ServiceCallback<BigDecimal> serviceCallback) {
        return ServiceFuture.fromBody(getBigDecimalNegativeDecimalAsync(), serviceCallback);
    }

    /**
     * Get big decimal value -99999999.99.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDecimal object
     */
    public Single<BigDecimal> getBigDecimalNegativeDecimalAsync() {
        return service.getBigDecimalNegativeDecimal();
    }


    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putSmallFloat(double numberBody) {
        putSmallFloatAsync(numberBody).toBlocking().value();
    }

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putSmallFloatAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putSmallFloatAsync(numberBody), serviceCallback);
    }

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putSmallFloatAsync(double numberBody) {
        return service.putSmallFloat(numberBody);
    }


    /**
     * Get big double value 3.402823e-20.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    public double getSmallFloat() {
        return getSmallFloatAsync().toBlocking().value();
    }

    /**
     * Get big double value 3.402823e-20.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Double> getSmallFloatAsync(final ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getSmallFloatAsync(), serviceCallback);
    }

    /**
     * Get big double value 3.402823e-20.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Double object
     */
    public Single<Double> getSmallFloatAsync() {
        return service.getSmallFloat();
    }


    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putSmallDouble(double numberBody) {
        putSmallDoubleAsync(numberBody).toBlocking().value();
    }

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putSmallDoubleAsync(double numberBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putSmallDoubleAsync(numberBody), serviceCallback);
    }

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putSmallDoubleAsync(double numberBody) {
        return service.putSmallDouble(numberBody);
    }


    /**
     * Get big double value 2.5976931e-101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the double object if successful.
     */
    public double getSmallDouble() {
        return getSmallDoubleAsync().toBlocking().value();
    }

    /**
     * Get big double value 2.5976931e-101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Double> getSmallDoubleAsync(final ServiceCallback<Double> serviceCallback) {
        return ServiceFuture.fromBody(getSmallDoubleAsync(), serviceCallback);
    }

    /**
     * Get big double value 2.5976931e-101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Double object
     */
    public Single<Double> getSmallDoubleAsync() {
        return service.getSmallDouble();
    }


    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void putSmallDecimal(BigDecimal numberBody) {
        putSmallDecimalAsync(numberBody).toBlocking().value();
    }

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> putSmallDecimalAsync(BigDecimal numberBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putSmallDecimalAsync(numberBody), serviceCallback);
    }

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> putSmallDecimalAsync(BigDecimal numberBody) {
        if (numberBody == null) {
            throw new IllegalArgumentException("Parameter numberBody is required and cannot be null.");
        }
        return service.putSmallDecimal(numberBody);
    }


    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BigDecimal object if successful.
     */
    public BigDecimal getSmallDecimal() {
        return getSmallDecimalAsync().toBlocking().value();
    }

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BigDecimal> getSmallDecimalAsync(final ServiceCallback<BigDecimal> serviceCallback) {
        return ServiceFuture.fromBody(getSmallDecimalAsync(), serviceCallback);
    }

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BigDecimal object
     */
    public Single<BigDecimal> getSmallDecimalAsync() {
        return service.getSmallDecimal();
    }


}
