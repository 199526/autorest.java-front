/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodynumber;

import com.microsoft.rest.v2.RestResponse;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import io.reactivex.Completable;
import io.reactivex.Maybe;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;
import java.math.BigDecimal;

/**
 * An instance of this class provides access to all the operations defined in
 * Numbers.
 */
public interface Numbers {
    /**
     * Get null Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    double getNull();

    /**
     * Get null Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Double&gt;} object.
     */
    ServiceFuture<Double> getNullAsync(ServiceCallback<Double> serviceCallback);

    /**
     * Get null Number value.
     *
     * @return the {@link Single&lt;RestResponse&lt;Void, Double&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Double>> getNullWithRestResponseAsync();

    /**
     * Get null Number value.
     *
     * @return the {@link Maybe&lt;Double&gt;} object if successful.
     */
    Maybe<Double> getNullAsync();

    /**
     * Get invalid float Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    double getInvalidFloat();

    /**
     * Get invalid float Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Double&gt;} object.
     */
    ServiceFuture<Double> getInvalidFloatAsync(ServiceCallback<Double> serviceCallback);

    /**
     * Get invalid float Number value.
     *
     * @return the {@link Single&lt;RestResponse&lt;Void, Double&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Double>> getInvalidFloatWithRestResponseAsync();

    /**
     * Get invalid float Number value.
     *
     * @return the {@link Maybe&lt;Double&gt;} object if successful.
     */
    Maybe<Double> getInvalidFloatAsync();

    /**
     * Get invalid double Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    double getInvalidDouble();

    /**
     * Get invalid double Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Double&gt;} object.
     */
    ServiceFuture<Double> getInvalidDoubleAsync(ServiceCallback<Double> serviceCallback);

    /**
     * Get invalid double Number value.
     *
     * @return the {@link Single&lt;RestResponse&lt;Void, Double&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Double>> getInvalidDoubleWithRestResponseAsync();

    /**
     * Get invalid double Number value.
     *
     * @return the {@link Maybe&lt;Double&gt;} object if successful.
     */
    Maybe<Double> getInvalidDoubleAsync();

    /**
     * Get invalid decimal Number value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BigDecimal object if successful.
     */
    BigDecimal getInvalidDecimal();

    /**
     * Get invalid decimal Number value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;BigDecimal&gt;} object.
     */
    ServiceFuture<BigDecimal> getInvalidDecimalAsync(ServiceCallback<BigDecimal> serviceCallback);

    /**
     * Get invalid decimal Number value.
     *
     * @return the {@link Single&lt;RestResponse&lt;Void, BigDecimal&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, BigDecimal>> getInvalidDecimalWithRestResponseAsync();

    /**
     * Get invalid decimal Number value.
     *
     * @return the {@link Maybe&lt;BigDecimal&gt;} object if successful.
     */
    Maybe<BigDecimal> getInvalidDecimalAsync();

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void putBigFloat(@NonNull double numberBody);

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Void&gt;} object.
     */
    ServiceFuture<Void> putBigFloatAsync(@NonNull double numberBody, ServiceCallback<Void> serviceCallback);

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;RestResponse&lt;Void, Void&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Void>> putBigFloatWithRestResponseAsync(@NonNull double numberBody);

    /**
     * Put big float value 3.402823e+20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Completable} object if successful.
     */
    Completable putBigFloatAsync(@NonNull double numberBody);

    /**
     * Get big float value 3.402823e+20.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    double getBigFloat();

    /**
     * Get big float value 3.402823e+20.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Double&gt;} object.
     */
    ServiceFuture<Double> getBigFloatAsync(ServiceCallback<Double> serviceCallback);

    /**
     * Get big float value 3.402823e+20.
     *
     * @return the {@link Single&lt;RestResponse&lt;Void, Double&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Double>> getBigFloatWithRestResponseAsync();

    /**
     * Get big float value 3.402823e+20.
     *
     * @return the {@link Maybe&lt;Double&gt;} object if successful.
     */
    Maybe<Double> getBigFloatAsync();

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void putBigDouble(@NonNull double numberBody);

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Void&gt;} object.
     */
    ServiceFuture<Void> putBigDoubleAsync(@NonNull double numberBody, ServiceCallback<Void> serviceCallback);

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;RestResponse&lt;Void, Void&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Void>> putBigDoubleWithRestResponseAsync(@NonNull double numberBody);

    /**
     * Put big double value 2.5976931e+101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Completable} object if successful.
     */
    Completable putBigDoubleAsync(@NonNull double numberBody);

    /**
     * Get big double value 2.5976931e+101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    double getBigDouble();

    /**
     * Get big double value 2.5976931e+101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Double&gt;} object.
     */
    ServiceFuture<Double> getBigDoubleAsync(ServiceCallback<Double> serviceCallback);

    /**
     * Get big double value 2.5976931e+101.
     *
     * @return the {@link Single&lt;RestResponse&lt;Void, Double&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Double>> getBigDoubleWithRestResponseAsync();

    /**
     * Get big double value 2.5976931e+101.
     *
     * @return the {@link Maybe&lt;Double&gt;} object if successful.
     */
    Maybe<Double> getBigDoubleAsync();

    /**
     * Put big double value 99999999.99.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void putBigDoublePositiveDecimal(@NonNull double numberBody);

    /**
     * Put big double value 99999999.99.
     *
     * @param numberBody the double value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Void&gt;} object.
     */
    ServiceFuture<Void> putBigDoublePositiveDecimalAsync(@NonNull double numberBody, ServiceCallback<Void> serviceCallback);

    /**
     * Put big double value 99999999.99.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;RestResponse&lt;Void, Void&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Void>> putBigDoublePositiveDecimalWithRestResponseAsync(@NonNull double numberBody);

    /**
     * Put big double value 99999999.99.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Completable} object if successful.
     */
    Completable putBigDoublePositiveDecimalAsync(@NonNull double numberBody);

    /**
     * Get big double value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    double getBigDoublePositiveDecimal();

    /**
     * Get big double value 99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Double&gt;} object.
     */
    ServiceFuture<Double> getBigDoublePositiveDecimalAsync(ServiceCallback<Double> serviceCallback);

    /**
     * Get big double value 99999999.99.
     *
     * @return the {@link Single&lt;RestResponse&lt;Void, Double&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Double>> getBigDoublePositiveDecimalWithRestResponseAsync();

    /**
     * Get big double value 99999999.99.
     *
     * @return the {@link Maybe&lt;Double&gt;} object if successful.
     */
    Maybe<Double> getBigDoublePositiveDecimalAsync();

    /**
     * Put big double value -99999999.99.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void putBigDoubleNegativeDecimal(@NonNull double numberBody);

    /**
     * Put big double value -99999999.99.
     *
     * @param numberBody the double value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Void&gt;} object.
     */
    ServiceFuture<Void> putBigDoubleNegativeDecimalAsync(@NonNull double numberBody, ServiceCallback<Void> serviceCallback);

    /**
     * Put big double value -99999999.99.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;RestResponse&lt;Void, Void&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Void>> putBigDoubleNegativeDecimalWithRestResponseAsync(@NonNull double numberBody);

    /**
     * Put big double value -99999999.99.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Completable} object if successful.
     */
    Completable putBigDoubleNegativeDecimalAsync(@NonNull double numberBody);

    /**
     * Get big double value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    double getBigDoubleNegativeDecimal();

    /**
     * Get big double value -99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Double&gt;} object.
     */
    ServiceFuture<Double> getBigDoubleNegativeDecimalAsync(ServiceCallback<Double> serviceCallback);

    /**
     * Get big double value -99999999.99.
     *
     * @return the {@link Single&lt;RestResponse&lt;Void, Double&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Double>> getBigDoubleNegativeDecimalWithRestResponseAsync();

    /**
     * Get big double value -99999999.99.
     *
     * @return the {@link Maybe&lt;Double&gt;} object if successful.
     */
    Maybe<Double> getBigDoubleNegativeDecimalAsync();

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void putBigDecimal(@NonNull BigDecimal numberBody);

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Void&gt;} object.
     */
    ServiceFuture<Void> putBigDecimalAsync(@NonNull BigDecimal numberBody, ServiceCallback<Void> serviceCallback);

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;RestResponse&lt;Void, Void&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Void>> putBigDecimalWithRestResponseAsync(@NonNull BigDecimal numberBody);

    /**
     * Put big decimal value 2.5976931e+101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Completable} object if successful.
     */
    Completable putBigDecimalAsync(@NonNull BigDecimal numberBody);

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BigDecimal object if successful.
     */
    BigDecimal getBigDecimal();

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;BigDecimal&gt;} object.
     */
    ServiceFuture<BigDecimal> getBigDecimalAsync(ServiceCallback<BigDecimal> serviceCallback);

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @return the {@link Single&lt;RestResponse&lt;Void, BigDecimal&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, BigDecimal>> getBigDecimalWithRestResponseAsync();

    /**
     * Get big decimal value 2.5976931e+101.
     *
     * @return the {@link Maybe&lt;BigDecimal&gt;} object if successful.
     */
    Maybe<BigDecimal> getBigDecimalAsync();

    /**
     * Put big decimal value 99999999.99.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void putBigDecimalPositiveDecimal(@NonNull BigDecimal numberBody);

    /**
     * Put big decimal value 99999999.99.
     *
     * @param numberBody the BigDecimal value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Void&gt;} object.
     */
    ServiceFuture<Void> putBigDecimalPositiveDecimalAsync(@NonNull BigDecimal numberBody, ServiceCallback<Void> serviceCallback);

    /**
     * Put big decimal value 99999999.99.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;RestResponse&lt;Void, Void&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Void>> putBigDecimalPositiveDecimalWithRestResponseAsync(@NonNull BigDecimal numberBody);

    /**
     * Put big decimal value 99999999.99.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Completable} object if successful.
     */
    Completable putBigDecimalPositiveDecimalAsync(@NonNull BigDecimal numberBody);

    /**
     * Get big decimal value 99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BigDecimal object if successful.
     */
    BigDecimal getBigDecimalPositiveDecimal();

    /**
     * Get big decimal value 99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;BigDecimal&gt;} object.
     */
    ServiceFuture<BigDecimal> getBigDecimalPositiveDecimalAsync(ServiceCallback<BigDecimal> serviceCallback);

    /**
     * Get big decimal value 99999999.99.
     *
     * @return the {@link Single&lt;RestResponse&lt;Void, BigDecimal&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, BigDecimal>> getBigDecimalPositiveDecimalWithRestResponseAsync();

    /**
     * Get big decimal value 99999999.99.
     *
     * @return the {@link Maybe&lt;BigDecimal&gt;} object if successful.
     */
    Maybe<BigDecimal> getBigDecimalPositiveDecimalAsync();

    /**
     * Put big decimal value -99999999.99.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void putBigDecimalNegativeDecimal(@NonNull BigDecimal numberBody);

    /**
     * Put big decimal value -99999999.99.
     *
     * @param numberBody the BigDecimal value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Void&gt;} object.
     */
    ServiceFuture<Void> putBigDecimalNegativeDecimalAsync(@NonNull BigDecimal numberBody, ServiceCallback<Void> serviceCallback);

    /**
     * Put big decimal value -99999999.99.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;RestResponse&lt;Void, Void&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Void>> putBigDecimalNegativeDecimalWithRestResponseAsync(@NonNull BigDecimal numberBody);

    /**
     * Put big decimal value -99999999.99.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Completable} object if successful.
     */
    Completable putBigDecimalNegativeDecimalAsync(@NonNull BigDecimal numberBody);

    /**
     * Get big decimal value -99999999.99.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BigDecimal object if successful.
     */
    BigDecimal getBigDecimalNegativeDecimal();

    /**
     * Get big decimal value -99999999.99.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;BigDecimal&gt;} object.
     */
    ServiceFuture<BigDecimal> getBigDecimalNegativeDecimalAsync(ServiceCallback<BigDecimal> serviceCallback);

    /**
     * Get big decimal value -99999999.99.
     *
     * @return the {@link Single&lt;RestResponse&lt;Void, BigDecimal&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, BigDecimal>> getBigDecimalNegativeDecimalWithRestResponseAsync();

    /**
     * Get big decimal value -99999999.99.
     *
     * @return the {@link Maybe&lt;BigDecimal&gt;} object if successful.
     */
    Maybe<BigDecimal> getBigDecimalNegativeDecimalAsync();

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void putSmallFloat(@NonNull double numberBody);

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Void&gt;} object.
     */
    ServiceFuture<Void> putSmallFloatAsync(@NonNull double numberBody, ServiceCallback<Void> serviceCallback);

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;RestResponse&lt;Void, Void&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Void>> putSmallFloatWithRestResponseAsync(@NonNull double numberBody);

    /**
     * Put small float value 3.402823e-20.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Completable} object if successful.
     */
    Completable putSmallFloatAsync(@NonNull double numberBody);

    /**
     * Get big double value 3.402823e-20.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    double getSmallFloat();

    /**
     * Get big double value 3.402823e-20.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Double&gt;} object.
     */
    ServiceFuture<Double> getSmallFloatAsync(ServiceCallback<Double> serviceCallback);

    /**
     * Get big double value 3.402823e-20.
     *
     * @return the {@link Single&lt;RestResponse&lt;Void, Double&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Double>> getSmallFloatWithRestResponseAsync();

    /**
     * Get big double value 3.402823e-20.
     *
     * @return the {@link Maybe&lt;Double&gt;} object if successful.
     */
    Maybe<Double> getSmallFloatAsync();

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void putSmallDouble(@NonNull double numberBody);

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Void&gt;} object.
     */
    ServiceFuture<Void> putSmallDoubleAsync(@NonNull double numberBody, ServiceCallback<Void> serviceCallback);

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;RestResponse&lt;Void, Void&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Void>> putSmallDoubleWithRestResponseAsync(@NonNull double numberBody);

    /**
     * Put small double value 2.5976931e-101.
     *
     * @param numberBody the double value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Completable} object if successful.
     */
    Completable putSmallDoubleAsync(@NonNull double numberBody);

    /**
     * Get big double value 2.5976931e-101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the double object if successful.
     */
    double getSmallDouble();

    /**
     * Get big double value 2.5976931e-101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Double&gt;} object.
     */
    ServiceFuture<Double> getSmallDoubleAsync(ServiceCallback<Double> serviceCallback);

    /**
     * Get big double value 2.5976931e-101.
     *
     * @return the {@link Single&lt;RestResponse&lt;Void, Double&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Double>> getSmallDoubleWithRestResponseAsync();

    /**
     * Get big double value 2.5976931e-101.
     *
     * @return the {@link Maybe&lt;Double&gt;} object if successful.
     */
    Maybe<Double> getSmallDoubleAsync();

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void putSmallDecimal(@NonNull BigDecimal numberBody);

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Void&gt;} object.
     */
    ServiceFuture<Void> putSmallDecimalAsync(@NonNull BigDecimal numberBody, ServiceCallback<Void> serviceCallback);

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;RestResponse&lt;Void, Void&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Void>> putSmallDecimalWithRestResponseAsync(@NonNull BigDecimal numberBody);

    /**
     * Put small decimal value 2.5976931e-101.
     *
     * @param numberBody the BigDecimal value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Completable} object if successful.
     */
    Completable putSmallDecimalAsync(@NonNull BigDecimal numberBody);

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BigDecimal object if successful.
     */
    BigDecimal getSmallDecimal();

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;BigDecimal&gt;} object.
     */
    ServiceFuture<BigDecimal> getSmallDecimalAsync(ServiceCallback<BigDecimal> serviceCallback);

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @return the {@link Single&lt;RestResponse&lt;Void, BigDecimal&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, BigDecimal>> getSmallDecimalWithRestResponseAsync();

    /**
     * Get small decimal value 2.5976931e-101.
     *
     * @return the {@link Maybe&lt;BigDecimal&gt;} object if successful.
     */
    Maybe<BigDecimal> getSmallDecimalAsync();
}
