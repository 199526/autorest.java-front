/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.http;

import com.microsoft.rest.v3.BodyResponse;
import com.microsoft.rest.v3.ServiceCallback;
import com.microsoft.rest.v3.ServiceFuture;
import fixtures.http.models.ErrorException;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * HttpFailures.
 */
public interface HttpFailures {
    /**
     * Get empty error form server.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the boolean object if successful.
     */
    boolean getEmptyError();

    /**
     * Get empty error form server.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<Boolean> getEmptyErrorAsync(ServiceCallback<Boolean> serviceCallback);

    /**
     * Get empty error form server.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<BodyResponse<Boolean>> getEmptyErrorWithRestResponseAsync();

    /**
     * Get empty error form server.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Boolean> getEmptyErrorAsync();

    /**
     * Get empty error form server.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the boolean object if successful.
     */
    boolean getNoModelError();

    /**
     * Get empty error form server.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<Boolean> getNoModelErrorAsync(ServiceCallback<Boolean> serviceCallback);

    /**
     * Get empty error form server.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<BodyResponse<Boolean>> getNoModelErrorWithRestResponseAsync();

    /**
     * Get empty error form server.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Boolean> getNoModelErrorAsync();

    /**
     * Get empty response from server.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the boolean object if successful.
     */
    boolean getNoModelEmpty();

    /**
     * Get empty response from server.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<Boolean> getNoModelEmptyAsync(ServiceCallback<Boolean> serviceCallback);

    /**
     * Get empty response from server.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<BodyResponse<Boolean>> getNoModelEmptyWithRestResponseAsync();

    /**
     * Get empty response from server.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Boolean> getNoModelEmptyAsync();
}
