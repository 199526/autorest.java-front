/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.http.implementation;

import com.microsoft.rest.v2.RestProxy;
import fixtures.http.HttpSuccess;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.v2.annotations.BodyParam;
import com.microsoft.rest.v2.annotations.DELETE;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.HEAD;
import com.microsoft.rest.v2.annotations.Headers;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PATCH;
import com.microsoft.rest.v2.annotations.POST;
import com.microsoft.rest.v2.annotations.PUT;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import com.microsoft.rest.v2.http.HttpClient;
import fixtures.http.models.ErrorException;
import java.io.IOException;
import rx.functions.Func1;
import rx.Observable;
import rx.Single;

/**
 * An instance of this class provides access to all the operations defined
 * in HttpSuccess.
 */
public class HttpSuccessImpl implements HttpSuccess {
    /** The RestProxy service to perform REST calls. */
    private HttpSuccessService service;
    /** The service client containing this operation class. */
    private AutoRestHttpInfrastructureTestServiceImpl client;

    /**
     * Initializes an instance of HttpSuccess.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public HttpSuccessImpl(AutoRestHttpInfrastructureTestServiceImpl client) {
        this.service = RestProxy.create(HttpSuccessService.class, client.restClient().baseURL(), client.httpClient(), client.serializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HttpSuccess to be
     * used by RestProxy to perform REST calls.
    */
    @Host("http://localhost")
    interface HttpSuccessService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpSuccess head200" })
        @HEAD("http/success/200")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> head200();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpSuccess get200" })
        @GET("http/success/200")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Boolean> get200();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpSuccess put200" })
        @PUT("http/success/200")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> put200(@BodyParam Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpSuccess patch200" })
        @PATCH("http/success/200")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> patch200(@BodyParam Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpSuccess post200" })
        @POST("http/success/200")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> post200(@BodyParam Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpSuccess delete200" })
        @DELETE("http/success/200")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> delete200(@BodyParam Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpSuccess put201" })
        @PUT("http/success/201")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> put201(@BodyParam Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpSuccess post201" })
        @POST("http/success/201")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> post201(@BodyParam Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpSuccess put202" })
        @PUT("http/success/202")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> put202(@BodyParam Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpSuccess patch202" })
        @PATCH("http/success/202")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> patch202(@BodyParam Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpSuccess post202" })
        @POST("http/success/202")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> post202(@BodyParam Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpSuccess delete202" })
        @DELETE("http/success/202")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> delete202(@BodyParam Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpSuccess head204" })
        @HEAD("http/success/204")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> head204();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpSuccess put204" })
        @PUT("http/success/204")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> put204(@BodyParam Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpSuccess patch204" })
        @PATCH("http/success/204")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> patch204(@BodyParam Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpSuccess post204" })
        @POST("http/success/204")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> post204(@BodyParam Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpSuccess delete204" })
        @DELETE("http/success/204")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> delete204(@BodyParam Boolean booleanValue);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: fixtures.http.HttpSuccess head404" })
        @HEAD("http/success/404")
        @ExpectedResponses({204, 404})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> head404();

    }

    /**
     * Return 200 status code if successful.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void head200() {
        head200Async().toBlocking().value();
    }

    /**
     * Return 200 status code if successful.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> head200Async(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(head200Async(), serviceCallback);
    }

    /**
     * Return 200 status code if successful.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Single<Void> head200Async() {
        return service.head200();
    }


    /**
     * Get 200 success.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the boolean object if successful.
     */
    public boolean get200() {
        return get200Async().toBlocking().value();
    }

    /**
     * Get 200 success.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Boolean> get200Async(final ServiceCallback<Boolean> serviceCallback) {
        return ServiceFuture.fromBody(get200Async(), serviceCallback);
    }

    /**
     * Get 200 success.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Boolean object
     */
    public Single<Boolean> get200Async() {
        return service.get200();
    }


    /**
     * Put boolean value true returning 200 success.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void put200() {
        put200Async().toBlocking().value();
    }

    /**
     * Put boolean value true returning 200 success.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> put200Async(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(put200Async(), serviceCallback);
    }

    /**
     * Put boolean value true returning 200 success.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Void} object if successful.
     */
    public Single<Void> put200Async() {
        final Boolean booleanValue = null;
        return service.put200(booleanValue);
    }

    /**
     * Put boolean value true returning 200 success.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void put200(Boolean booleanValue) {
        put200Async(booleanValue).toBlocking().value();
    }

    /**
     * Put boolean value true returning 200 success.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> put200Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(put200Async(booleanValue), serviceCallback);
    }

    /**
     * Put boolean value true returning 200 success.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Single<Void> put200Async(Boolean booleanValue) {
        return service.put200(booleanValue);
    }


    /**
     * Patch true Boolean value in request returning 200.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void patch200() {
        patch200Async().toBlocking().value();
    }

    /**
     * Patch true Boolean value in request returning 200.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> patch200Async(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(patch200Async(), serviceCallback);
    }

    /**
     * Patch true Boolean value in request returning 200.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Void} object if successful.
     */
    public Single<Void> patch200Async() {
        final Boolean booleanValue = null;
        return service.patch200(booleanValue);
    }

    /**
     * Patch true Boolean value in request returning 200.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void patch200(Boolean booleanValue) {
        patch200Async(booleanValue).toBlocking().value();
    }

    /**
     * Patch true Boolean value in request returning 200.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> patch200Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(patch200Async(booleanValue), serviceCallback);
    }

    /**
     * Patch true Boolean value in request returning 200.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Single<Void> patch200Async(Boolean booleanValue) {
        return service.patch200(booleanValue);
    }


    /**
     * Post bollean value true in request that returns a 200.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void post200() {
        post200Async().toBlocking().value();
    }

    /**
     * Post bollean value true in request that returns a 200.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> post200Async(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(post200Async(), serviceCallback);
    }

    /**
     * Post bollean value true in request that returns a 200.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Void} object if successful.
     */
    public Single<Void> post200Async() {
        final Boolean booleanValue = null;
        return service.post200(booleanValue);
    }

    /**
     * Post bollean value true in request that returns a 200.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void post200(Boolean booleanValue) {
        post200Async(booleanValue).toBlocking().value();
    }

    /**
     * Post bollean value true in request that returns a 200.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> post200Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(post200Async(booleanValue), serviceCallback);
    }

    /**
     * Post bollean value true in request that returns a 200.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Single<Void> post200Async(Boolean booleanValue) {
        return service.post200(booleanValue);
    }


    /**
     * Delete simple boolean value true returns 200.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete200() {
        delete200Async().toBlocking().value();
    }

    /**
     * Delete simple boolean value true returns 200.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> delete200Async(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(delete200Async(), serviceCallback);
    }

    /**
     * Delete simple boolean value true returns 200.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Void} object if successful.
     */
    public Single<Void> delete200Async() {
        final Boolean booleanValue = null;
        return service.delete200(booleanValue);
    }

    /**
     * Delete simple boolean value true returns 200.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete200(Boolean booleanValue) {
        delete200Async(booleanValue).toBlocking().value();
    }

    /**
     * Delete simple boolean value true returns 200.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> delete200Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(delete200Async(booleanValue), serviceCallback);
    }

    /**
     * Delete simple boolean value true returns 200.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Single<Void> delete200Async(Boolean booleanValue) {
        return service.delete200(booleanValue);
    }


    /**
     * Put true Boolean value in request returns 201.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void put201() {
        put201Async().toBlocking().value();
    }

    /**
     * Put true Boolean value in request returns 201.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> put201Async(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(put201Async(), serviceCallback);
    }

    /**
     * Put true Boolean value in request returns 201.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Void} object if successful.
     */
    public Single<Void> put201Async() {
        final Boolean booleanValue = null;
        return service.put201(booleanValue);
    }

    /**
     * Put true Boolean value in request returns 201.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void put201(Boolean booleanValue) {
        put201Async(booleanValue).toBlocking().value();
    }

    /**
     * Put true Boolean value in request returns 201.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> put201Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(put201Async(booleanValue), serviceCallback);
    }

    /**
     * Put true Boolean value in request returns 201.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Single<Void> put201Async(Boolean booleanValue) {
        return service.put201(booleanValue);
    }


    /**
     * Post true Boolean value in request returns 201 (Created).
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void post201() {
        post201Async().toBlocking().value();
    }

    /**
     * Post true Boolean value in request returns 201 (Created).
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> post201Async(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(post201Async(), serviceCallback);
    }

    /**
     * Post true Boolean value in request returns 201 (Created).
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Void} object if successful.
     */
    public Single<Void> post201Async() {
        final Boolean booleanValue = null;
        return service.post201(booleanValue);
    }

    /**
     * Post true Boolean value in request returns 201 (Created).
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void post201(Boolean booleanValue) {
        post201Async(booleanValue).toBlocking().value();
    }

    /**
     * Post true Boolean value in request returns 201 (Created).
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> post201Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(post201Async(booleanValue), serviceCallback);
    }

    /**
     * Post true Boolean value in request returns 201 (Created).
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Single<Void> post201Async(Boolean booleanValue) {
        return service.post201(booleanValue);
    }


    /**
     * Put true Boolean value in request returns 202 (Accepted).
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void put202() {
        put202Async().toBlocking().value();
    }

    /**
     * Put true Boolean value in request returns 202 (Accepted).
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> put202Async(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(put202Async(), serviceCallback);
    }

    /**
     * Put true Boolean value in request returns 202 (Accepted).
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Void} object if successful.
     */
    public Single<Void> put202Async() {
        final Boolean booleanValue = null;
        return service.put202(booleanValue);
    }

    /**
     * Put true Boolean value in request returns 202 (Accepted).
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void put202(Boolean booleanValue) {
        put202Async(booleanValue).toBlocking().value();
    }

    /**
     * Put true Boolean value in request returns 202 (Accepted).
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> put202Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(put202Async(booleanValue), serviceCallback);
    }

    /**
     * Put true Boolean value in request returns 202 (Accepted).
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Single<Void> put202Async(Boolean booleanValue) {
        return service.put202(booleanValue);
    }


    /**
     * Patch true Boolean value in request returns 202.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void patch202() {
        patch202Async().toBlocking().value();
    }

    /**
     * Patch true Boolean value in request returns 202.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> patch202Async(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(patch202Async(), serviceCallback);
    }

    /**
     * Patch true Boolean value in request returns 202.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Void} object if successful.
     */
    public Single<Void> patch202Async() {
        final Boolean booleanValue = null;
        return service.patch202(booleanValue);
    }

    /**
     * Patch true Boolean value in request returns 202.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void patch202(Boolean booleanValue) {
        patch202Async(booleanValue).toBlocking().value();
    }

    /**
     * Patch true Boolean value in request returns 202.
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> patch202Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(patch202Async(booleanValue), serviceCallback);
    }

    /**
     * Patch true Boolean value in request returns 202.
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Single<Void> patch202Async(Boolean booleanValue) {
        return service.patch202(booleanValue);
    }


    /**
     * Post true Boolean value in request returns 202 (Accepted).
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void post202() {
        post202Async().toBlocking().value();
    }

    /**
     * Post true Boolean value in request returns 202 (Accepted).
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> post202Async(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(post202Async(), serviceCallback);
    }

    /**
     * Post true Boolean value in request returns 202 (Accepted).
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Void} object if successful.
     */
    public Single<Void> post202Async() {
        final Boolean booleanValue = null;
        return service.post202(booleanValue);
    }

    /**
     * Post true Boolean value in request returns 202 (Accepted).
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void post202(Boolean booleanValue) {
        post202Async(booleanValue).toBlocking().value();
    }

    /**
     * Post true Boolean value in request returns 202 (Accepted).
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> post202Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(post202Async(booleanValue), serviceCallback);
    }

    /**
     * Post true Boolean value in request returns 202 (Accepted).
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Single<Void> post202Async(Boolean booleanValue) {
        return service.post202(booleanValue);
    }


    /**
     * Delete true Boolean value in request returns 202 (accepted).
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete202() {
        delete202Async().toBlocking().value();
    }

    /**
     * Delete true Boolean value in request returns 202 (accepted).
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> delete202Async(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(delete202Async(), serviceCallback);
    }

    /**
     * Delete true Boolean value in request returns 202 (accepted).
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Void} object if successful.
     */
    public Single<Void> delete202Async() {
        final Boolean booleanValue = null;
        return service.delete202(booleanValue);
    }

    /**
     * Delete true Boolean value in request returns 202 (accepted).
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete202(Boolean booleanValue) {
        delete202Async(booleanValue).toBlocking().value();
    }

    /**
     * Delete true Boolean value in request returns 202 (accepted).
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> delete202Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(delete202Async(booleanValue), serviceCallback);
    }

    /**
     * Delete true Boolean value in request returns 202 (accepted).
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Single<Void> delete202Async(Boolean booleanValue) {
        return service.delete202(booleanValue);
    }


    /**
     * Return 204 status code if successful.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void head204() {
        head204Async().toBlocking().value();
    }

    /**
     * Return 204 status code if successful.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> head204Async(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(head204Async(), serviceCallback);
    }

    /**
     * Return 204 status code if successful.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Single<Void> head204Async() {
        return service.head204();
    }


    /**
     * Put true Boolean value in request returns 204 (no content).
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void put204() {
        put204Async().toBlocking().value();
    }

    /**
     * Put true Boolean value in request returns 204 (no content).
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> put204Async(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(put204Async(), serviceCallback);
    }

    /**
     * Put true Boolean value in request returns 204 (no content).
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Void} object if successful.
     */
    public Single<Void> put204Async() {
        final Boolean booleanValue = null;
        return service.put204(booleanValue);
    }

    /**
     * Put true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void put204(Boolean booleanValue) {
        put204Async(booleanValue).toBlocking().value();
    }

    /**
     * Put true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> put204Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(put204Async(booleanValue), serviceCallback);
    }

    /**
     * Put true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Single<Void> put204Async(Boolean booleanValue) {
        return service.put204(booleanValue);
    }


    /**
     * Patch true Boolean value in request returns 204 (no content).
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void patch204() {
        patch204Async().toBlocking().value();
    }

    /**
     * Patch true Boolean value in request returns 204 (no content).
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> patch204Async(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(patch204Async(), serviceCallback);
    }

    /**
     * Patch true Boolean value in request returns 204 (no content).
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Void} object if successful.
     */
    public Single<Void> patch204Async() {
        final Boolean booleanValue = null;
        return service.patch204(booleanValue);
    }

    /**
     * Patch true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void patch204(Boolean booleanValue) {
        patch204Async(booleanValue).toBlocking().value();
    }

    /**
     * Patch true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> patch204Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(patch204Async(booleanValue), serviceCallback);
    }

    /**
     * Patch true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Single<Void> patch204Async(Boolean booleanValue) {
        return service.patch204(booleanValue);
    }


    /**
     * Post true Boolean value in request returns 204 (no content).
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void post204() {
        post204Async().toBlocking().value();
    }

    /**
     * Post true Boolean value in request returns 204 (no content).
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> post204Async(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(post204Async(), serviceCallback);
    }

    /**
     * Post true Boolean value in request returns 204 (no content).
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Void} object if successful.
     */
    public Single<Void> post204Async() {
        final Boolean booleanValue = null;
        return service.post204(booleanValue);
    }

    /**
     * Post true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void post204(Boolean booleanValue) {
        post204Async(booleanValue).toBlocking().value();
    }

    /**
     * Post true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> post204Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(post204Async(booleanValue), serviceCallback);
    }

    /**
     * Post true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Single<Void> post204Async(Boolean booleanValue) {
        return service.post204(booleanValue);
    }


    /**
     * Delete true Boolean value in request returns 204 (no content).
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete204() {
        delete204Async().toBlocking().value();
    }

    /**
     * Delete true Boolean value in request returns 204 (no content).
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> delete204Async(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(delete204Async(), serviceCallback);
    }

    /**
     * Delete true Boolean value in request returns 204 (no content).
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Void} object if successful.
     */
    public Single<Void> delete204Async() {
        final Boolean booleanValue = null;
        return service.delete204(booleanValue);
    }

    /**
     * Delete true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete204(Boolean booleanValue) {
        delete204Async(booleanValue).toBlocking().value();
    }

    /**
     * Delete true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> delete204Async(Boolean booleanValue, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(delete204Async(booleanValue), serviceCallback);
    }

    /**
     * Delete true Boolean value in request returns 204 (no content).
     *
     * @param booleanValue Simple boolean value true
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Single<Void> delete204Async(Boolean booleanValue) {
        return service.delete204(booleanValue);
    }


    /**
     * Return 404 status code.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void head404() {
        head404Async().toBlocking().value();
    }

    /**
     * Return 404 status code.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> head404Async(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(head404Async(), serviceCallback);
    }

    /**
     * Return 404 status code.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Single<Void> head404Async() {
        return service.head404();
    }


}
