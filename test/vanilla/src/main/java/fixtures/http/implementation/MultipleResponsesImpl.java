/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.http.implementation;

import com.microsoft.rest.RestProxy;
import fixtures.http.MultipleResponses;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.annotations.ExpectedResponses;
import com.microsoft.rest.annotations.GET;
import com.microsoft.rest.annotations.Headers;
import com.microsoft.rest.annotations.Host;
import com.microsoft.rest.annotations.UnexpectedResponseExceptionType;
import com.microsoft.rest.http.HttpClient;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import fixtures.http.models.A;
import fixtures.http.models.B;
import fixtures.http.models.C;
import fixtures.http.models.D;
import fixtures.http.models.ErrorException;
import fixtures.http.models.MyException;
import java.io.IOException;
import rx.functions.Func1;
import rx.Observable;
import rx.Single;

/**
 * An instance of this class provides access to all the operations defined
 * in MultipleResponses.
 */
public class MultipleResponsesImpl implements MultipleResponses {
    /** The RestProxy service to perform REST calls. */
    private MultipleResponsesService service;
    /** The service client containing this operation class. */
    private AutoRestHttpInfrastructureTestServiceImpl client;

    /**
     * Initializes an instance of MultipleResponses.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public MultipleResponsesImpl(AutoRestHttpInfrastructureTestServiceImpl client) {
        this.service = RestProxy.create(MultipleResponsesService.class, client.restClient().baseURL(), client.httpClient(), client.serializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MultipleResponses to be
     * used by RestProxy to perform REST calls.
    */
    @Host("http://localhost")
    interface MultipleResponsesService {
        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get200Model204NoModelDefaultError200Valid" })
        @GET("http/payloads/200/A/204/none/default/Error/response/200/valid")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<A> get200Model204NoModelDefaultError200Valid();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get200Model204NoModelDefaultError204Valid" })
        @GET("http/payloads/200/A/204/none/default/Error/response/204/none")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<A> get200Model204NoModelDefaultError204Valid();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get200Model204NoModelDefaultError201Invalid" })
        @GET("http/payloads/200/A/204/none/default/Error/response/201/valid")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<A> get200Model204NoModelDefaultError201Invalid();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get200Model204NoModelDefaultError202None" })
        @GET("http/payloads/200/A/204/none/default/Error/response/202/none")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<A> get200Model204NoModelDefaultError202None();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get200Model204NoModelDefaultError400Valid" })
        @GET("http/payloads/200/A/204/none/default/Error/response/400/valid")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<A> get200Model204NoModelDefaultError400Valid();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get200Model201ModelDefaultError200Valid" })
        @GET("http/payloads/200/A/201/B/default/Error/response/200/valid")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<A> get200Model201ModelDefaultError200Valid();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get200Model201ModelDefaultError201Valid" })
        @GET("http/payloads/200/A/201/B/default/Error/response/201/valid")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<A> get200Model201ModelDefaultError201Valid();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get200Model201ModelDefaultError400Valid" })
        @GET("http/payloads/200/A/201/B/default/Error/response/400/valid")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<A> get200Model201ModelDefaultError400Valid();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get200ModelA201ModelC404ModelDDefaultError200Valid" })
        @GET("http/payloads/200/A/201/C/404/D/default/Error/response/200/valid")
        @ExpectedResponses({200, 201, 404})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Object> get200ModelA201ModelC404ModelDDefaultError200Valid();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get200ModelA201ModelC404ModelDDefaultError201Valid" })
        @GET("http/payloads/200/A/201/C/404/D/default/Error/response/201/valid")
        @ExpectedResponses({200, 201, 404})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Object> get200ModelA201ModelC404ModelDDefaultError201Valid();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get200ModelA201ModelC404ModelDDefaultError404Valid" })
        @GET("http/payloads/200/A/201/C/404/D/default/Error/response/404/valid")
        @ExpectedResponses({200, 201, 404})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Object> get200ModelA201ModelC404ModelDDefaultError404Valid();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get200ModelA201ModelC404ModelDDefaultError400Valid" })
        @GET("http/payloads/200/A/201/C/404/D/default/Error/response/400/valid")
        @ExpectedResponses({200, 201, 404})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Object> get200ModelA201ModelC404ModelDDefaultError400Valid();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get202None204NoneDefaultError202None" })
        @GET("http/payloads/202/none/204/none/default/Error/response/202/none")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> get202None204NoneDefaultError202None();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get202None204NoneDefaultError204None" })
        @GET("http/payloads/202/none/204/none/default/Error/response/204/none")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> get202None204NoneDefaultError204None();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get202None204NoneDefaultError400Valid" })
        @GET("http/payloads/202/none/204/none/default/Error/response/400/valid")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<Void> get202None204NoneDefaultError400Valid();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get202None204NoneDefaultNone202Invalid" })
        @GET("http/payloads/202/none/204/none/default/none/response/202/invalid")
        @ExpectedResponses({202, 204})
        Single<Void> get202None204NoneDefaultNone202Invalid();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get202None204NoneDefaultNone204None" })
        @GET("http/payloads/202/none/204/none/default/none/response/204/none")
        @ExpectedResponses({202, 204})
        Single<Void> get202None204NoneDefaultNone204None();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get202None204NoneDefaultNone400None" })
        @GET("http/payloads/202/none/204/none/default/none/response/400/none")
        @ExpectedResponses({202, 204})
        Single<Void> get202None204NoneDefaultNone400None();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get202None204NoneDefaultNone400Invalid" })
        @GET("http/payloads/202/none/204/none/default/none/response/400/invalid")
        @ExpectedResponses({202, 204})
        Single<Void> get202None204NoneDefaultNone400Invalid();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses getDefaultModelA200Valid" })
        @GET("http/payloads/default/A/response/200/valid")
        @UnexpectedResponseExceptionType(MyException.class)
        Single<A> getDefaultModelA200Valid();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses getDefaultModelA200None" })
        @GET("http/payloads/default/A/response/200/none")
        @UnexpectedResponseExceptionType(MyException.class)
        Single<A> getDefaultModelA200None();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses getDefaultModelA400Valid" })
        @GET("http/payloads/default/A/response/400/valid")
        @UnexpectedResponseExceptionType(MyException.class)
        Single<A> getDefaultModelA400Valid();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses getDefaultModelA400None" })
        @GET("http/payloads/default/A/response/400/none")
        @UnexpectedResponseExceptionType(MyException.class)
        Single<A> getDefaultModelA400None();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses getDefaultNone200Invalid" })
        @GET("http/payloads/default/none/response/200/invalid")
        Single<Void> getDefaultNone200Invalid();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses getDefaultNone200None" })
        @GET("http/payloads/default/none/response/200/none")
        Single<Void> getDefaultNone200None();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses getDefaultNone400Invalid" })
        @GET("http/payloads/default/none/response/400/invalid")
        Single<Void> getDefaultNone400Invalid();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses getDefaultNone400None" })
        @GET("http/payloads/default/none/response/400/none")
        Single<Void> getDefaultNone400None();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get200ModelA200None" })
        @GET("http/payloads/200/A/response/200/none")
        @ExpectedResponses({200})
        Single<A> get200ModelA200None();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get200ModelA200Valid" })
        @GET("http/payloads/200/A/response/200/valid")
        @ExpectedResponses({200})
        Single<A> get200ModelA200Valid();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get200ModelA200Invalid" })
        @GET("http/payloads/200/A/response/200/invalid")
        @ExpectedResponses({200})
        Single<A> get200ModelA200Invalid();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get200ModelA400None" })
        @GET("http/payloads/200/A/response/400/none")
        @ExpectedResponses({200})
        Single<A> get200ModelA400None();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get200ModelA400Valid" })
        @GET("http/payloads/200/A/response/400/valid")
        @ExpectedResponses({200})
        Single<A> get200ModelA400Valid();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get200ModelA400Invalid" })
        @GET("http/payloads/200/A/response/400/invalid")
        @ExpectedResponses({200})
        Single<A> get200ModelA400Invalid();

        @Headers({ "x-ms-logging-context: fixtures.http.MultipleResponses get200ModelA202Valid" })
        @GET("http/payloads/200/A/response/202/valid")
        @ExpectedResponses({200})
        Single<A> get200ModelA202Valid();

    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200Model204NoModelDefaultError200Valid() {
        return get200Model204NoModelDefaultError200ValidAsync().toBlocking().value();
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200Model204NoModelDefaultError200ValidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200Model204NoModelDefaultError200ValidAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Single<A> get200Model204NoModelDefaultError200ValidAsync() {
        return service.get200Model204NoModelDefaultError200Valid();
    }


    /**
     * Send a 204 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200Model204NoModelDefaultError204Valid() {
        return get200Model204NoModelDefaultError204ValidAsync().toBlocking().value();
    }

    /**
     * Send a 204 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200Model204NoModelDefaultError204ValidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200Model204NoModelDefaultError204ValidAsync(), serviceCallback);
    }

    /**
     * Send a 204 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Single<A> get200Model204NoModelDefaultError204ValidAsync() {
        return service.get200Model204NoModelDefaultError204Valid();
    }


    /**
     * Send a 201 response with valid payload: {'statusCode': '201'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200Model204NoModelDefaultError201Invalid() {
        return get200Model204NoModelDefaultError201InvalidAsync().toBlocking().value();
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200Model204NoModelDefaultError201InvalidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200Model204NoModelDefaultError201InvalidAsync(), serviceCallback);
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Single<A> get200Model204NoModelDefaultError201InvalidAsync() {
        return service.get200Model204NoModelDefaultError201Invalid();
    }


    /**
     * Send a 202 response with no payload:.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200Model204NoModelDefaultError202None() {
        return get200Model204NoModelDefaultError202NoneAsync().toBlocking().value();
    }

    /**
     * Send a 202 response with no payload:.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200Model204NoModelDefaultError202NoneAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200Model204NoModelDefaultError202NoneAsync(), serviceCallback);
    }

    /**
     * Send a 202 response with no payload:.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Single<A> get200Model204NoModelDefaultError202NoneAsync() {
        return service.get200Model204NoModelDefaultError202None();
    }


    /**
     * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200Model204NoModelDefaultError400Valid() {
        return get200Model204NoModelDefaultError400ValidAsync().toBlocking().value();
    }

    /**
     * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200Model204NoModelDefaultError400ValidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200Model204NoModelDefaultError400ValidAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with valid error payload: {'status': 400, 'message': 'client error'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Single<A> get200Model204NoModelDefaultError400ValidAsync() {
        return service.get200Model204NoModelDefaultError400Valid();
    }


    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200Model201ModelDefaultError200Valid() {
        return get200Model201ModelDefaultError200ValidAsync().toBlocking().value();
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200Model201ModelDefaultError200ValidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200Model201ModelDefaultError200ValidAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Single<A> get200Model201ModelDefaultError200ValidAsync() {
        return service.get200Model201ModelDefaultError200Valid();
    }


    /**
     * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200Model201ModelDefaultError201Valid() {
        return get200Model201ModelDefaultError201ValidAsync().toBlocking().value();
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200Model201ModelDefaultError201ValidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200Model201ModelDefaultError201ValidAsync(), serviceCallback);
    }

    /**
     * Send a 201 response with valid payload: {'statusCode': '201', 'textStatusCode': 'Created'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Single<A> get200Model201ModelDefaultError201ValidAsync() {
        return service.get200Model201ModelDefaultError201Valid();
    }


    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200Model201ModelDefaultError400Valid() {
        return get200Model201ModelDefaultError400ValidAsync().toBlocking().value();
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200Model201ModelDefaultError400ValidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200Model201ModelDefaultError400ValidAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Single<A> get200Model201ModelDefaultError400ValidAsync() {
        return service.get200Model201ModelDefaultError400Valid();
    }


    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object get200ModelA201ModelC404ModelDDefaultError200Valid() {
        return get200ModelA201ModelC404ModelDDefaultError200ValidAsync().toBlocking().value();
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> get200ModelA201ModelC404ModelDDefaultError200ValidAsync(final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromBody(get200ModelA201ModelC404ModelDDefaultError200ValidAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Single<Object> get200ModelA201ModelC404ModelDDefaultError200ValidAsync() {
        return service.get200ModelA201ModelC404ModelDDefaultError200Valid();
    }


    /**
     * Send a 200 response with valid payload: {'httpCode': '201'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object get200ModelA201ModelC404ModelDDefaultError201Valid() {
        return get200ModelA201ModelC404ModelDDefaultError201ValidAsync().toBlocking().value();
    }

    /**
     * Send a 200 response with valid payload: {'httpCode': '201'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> get200ModelA201ModelC404ModelDDefaultError201ValidAsync(final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromBody(get200ModelA201ModelC404ModelDDefaultError201ValidAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with valid payload: {'httpCode': '201'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Single<Object> get200ModelA201ModelC404ModelDDefaultError201ValidAsync() {
        return service.get200ModelA201ModelC404ModelDDefaultError201Valid();
    }


    /**
     * Send a 200 response with valid payload: {'httpStatusCode': '404'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object get200ModelA201ModelC404ModelDDefaultError404Valid() {
        return get200ModelA201ModelC404ModelDDefaultError404ValidAsync().toBlocking().value();
    }

    /**
     * Send a 200 response with valid payload: {'httpStatusCode': '404'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> get200ModelA201ModelC404ModelDDefaultError404ValidAsync(final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromBody(get200ModelA201ModelC404ModelDDefaultError404ValidAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with valid payload: {'httpStatusCode': '404'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Single<Object> get200ModelA201ModelC404ModelDDefaultError404ValidAsync() {
        return service.get200ModelA201ModelC404ModelDDefaultError404Valid();
    }


    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object get200ModelA201ModelC404ModelDDefaultError400Valid() {
        return get200ModelA201ModelC404ModelDDefaultError400ValidAsync().toBlocking().value();
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> get200ModelA201ModelC404ModelDDefaultError400ValidAsync(final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromBody(get200ModelA201ModelC404ModelDDefaultError400ValidAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Single<Object> get200ModelA201ModelC404ModelDDefaultError400ValidAsync() {
        return service.get200ModelA201ModelC404ModelDDefaultError400Valid();
    }


    /**
     * Send a 202 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void get202None204NoneDefaultError202None() {
        get202None204NoneDefaultError202NoneAsync().toBlocking().value();
    }

    /**
     * Send a 202 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> get202None204NoneDefaultError202NoneAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(get202None204NoneDefaultError202NoneAsync(), serviceCallback);
    }

    /**
     * Send a 202 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> get202None204NoneDefaultError202NoneAsync() {
        return service.get202None204NoneDefaultError202None();
    }


    /**
     * Send a 204 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void get202None204NoneDefaultError204None() {
        get202None204NoneDefaultError204NoneAsync().toBlocking().value();
    }

    /**
     * Send a 204 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> get202None204NoneDefaultError204NoneAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(get202None204NoneDefaultError204NoneAsync(), serviceCallback);
    }

    /**
     * Send a 204 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> get202None204NoneDefaultError204NoneAsync() {
        return service.get202None204NoneDefaultError204None();
    }


    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void get202None204NoneDefaultError400Valid() {
        get202None204NoneDefaultError400ValidAsync().toBlocking().value();
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> get202None204NoneDefaultError400ValidAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(get202None204NoneDefaultError400ValidAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with valid payload: {'code': '400', 'message': 'client error'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> get202None204NoneDefaultError400ValidAsync() {
        return service.get202None204NoneDefaultError400Valid();
    }


    /**
     * Send a 202 response with an unexpected payload {'property': 'value'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void get202None204NoneDefaultNone202Invalid() {
        get202None204NoneDefaultNone202InvalidAsync().toBlocking().value();
    }

    /**
     * Send a 202 response with an unexpected payload {'property': 'value'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> get202None204NoneDefaultNone202InvalidAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(get202None204NoneDefaultNone202InvalidAsync(), serviceCallback);
    }

    /**
     * Send a 202 response with an unexpected payload {'property': 'value'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> get202None204NoneDefaultNone202InvalidAsync() {
        return service.get202None204NoneDefaultNone202Invalid();
    }


    /**
     * Send a 204 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void get202None204NoneDefaultNone204None() {
        get202None204NoneDefaultNone204NoneAsync().toBlocking().value();
    }

    /**
     * Send a 204 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> get202None204NoneDefaultNone204NoneAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(get202None204NoneDefaultNone204NoneAsync(), serviceCallback);
    }

    /**
     * Send a 204 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> get202None204NoneDefaultNone204NoneAsync() {
        return service.get202None204NoneDefaultNone204None();
    }


    /**
     * Send a 400 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void get202None204NoneDefaultNone400None() {
        get202None204NoneDefaultNone400NoneAsync().toBlocking().value();
    }

    /**
     * Send a 400 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> get202None204NoneDefaultNone400NoneAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(get202None204NoneDefaultNone400NoneAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> get202None204NoneDefaultNone400NoneAsync() {
        return service.get202None204NoneDefaultNone400None();
    }


    /**
     * Send a 400 response with an unexpected payload {'property': 'value'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void get202None204NoneDefaultNone400Invalid() {
        get202None204NoneDefaultNone400InvalidAsync().toBlocking().value();
    }

    /**
     * Send a 400 response with an unexpected payload {'property': 'value'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> get202None204NoneDefaultNone400InvalidAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(get202None204NoneDefaultNone400InvalidAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with an unexpected payload {'property': 'value'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> get202None204NoneDefaultNone400InvalidAsync() {
        return service.get202None204NoneDefaultNone400Invalid();
    }


    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MyException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A getDefaultModelA200Valid() {
        return getDefaultModelA200ValidAsync().toBlocking().value();
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> getDefaultModelA200ValidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(getDefaultModelA200ValidAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with valid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Single<A> getDefaultModelA200ValidAsync() {
        return service.getDefaultModelA200Valid();
    }


    /**
     * Send a 200 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MyException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A getDefaultModelA200None() {
        return getDefaultModelA200NoneAsync().toBlocking().value();
    }

    /**
     * Send a 200 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> getDefaultModelA200NoneAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(getDefaultModelA200NoneAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Single<A> getDefaultModelA200NoneAsync() {
        return service.getDefaultModelA200None();
    }


    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MyException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A getDefaultModelA400Valid() {
        return getDefaultModelA400ValidAsync().toBlocking().value();
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> getDefaultModelA400ValidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(getDefaultModelA400ValidAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Single<A> getDefaultModelA400ValidAsync() {
        return service.getDefaultModelA400Valid();
    }


    /**
     * Send a 400 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MyException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A getDefaultModelA400None() {
        return getDefaultModelA400NoneAsync().toBlocking().value();
    }

    /**
     * Send a 400 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> getDefaultModelA400NoneAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(getDefaultModelA400NoneAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Single<A> getDefaultModelA400NoneAsync() {
        return service.getDefaultModelA400None();
    }


    /**
     * Send a 200 response with invalid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void getDefaultNone200Invalid() {
        getDefaultNone200InvalidAsync().toBlocking().value();
    }

    /**
     * Send a 200 response with invalid payload: {'statusCode': '200'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> getDefaultNone200InvalidAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(getDefaultNone200InvalidAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with invalid payload: {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> getDefaultNone200InvalidAsync() {
        return service.getDefaultNone200Invalid();
    }


    /**
     * Send a 200 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void getDefaultNone200None() {
        getDefaultNone200NoneAsync().toBlocking().value();
    }

    /**
     * Send a 200 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> getDefaultNone200NoneAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(getDefaultNone200NoneAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> getDefaultNone200NoneAsync() {
        return service.getDefaultNone200None();
    }


    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void getDefaultNone400Invalid() {
        getDefaultNone400InvalidAsync().toBlocking().value();
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> getDefaultNone400InvalidAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(getDefaultNone400InvalidAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with valid payload: {'statusCode': '400'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> getDefaultNone400InvalidAsync() {
        return service.getDefaultNone400Invalid();
    }


    /**
     * Send a 400 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void getDefaultNone400None() {
        getDefaultNone400NoneAsync().toBlocking().value();
    }

    /**
     * Send a 400 response with no payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> getDefaultNone400NoneAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(getDefaultNone400NoneAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with no payload.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link Single<Void>} object if successful.
     */
    public Single<Void> getDefaultNone400NoneAsync() {
        return service.getDefaultNone400None();
    }


    /**
     * Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200ModelA200None() {
        return get200ModelA200NoneAsync().toBlocking().value();
    }

    /**
     * Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200ModelA200NoneAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200ModelA200NoneAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with no payload, when a payload is expected - client should return a null object of thde type for model A.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Single<A> get200ModelA200NoneAsync() {
        return service.get200ModelA200None();
    }


    /**
     * Send a 200 response with payload {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200ModelA200Valid() {
        return get200ModelA200ValidAsync().toBlocking().value();
    }

    /**
     * Send a 200 response with payload {'statusCode': '200'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200ModelA200ValidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200ModelA200ValidAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with payload {'statusCode': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Single<A> get200ModelA200ValidAsync() {
        return service.get200ModelA200Valid();
    }


    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200ModelA200Invalid() {
        return get200ModelA200InvalidAsync().toBlocking().value();
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200ModelA200InvalidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200ModelA200InvalidAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '200'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Single<A> get200ModelA200InvalidAsync() {
        return service.get200ModelA200Invalid();
    }


    /**
     * Send a 400 response with no payload client should treat as an http error with no error model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200ModelA400None() {
        return get200ModelA400NoneAsync().toBlocking().value();
    }

    /**
     * Send a 400 response with no payload client should treat as an http error with no error model.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200ModelA400NoneAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200ModelA400NoneAsync(), serviceCallback);
    }

    /**
     * Send a 400 response with no payload client should treat as an http error with no error model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Single<A> get200ModelA400NoneAsync() {
        return service.get200ModelA400None();
    }


    /**
     * Send a 200 response with payload {'statusCode': '400'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200ModelA400Valid() {
        return get200ModelA400ValidAsync().toBlocking().value();
    }

    /**
     * Send a 200 response with payload {'statusCode': '400'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200ModelA400ValidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200ModelA400ValidAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with payload {'statusCode': '400'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Single<A> get200ModelA400ValidAsync() {
        return service.get200ModelA400Valid();
    }


    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200ModelA400Invalid() {
        return get200ModelA400InvalidAsync().toBlocking().value();
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200ModelA400InvalidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200ModelA400InvalidAsync(), serviceCallback);
    }

    /**
     * Send a 200 response with invalid payload {'statusCodeInvalid': '400'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Single<A> get200ModelA400InvalidAsync() {
        return service.get200ModelA400Invalid();
    }


    /**
     * Send a 202 response with payload {'statusCode': '202'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the A object if successful.
     */
    public A get200ModelA202Valid() {
        return get200ModelA202ValidAsync().toBlocking().value();
    }

    /**
     * Send a 202 response with payload {'statusCode': '202'}.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<A> get200ModelA202ValidAsync(final ServiceCallback<A> serviceCallback) {
        return ServiceFuture.fromBody(get200ModelA202ValidAsync(), serviceCallback);
    }

    /**
     * Send a 202 response with payload {'statusCode': '202'}.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the A object
     */
    public Single<A> get200ModelA202ValidAsync() {
        return service.get200ModelA202Valid();
    }


}
