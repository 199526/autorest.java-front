/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.http.implementation;

import com.microsoft.rest.v3.RestProxy;
import com.microsoft.rest.v3.ServiceCallback;
import com.microsoft.rest.v3.ServiceFuture;
import com.microsoft.rest.v3.annotations.BodyParam;
import com.microsoft.rest.v3.annotations.DELETE;
import com.microsoft.rest.v3.annotations.ExpectedResponses;
import com.microsoft.rest.v3.annotations.GET;
import com.microsoft.rest.v3.annotations.HEAD;
import com.microsoft.rest.v3.annotations.Host;
import com.microsoft.rest.v3.annotations.PATCH;
import com.microsoft.rest.v3.annotations.POST;
import com.microsoft.rest.v3.annotations.PUT;
import com.microsoft.rest.v3.annotations.UnexpectedResponseExceptionType;
import fixtures.http.HttpRedirects;
import fixtures.http.models.ErrorException;
import fixtures.http.models.HttpRedirectsDelete307Response;
import fixtures.http.models.HttpRedirectsGet300Response;
import fixtures.http.models.HttpRedirectsGet301Response;
import fixtures.http.models.HttpRedirectsGet302Response;
import fixtures.http.models.HttpRedirectsGet307Response;
import fixtures.http.models.HttpRedirectsHead300Response;
import fixtures.http.models.HttpRedirectsHead301Response;
import fixtures.http.models.HttpRedirectsHead302Response;
import fixtures.http.models.HttpRedirectsHead307Response;
import fixtures.http.models.HttpRedirectsPatch302Response;
import fixtures.http.models.HttpRedirectsPatch307Response;
import fixtures.http.models.HttpRedirectsPost303Response;
import fixtures.http.models.HttpRedirectsPost307Response;
import fixtures.http.models.HttpRedirectsPut301Response;
import fixtures.http.models.HttpRedirectsPut307Response;
import java.util.ArrayList;
import java.util.List;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * HttpRedirects.
 */
public final class HttpRedirectsImpl implements HttpRedirects {
    /**
     * The proxy service used to perform REST calls.
     */
    private HttpRedirectsService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestHttpInfrastructureTestServiceImpl client;

    /**
     * Initializes an instance of HttpRedirectsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public HttpRedirectsImpl(AutoRestHttpInfrastructureTestServiceImpl client) {
        this.service = RestProxy.create(HttpRedirectsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for HttpRedirects to be used by
     * the proxy service to perform REST calls.
     */
    @Host("http://localhost:3000")
    private interface HttpRedirectsService {
        @HEAD("http/redirect/300")
        @ExpectedResponses({200, 300})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<HttpRedirectsHead300Response> head300();

        @GET("http/redirect/300")
        @ExpectedResponses({200, 300})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<HttpRedirectsGet300Response> get300();

        @HEAD("http/redirect/301")
        @ExpectedResponses({200, 301})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<HttpRedirectsHead301Response> head301();

        @GET("http/redirect/301")
        @ExpectedResponses({200, 301})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<HttpRedirectsGet301Response> get301();

        @PUT("http/redirect/301")
        @ExpectedResponses({301})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<HttpRedirectsPut301Response> put301(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @HEAD("http/redirect/302")
        @ExpectedResponses({200, 302})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<HttpRedirectsHead302Response> head302();

        @GET("http/redirect/302")
        @ExpectedResponses({200, 302})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<HttpRedirectsGet302Response> get302();

        @PATCH("http/redirect/302")
        @ExpectedResponses({302})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<HttpRedirectsPatch302Response> patch302(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @POST("http/redirect/303")
        @ExpectedResponses({200, 303})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<HttpRedirectsPost303Response> post303(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @HEAD("http/redirect/307")
        @ExpectedResponses({200, 307})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<HttpRedirectsHead307Response> head307();

        @GET("http/redirect/307")
        @ExpectedResponses({200, 307})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<HttpRedirectsGet307Response> get307();

        @PUT("http/redirect/307")
        @ExpectedResponses({200, 307})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<HttpRedirectsPut307Response> put307(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @PATCH("http/redirect/307")
        @ExpectedResponses({200, 307})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<HttpRedirectsPatch307Response> patch307(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @POST("http/redirect/307")
        @ExpectedResponses({200, 307})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<HttpRedirectsPost307Response> post307(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);

        @DELETE("http/redirect/307")
        @ExpectedResponses({200, 307})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<HttpRedirectsDelete307Response> delete307(@BodyParam("application/json; charset=utf-8") Boolean booleanValue);
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void head300() {
        head300Async().block();
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> head300Async(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(head300Async(), serviceCallback);
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<HttpRedirectsHead300Response> head300WithRestResponseAsync() {
        return service.head300();
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> head300Async() {
        return head300WithRestResponseAsync()
            .flatMap((HttpRedirectsHead300Response res) -> Mono.just(res.body()));
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;String&gt; object if successful.
     */
    public List<String> get300() {
        return get300Async().block();
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<List<String>> get300Async(ServiceCallback<List<String>> serviceCallback) {
        return ServiceFuture.fromBody(get300Async(), serviceCallback);
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<HttpRedirectsGet300Response> get300WithRestResponseAsync() {
        return service.get300();
    }

    /**
     * Return 300 status code and redirect to /http/success/200.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<String>> get300Async() {
        return get300WithRestResponseAsync()
            .flatMap((HttpRedirectsGet300Response res) -> Mono.just(res.body()));
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void head301() {
        head301Async().block();
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> head301Async(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(head301Async(), serviceCallback);
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<HttpRedirectsHead301Response> head301WithRestResponseAsync() {
        return service.head301();
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> head301Async() {
        return head301WithRestResponseAsync()
            .flatMap((HttpRedirectsHead301Response res) -> Mono.just(res.body()));
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void get301() {
        get301Async().block();
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> get301Async(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(get301Async(), serviceCallback);
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<HttpRedirectsGet301Response> get301WithRestResponseAsync() {
        return service.get301();
    }

    /**
     * Return 301 status code and redirect to /http/success/200.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> get301Async() {
        return get301WithRestResponseAsync()
            .flatMap((HttpRedirectsGet301Response res) -> Mono.just(res.body()));
    }

    /**
     * Put true Boolean value in request returns 301.  This request should not be automatically redirected, but should return the received 301 to the caller for evaluation.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void put301() {
        put301Async().block();
    }

    /**
     * Put true Boolean value in request returns 301.  This request should not be automatically redirected, but should return the received 301 to the caller for evaluation.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> put301Async(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(put301Async(), serviceCallback);
    }

    /**
     * Put true Boolean value in request returns 301.  This request should not be automatically redirected, but should return the received 301 to the caller for evaluation.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<HttpRedirectsPut301Response> put301WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.put301(booleanValue);
    }

    /**
     * Put true Boolean value in request returns 301.  This request should not be automatically redirected, but should return the received 301 to the caller for evaluation.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> put301Async() {
        return put301WithRestResponseAsync()
            .flatMap((HttpRedirectsPut301Response res) -> Mono.just(res.body()));
    }

    /**
     * Put true Boolean value in request returns 301.  This request should not be automatically redirected, but should return the received 301 to the caller for evaluation.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void put301(Boolean booleanValue) {
        put301Async(booleanValue).block();
    }

    /**
     * Put true Boolean value in request returns 301.  This request should not be automatically redirected, but should return the received 301 to the caller for evaluation.
     *
     * @param booleanValue Simple boolean value true.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> put301Async(Boolean booleanValue, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(put301Async(booleanValue), serviceCallback);
    }

    /**
     * Put true Boolean value in request returns 301.  This request should not be automatically redirected, but should return the received 301 to the caller for evaluation.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<HttpRedirectsPut301Response> put301WithRestResponseAsync(Boolean booleanValue) {
        return service.put301(booleanValue);
    }

    /**
     * Put true Boolean value in request returns 301.  This request should not be automatically redirected, but should return the received 301 to the caller for evaluation.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> put301Async(Boolean booleanValue) {
        return put301WithRestResponseAsync(booleanValue)
            .flatMap((HttpRedirectsPut301Response res) -> Mono.just(res.body()));
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void head302() {
        head302Async().block();
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> head302Async(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(head302Async(), serviceCallback);
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<HttpRedirectsHead302Response> head302WithRestResponseAsync() {
        return service.head302();
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> head302Async() {
        return head302WithRestResponseAsync()
            .flatMap((HttpRedirectsHead302Response res) -> Mono.just(res.body()));
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void get302() {
        get302Async().block();
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> get302Async(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(get302Async(), serviceCallback);
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<HttpRedirectsGet302Response> get302WithRestResponseAsync() {
        return service.get302();
    }

    /**
     * Return 302 status code and redirect to /http/success/200.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> get302Async() {
        return get302WithRestResponseAsync()
            .flatMap((HttpRedirectsGet302Response res) -> Mono.just(res.body()));
    }

    /**
     * Patch true Boolean value in request returns 302.  This request should not be automatically redirected, but should return the received 302 to the caller for evaluation.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void patch302() {
        patch302Async().block();
    }

    /**
     * Patch true Boolean value in request returns 302.  This request should not be automatically redirected, but should return the received 302 to the caller for evaluation.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> patch302Async(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(patch302Async(), serviceCallback);
    }

    /**
     * Patch true Boolean value in request returns 302.  This request should not be automatically redirected, but should return the received 302 to the caller for evaluation.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<HttpRedirectsPatch302Response> patch302WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.patch302(booleanValue);
    }

    /**
     * Patch true Boolean value in request returns 302.  This request should not be automatically redirected, but should return the received 302 to the caller for evaluation.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> patch302Async() {
        return patch302WithRestResponseAsync()
            .flatMap((HttpRedirectsPatch302Response res) -> Mono.just(res.body()));
    }

    /**
     * Patch true Boolean value in request returns 302.  This request should not be automatically redirected, but should return the received 302 to the caller for evaluation.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void patch302(Boolean booleanValue) {
        patch302Async(booleanValue).block();
    }

    /**
     * Patch true Boolean value in request returns 302.  This request should not be automatically redirected, but should return the received 302 to the caller for evaluation.
     *
     * @param booleanValue Simple boolean value true.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> patch302Async(Boolean booleanValue, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(patch302Async(booleanValue), serviceCallback);
    }

    /**
     * Patch true Boolean value in request returns 302.  This request should not be automatically redirected, but should return the received 302 to the caller for evaluation.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<HttpRedirectsPatch302Response> patch302WithRestResponseAsync(Boolean booleanValue) {
        return service.patch302(booleanValue);
    }

    /**
     * Patch true Boolean value in request returns 302.  This request should not be automatically redirected, but should return the received 302 to the caller for evaluation.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> patch302Async(Boolean booleanValue) {
        return patch302WithRestResponseAsync(booleanValue)
            .flatMap((HttpRedirectsPatch302Response res) -> Mono.just(res.body()));
    }

    /**
     * Post true Boolean value in request returns 303.  This request should be automatically redirected usign a get, ultimately returning a 200 status code.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void post303() {
        post303Async().block();
    }

    /**
     * Post true Boolean value in request returns 303.  This request should be automatically redirected usign a get, ultimately returning a 200 status code.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> post303Async(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(post303Async(), serviceCallback);
    }

    /**
     * Post true Boolean value in request returns 303.  This request should be automatically redirected usign a get, ultimately returning a 200 status code.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<HttpRedirectsPost303Response> post303WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.post303(booleanValue);
    }

    /**
     * Post true Boolean value in request returns 303.  This request should be automatically redirected usign a get, ultimately returning a 200 status code.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> post303Async() {
        return post303WithRestResponseAsync()
            .flatMap((HttpRedirectsPost303Response res) -> Mono.just(res.body()));
    }

    /**
     * Post true Boolean value in request returns 303.  This request should be automatically redirected usign a get, ultimately returning a 200 status code.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void post303(Boolean booleanValue) {
        post303Async(booleanValue).block();
    }

    /**
     * Post true Boolean value in request returns 303.  This request should be automatically redirected usign a get, ultimately returning a 200 status code.
     *
     * @param booleanValue Simple boolean value true.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> post303Async(Boolean booleanValue, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(post303Async(booleanValue), serviceCallback);
    }

    /**
     * Post true Boolean value in request returns 303.  This request should be automatically redirected usign a get, ultimately returning a 200 status code.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<HttpRedirectsPost303Response> post303WithRestResponseAsync(Boolean booleanValue) {
        return service.post303(booleanValue);
    }

    /**
     * Post true Boolean value in request returns 303.  This request should be automatically redirected usign a get, ultimately returning a 200 status code.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> post303Async(Boolean booleanValue) {
        return post303WithRestResponseAsync(booleanValue)
            .flatMap((HttpRedirectsPost303Response res) -> Mono.just(res.body()));
    }

    /**
     * Redirect with 307, resulting in a 200 success.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void head307() {
        head307Async().block();
    }

    /**
     * Redirect with 307, resulting in a 200 success.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> head307Async(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(head307Async(), serviceCallback);
    }

    /**
     * Redirect with 307, resulting in a 200 success.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<HttpRedirectsHead307Response> head307WithRestResponseAsync() {
        return service.head307();
    }

    /**
     * Redirect with 307, resulting in a 200 success.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> head307Async() {
        return head307WithRestResponseAsync()
            .flatMap((HttpRedirectsHead307Response res) -> Mono.just(res.body()));
    }

    /**
     * Redirect get with 307, resulting in a 200 success.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void get307() {
        get307Async().block();
    }

    /**
     * Redirect get with 307, resulting in a 200 success.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> get307Async(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(get307Async(), serviceCallback);
    }

    /**
     * Redirect get with 307, resulting in a 200 success.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<HttpRedirectsGet307Response> get307WithRestResponseAsync() {
        return service.get307();
    }

    /**
     * Redirect get with 307, resulting in a 200 success.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> get307Async() {
        return get307WithRestResponseAsync()
            .flatMap((HttpRedirectsGet307Response res) -> Mono.just(res.body()));
    }

    /**
     * Put redirected with 307, resulting in a 200 after redirect.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void put307() {
        put307Async().block();
    }

    /**
     * Put redirected with 307, resulting in a 200 after redirect.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> put307Async(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(put307Async(), serviceCallback);
    }

    /**
     * Put redirected with 307, resulting in a 200 after redirect.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<HttpRedirectsPut307Response> put307WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.put307(booleanValue);
    }

    /**
     * Put redirected with 307, resulting in a 200 after redirect.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> put307Async() {
        return put307WithRestResponseAsync()
            .flatMap((HttpRedirectsPut307Response res) -> Mono.just(res.body()));
    }

    /**
     * Put redirected with 307, resulting in a 200 after redirect.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void put307(Boolean booleanValue) {
        put307Async(booleanValue).block();
    }

    /**
     * Put redirected with 307, resulting in a 200 after redirect.
     *
     * @param booleanValue Simple boolean value true.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> put307Async(Boolean booleanValue, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(put307Async(booleanValue), serviceCallback);
    }

    /**
     * Put redirected with 307, resulting in a 200 after redirect.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<HttpRedirectsPut307Response> put307WithRestResponseAsync(Boolean booleanValue) {
        return service.put307(booleanValue);
    }

    /**
     * Put redirected with 307, resulting in a 200 after redirect.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> put307Async(Boolean booleanValue) {
        return put307WithRestResponseAsync(booleanValue)
            .flatMap((HttpRedirectsPut307Response res) -> Mono.just(res.body()));
    }

    /**
     * Patch redirected with 307, resulting in a 200 after redirect.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void patch307() {
        patch307Async().block();
    }

    /**
     * Patch redirected with 307, resulting in a 200 after redirect.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> patch307Async(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(patch307Async(), serviceCallback);
    }

    /**
     * Patch redirected with 307, resulting in a 200 after redirect.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<HttpRedirectsPatch307Response> patch307WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.patch307(booleanValue);
    }

    /**
     * Patch redirected with 307, resulting in a 200 after redirect.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> patch307Async() {
        return patch307WithRestResponseAsync()
            .flatMap((HttpRedirectsPatch307Response res) -> Mono.just(res.body()));
    }

    /**
     * Patch redirected with 307, resulting in a 200 after redirect.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void patch307(Boolean booleanValue) {
        patch307Async(booleanValue).block();
    }

    /**
     * Patch redirected with 307, resulting in a 200 after redirect.
     *
     * @param booleanValue Simple boolean value true.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> patch307Async(Boolean booleanValue, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(patch307Async(booleanValue), serviceCallback);
    }

    /**
     * Patch redirected with 307, resulting in a 200 after redirect.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<HttpRedirectsPatch307Response> patch307WithRestResponseAsync(Boolean booleanValue) {
        return service.patch307(booleanValue);
    }

    /**
     * Patch redirected with 307, resulting in a 200 after redirect.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> patch307Async(Boolean booleanValue) {
        return patch307WithRestResponseAsync(booleanValue)
            .flatMap((HttpRedirectsPatch307Response res) -> Mono.just(res.body()));
    }

    /**
     * Post redirected with 307, resulting in a 200 after redirect.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void post307() {
        post307Async().block();
    }

    /**
     * Post redirected with 307, resulting in a 200 after redirect.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> post307Async(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(post307Async(), serviceCallback);
    }

    /**
     * Post redirected with 307, resulting in a 200 after redirect.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<HttpRedirectsPost307Response> post307WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.post307(booleanValue);
    }

    /**
     * Post redirected with 307, resulting in a 200 after redirect.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> post307Async() {
        return post307WithRestResponseAsync()
            .flatMap((HttpRedirectsPost307Response res) -> Mono.just(res.body()));
    }

    /**
     * Post redirected with 307, resulting in a 200 after redirect.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void post307(Boolean booleanValue) {
        post307Async(booleanValue).block();
    }

    /**
     * Post redirected with 307, resulting in a 200 after redirect.
     *
     * @param booleanValue Simple boolean value true.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> post307Async(Boolean booleanValue, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(post307Async(booleanValue), serviceCallback);
    }

    /**
     * Post redirected with 307, resulting in a 200 after redirect.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<HttpRedirectsPost307Response> post307WithRestResponseAsync(Boolean booleanValue) {
        return service.post307(booleanValue);
    }

    /**
     * Post redirected with 307, resulting in a 200 after redirect.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> post307Async(Boolean booleanValue) {
        return post307WithRestResponseAsync(booleanValue)
            .flatMap((HttpRedirectsPost307Response res) -> Mono.just(res.body()));
    }

    /**
     * Delete redirected with 307, resulting in a 200 after redirect.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void delete307() {
        delete307Async().block();
    }

    /**
     * Delete redirected with 307, resulting in a 200 after redirect.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> delete307Async(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(delete307Async(), serviceCallback);
    }

    /**
     * Delete redirected with 307, resulting in a 200 after redirect.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<HttpRedirectsDelete307Response> delete307WithRestResponseAsync() {
        final Boolean booleanValue = null;
        return service.delete307(booleanValue);
    }

    /**
     * Delete redirected with 307, resulting in a 200 after redirect.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> delete307Async() {
        return delete307WithRestResponseAsync()
            .flatMap((HttpRedirectsDelete307Response res) -> Mono.just(res.body()));
    }

    /**
     * Delete redirected with 307, resulting in a 200 after redirect.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void delete307(Boolean booleanValue) {
        delete307Async(booleanValue).block();
    }

    /**
     * Delete redirected with 307, resulting in a 200 after redirect.
     *
     * @param booleanValue Simple boolean value true.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> delete307Async(Boolean booleanValue, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(delete307Async(booleanValue), serviceCallback);
    }

    /**
     * Delete redirected with 307, resulting in a 200 after redirect.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<HttpRedirectsDelete307Response> delete307WithRestResponseAsync(Boolean booleanValue) {
        return service.delete307(booleanValue);
    }

    /**
     * Delete redirected with 307, resulting in a 200 after redirect.
     *
     * @param booleanValue Simple boolean value true.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> delete307Async(Boolean booleanValue) {
        return delete307WithRestResponseAsync(booleanValue)
            .flatMap((HttpRedirectsDelete307Response res) -> Mono.just(res.body()));
    }
}
