/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.custombaseuri.implementation;

import com.microsoft.rest.v3.RestProxy;
import com.microsoft.rest.v3.ServiceCallback;
import com.microsoft.rest.v3.ServiceFuture;
import com.microsoft.rest.v3.VoidResponse;
import com.microsoft.rest.v3.annotations.ExpectedResponses;
import com.microsoft.rest.v3.annotations.GET;
import com.microsoft.rest.v3.annotations.Host;
import com.microsoft.rest.v3.annotations.HostParam;
import com.microsoft.rest.v3.annotations.UnexpectedResponseExceptionType;
import fixtures.custombaseuri.Paths;
import fixtures.custombaseuri.models.ErrorException;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * Paths.
 */
public final class PathsImpl implements Paths {
    /**
     * The proxy service used to perform REST calls.
     */
    private PathsService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestParameterizedHostTestClientImpl client;

    /**
     * Initializes an instance of PathsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public PathsImpl(AutoRestParameterizedHostTestClientImpl client) {
        this.service = RestProxy.create(PathsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Paths to be used by the
     * proxy service to perform REST calls.
     */
    @Host("http://{accountName}{host}")
    private interface PathsService {
        @GET("customuri")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> getEmpty(@HostParam("accountName") String accountName, @HostParam("host") String host);
    }

    /**
     * Get a 200 to test a valid base uri.
     *
     * @param accountName Account Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void getEmpty(@NonNull String accountName) {
        getEmptyAsync(accountName).block();
    }

    /**
     * Get a 200 to test a valid base uri.
     *
     * @param accountName Account Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> getEmptyAsync(@NonNull String accountName, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(getEmptyAsync(accountName), serviceCallback);
    }

    /**
     * Get a 200 to test a valid base uri.
     *
     * @param accountName Account Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<VoidResponse> getEmptyWithRestResponseAsync(@NonNull String accountName) {
        if (accountName == null) {
            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
        }
        if (this.client.host() == null) {
            throw new IllegalArgumentException("Parameter this.client.host() is required and cannot be null.");
        }
        return service.getEmpty(accountName, this.client.host());
    }

    /**
     * Get a 200 to test a valid base uri.
     *
     * @param accountName Account Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> getEmptyAsync(@NonNull String accountName) {
        return getEmptyWithRestResponseAsync(accountName)
            .flatMap((VoidResponse res) -> Mono.just(res.body()));
    }
}
