/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodyinteger;

import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.VoidResponse;
import fixtures.bodyinteger.models.ErrorException;
import io.reactivex.Completable;
import io.reactivex.Maybe;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;
import org.joda.time.DateTime;

/**
 * An instance of this class provides access to all the operations defined in
 * Ints.
 */
public interface Ints {
    /**
     * Get null Int value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the int object if successful.
     */
    int getNull();

    /**
     * Get null Int value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<Integer> getNullAsync(ServiceCallback<Integer> serviceCallback);

    /**
     * Get null Int value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Single<BodyResponse<Integer>> getNullWithRestResponseAsync();

    /**
     * Get null Int value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Maybe<Integer> getNullAsync();

    /**
     * Get invalid Int value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the int object if successful.
     */
    int getInvalid();

    /**
     * Get invalid Int value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<Integer> getInvalidAsync(ServiceCallback<Integer> serviceCallback);

    /**
     * Get invalid Int value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Single<BodyResponse<Integer>> getInvalidWithRestResponseAsync();

    /**
     * Get invalid Int value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Maybe<Integer> getInvalidAsync();

    /**
     * Get overflow Int32 value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the int object if successful.
     */
    int getOverflowInt32();

    /**
     * Get overflow Int32 value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<Integer> getOverflowInt32Async(ServiceCallback<Integer> serviceCallback);

    /**
     * Get overflow Int32 value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Single<BodyResponse<Integer>> getOverflowInt32WithRestResponseAsync();

    /**
     * Get overflow Int32 value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Maybe<Integer> getOverflowInt32Async();

    /**
     * Get underflow Int32 value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the int object if successful.
     */
    int getUnderflowInt32();

    /**
     * Get underflow Int32 value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<Integer> getUnderflowInt32Async(ServiceCallback<Integer> serviceCallback);

    /**
     * Get underflow Int32 value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Single<BodyResponse<Integer>> getUnderflowInt32WithRestResponseAsync();

    /**
     * Get underflow Int32 value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Maybe<Integer> getUnderflowInt32Async();

    /**
     * Get overflow Int64 value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the long object if successful.
     */
    long getOverflowInt64();

    /**
     * Get overflow Int64 value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<Long> getOverflowInt64Async(ServiceCallback<Long> serviceCallback);

    /**
     * Get overflow Int64 value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Single<BodyResponse<Long>> getOverflowInt64WithRestResponseAsync();

    /**
     * Get overflow Int64 value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Maybe<Long> getOverflowInt64Async();

    /**
     * Get underflow Int64 value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the long object if successful.
     */
    long getUnderflowInt64();

    /**
     * Get underflow Int64 value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<Long> getUnderflowInt64Async(ServiceCallback<Long> serviceCallback);

    /**
     * Get underflow Int64 value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Single<BodyResponse<Long>> getUnderflowInt64WithRestResponseAsync();

    /**
     * Get underflow Int64 value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Maybe<Long> getUnderflowInt64Async();

    /**
     * Put max int32 value.
     *
     * @param intBody the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void putMax32(@NonNull int intBody);

    /**
     * Put max int32 value.
     *
     * @param intBody the int value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<Void> putMax32Async(@NonNull int intBody, ServiceCallback<Void> serviceCallback);

    /**
     * Put max int32 value.
     *
     * @param intBody the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    Single<VoidResponse> putMax32WithRestResponseAsync(@NonNull int intBody);

    /**
     * Put max int32 value.
     *
     * @param intBody the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    Completable putMax32Async(@NonNull int intBody);

    /**
     * Put max int64 value.
     *
     * @param intBody the long value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void putMax64(@NonNull long intBody);

    /**
     * Put max int64 value.
     *
     * @param intBody the long value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<Void> putMax64Async(@NonNull long intBody, ServiceCallback<Void> serviceCallback);

    /**
     * Put max int64 value.
     *
     * @param intBody the long value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    Single<VoidResponse> putMax64WithRestResponseAsync(@NonNull long intBody);

    /**
     * Put max int64 value.
     *
     * @param intBody the long value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    Completable putMax64Async(@NonNull long intBody);

    /**
     * Put min int32 value.
     *
     * @param intBody the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void putMin32(@NonNull int intBody);

    /**
     * Put min int32 value.
     *
     * @param intBody the int value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<Void> putMin32Async(@NonNull int intBody, ServiceCallback<Void> serviceCallback);

    /**
     * Put min int32 value.
     *
     * @param intBody the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    Single<VoidResponse> putMin32WithRestResponseAsync(@NonNull int intBody);

    /**
     * Put min int32 value.
     *
     * @param intBody the int value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    Completable putMin32Async(@NonNull int intBody);

    /**
     * Put min int64 value.
     *
     * @param intBody the long value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void putMin64(@NonNull long intBody);

    /**
     * Put min int64 value.
     *
     * @param intBody the long value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<Void> putMin64Async(@NonNull long intBody, ServiceCallback<Void> serviceCallback);

    /**
     * Put min int64 value.
     *
     * @param intBody the long value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    Single<VoidResponse> putMin64WithRestResponseAsync(@NonNull long intBody);

    /**
     * Put min int64 value.
     *
     * @param intBody the long value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    Completable putMin64Async(@NonNull long intBody);

    /**
     * Get datetime encoded as Unix time value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DateTime object if successful.
     */
    DateTime getUnixTime();

    /**
     * Get datetime encoded as Unix time value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<DateTime> getUnixTimeAsync(ServiceCallback<DateTime> serviceCallback);

    /**
     * Get datetime encoded as Unix time value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Single<BodyResponse<DateTime>> getUnixTimeWithRestResponseAsync();

    /**
     * Get datetime encoded as Unix time value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Maybe<DateTime> getUnixTimeAsync();

    /**
     * Put datetime encoded as Unix time.
     *
     * @param intBody the DateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void putUnixTimeDate(@NonNull DateTime intBody);

    /**
     * Put datetime encoded as Unix time.
     *
     * @param intBody the DateTime value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<Void> putUnixTimeDateAsync(@NonNull DateTime intBody, ServiceCallback<Void> serviceCallback);

    /**
     * Put datetime encoded as Unix time.
     *
     * @param intBody the DateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    Single<VoidResponse> putUnixTimeDateWithRestResponseAsync(@NonNull DateTime intBody);

    /**
     * Put datetime encoded as Unix time.
     *
     * @param intBody the DateTime value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    Completable putUnixTimeDateAsync(@NonNull DateTime intBody);

    /**
     * Get invalid Unix time value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DateTime object if successful.
     */
    DateTime getInvalidUnixTime();

    /**
     * Get invalid Unix time value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<DateTime> getInvalidUnixTimeAsync(ServiceCallback<DateTime> serviceCallback);

    /**
     * Get invalid Unix time value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Single<BodyResponse<DateTime>> getInvalidUnixTimeWithRestResponseAsync();

    /**
     * Get invalid Unix time value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Maybe<DateTime> getInvalidUnixTimeAsync();

    /**
     * Get null Unix time value.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DateTime object if successful.
     */
    DateTime getNullUnixTime();

    /**
     * Get null Unix time value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<DateTime> getNullUnixTimeAsync(ServiceCallback<DateTime> serviceCallback);

    /**
     * Get null Unix time value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Single<BodyResponse<DateTime>> getNullUnixTimeWithRestResponseAsync();

    /**
     * Get null Unix time value.
     *
     * @return a Single which performs the network request upon subscription.
     */
    Maybe<DateTime> getNullUnixTimeAsync();
}
