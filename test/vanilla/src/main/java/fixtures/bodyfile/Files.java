/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodyfile;

import com.microsoft.rest.v3.ServiceCallback;
import com.microsoft.rest.v3.ServiceFuture;
import com.microsoft.rest.v3.StreamResponse;
import fixtures.bodyfile.models.ErrorException;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * Files.
 */
public interface Files {
    /**
     * Get file.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Flux&lt;ByteBuffer&gt; object if successful.
     */
    Flux<ByteBuffer> getFile();

    /**
     * Get file.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<Flux<ByteBuffer>> getFileAsync(ServiceCallback<Flux<ByteBuffer>> serviceCallback);

    /**
     * Get file.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<StreamResponse> getFileWithRestResponseAsync();

    /**
     * Get file.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Flux<ByteBuffer>> getFileAsync();

    /**
     * Get a large file.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Flux&lt;ByteBuffer&gt; object if successful.
     */
    Flux<ByteBuffer> getFileLarge();

    /**
     * Get a large file.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<Flux<ByteBuffer>> getFileLargeAsync(ServiceCallback<Flux<ByteBuffer>> serviceCallback);

    /**
     * Get a large file.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<StreamResponse> getFileLargeWithRestResponseAsync();

    /**
     * Get a large file.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Flux<ByteBuffer>> getFileLargeAsync();

    /**
     * Get empty file.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Flux&lt;ByteBuffer&gt; object if successful.
     */
    Flux<ByteBuffer> getEmptyFile();

    /**
     * Get empty file.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    ServiceFuture<Flux<ByteBuffer>> getEmptyFileAsync(ServiceCallback<Flux<ByteBuffer>> serviceCallback);

    /**
     * Get empty file.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<StreamResponse> getEmptyFileWithRestResponseAsync();

    /**
     * Get empty file.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    Mono<Flux<ByteBuffer>> getEmptyFileAsync();
}
