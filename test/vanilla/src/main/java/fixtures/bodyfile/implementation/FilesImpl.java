/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodyfile.implementation;

import com.google.common.reflect.TypeToken;
import com.microsoft.rest.v2.RestProxy;
import com.microsoft.rest.v2.RestResponse;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.Headers;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import com.microsoft.rest.v2.http.HttpClient;
import fixtures.bodyfile.Files;
import fixtures.bodyfile.models.ErrorException;
import io.reactivex.Flowable;
import io.reactivex.Maybe;
import io.reactivex.Observable;
import io.reactivex.Single;
import io.reactivex.functions.Function;
import java.io.IOException;

/**
 * An instance of this class provides access to all the operations defined in
 * Files.
 */
public class FilesImpl implements Files {
    /**
     * The proxy service used to perform REST calls.
     */
    private FilesService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestSwaggerBATFileServiceImpl client;

    /**
     * Initializes an instance of FilesImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public FilesImpl(AutoRestSwaggerBATFileServiceImpl client) {
        this.service = RestProxy.create(FilesService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Files to be used by the
     * proxy service to perform REST calls.
     */
    @Host("http://localhost:3000")
    interface FilesService {
        @GET("files/stream/nonempty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Flowable<byte[]>>> getFile();

        @GET("files/stream/verylarge")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Flowable<byte[]>>> getFileLarge();

        @GET("files/stream/empty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Single<RestResponse<Void, Flowable<byte[]>>> getEmptyFile();
    }

    /**
     * Get file.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Flowable&lt;byte[]&gt; object if successful.
     */
    public Flowable<byte[]> getFile() {
        return getFileAsync().blockingGet();
    }

    /**
     * Get file.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Flowable&lt;byte[]&gt;&gt;} object.
     */
    public ServiceFuture<Flowable<byte[]>> getFileAsync(final ServiceCallback<Flowable<byte[]>> serviceCallback) {
        return ServiceFuture.fromBody(getFileAsync(), serviceCallback);
    }

    /**
     * Get file.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;RestResponse&lt;Void, Flowable&lt;byte[]&gt;&gt;&gt;} object if successful.
     */
    public Single<RestResponse<Void, Flowable<byte[]>>> getFileWithRestResponseAsync() {
        return service.getFile();
    }

    /**
     * Get file.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Maybe&lt;Flowable&lt;byte[]&gt;&gt;} object if successful.
     */
    public Maybe<Flowable<byte[]>> getFileAsync() {
        return getFileWithRestResponseAsync()
            .flatMapMaybe(new Function<RestResponse<Void, Flowable<byte[]>>, Maybe<Flowable<byte[]>>>() {
                public Maybe<Flowable<byte[]>> apply(RestResponse<Void, Flowable<byte[]>> restResponse) {
                    if (restResponse.body() == null) {
                        return Maybe.empty();
                    } else {
                        return Maybe.just(restResponse.body());
                    }
                }
            });
    }

    /**
     * Get a large file.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Flowable&lt;byte[]&gt; object if successful.
     */
    public Flowable<byte[]> getFileLarge() {
        return getFileLargeAsync().blockingGet();
    }

    /**
     * Get a large file.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Flowable&lt;byte[]&gt;&gt;} object.
     */
    public ServiceFuture<Flowable<byte[]>> getFileLargeAsync(final ServiceCallback<Flowable<byte[]>> serviceCallback) {
        return ServiceFuture.fromBody(getFileLargeAsync(), serviceCallback);
    }

    /**
     * Get a large file.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;RestResponse&lt;Void, Flowable&lt;byte[]&gt;&gt;&gt;} object if successful.
     */
    public Single<RestResponse<Void, Flowable<byte[]>>> getFileLargeWithRestResponseAsync() {
        return service.getFileLarge();
    }

    /**
     * Get a large file.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Maybe&lt;Flowable&lt;byte[]&gt;&gt;} object if successful.
     */
    public Maybe<Flowable<byte[]>> getFileLargeAsync() {
        return getFileLargeWithRestResponseAsync()
            .flatMapMaybe(new Function<RestResponse<Void, Flowable<byte[]>>, Maybe<Flowable<byte[]>>>() {
                public Maybe<Flowable<byte[]>> apply(RestResponse<Void, Flowable<byte[]>> restResponse) {
                    if (restResponse.body() == null) {
                        return Maybe.empty();
                    } else {
                        return Maybe.just(restResponse.body());
                    }
                }
            });
    }

    /**
     * Get empty file.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Flowable&lt;byte[]&gt; object if successful.
     */
    public Flowable<byte[]> getEmptyFile() {
        return getEmptyFileAsync().blockingGet();
    }

    /**
     * Get empty file.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Flowable&lt;byte[]&gt;&gt;} object.
     */
    public ServiceFuture<Flowable<byte[]>> getEmptyFileAsync(final ServiceCallback<Flowable<byte[]>> serviceCallback) {
        return ServiceFuture.fromBody(getEmptyFileAsync(), serviceCallback);
    }

    /**
     * Get empty file.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;RestResponse&lt;Void, Flowable&lt;byte[]&gt;&gt;&gt;} object if successful.
     */
    public Single<RestResponse<Void, Flowable<byte[]>>> getEmptyFileWithRestResponseAsync() {
        return service.getEmptyFile();
    }

    /**
     * Get empty file.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Maybe&lt;Flowable&lt;byte[]&gt;&gt;} object if successful.
     */
    public Maybe<Flowable<byte[]>> getEmptyFileAsync() {
        return getEmptyFileWithRestResponseAsync()
            .flatMapMaybe(new Function<RestResponse<Void, Flowable<byte[]>>, Maybe<Flowable<byte[]>>>() {
                public Maybe<Flowable<byte[]>> apply(RestResponse<Void, Flowable<byte[]>> restResponse) {
                    if (restResponse.body() == null) {
                        return Maybe.empty();
                    } else {
                        return Maybe.just(restResponse.body());
                    }
                }
            });
    }
}
