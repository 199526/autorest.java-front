/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.javaversion7.implementation;

import com.microsoft.azure.v2.AzureProxy;
import com.microsoft.azure.v2.CloudException;
import com.microsoft.azure.v2.Page;
import com.microsoft.azure.v2.PagedList;
import com.microsoft.rest.v2.RestResponse;
import com.microsoft.rest.v2.Validator;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.HeaderParam;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PathParam;
import com.microsoft.rest.v2.annotations.QueryParam;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import fixtures.javaversion7.Pagings;
import fixtures.javaversion7.models.CustomParameterGroup;
import fixtures.javaversion7.models.PageImpl;
import fixtures.javaversion7.models.PageImpl1;
import fixtures.javaversion7.models.PagingGetMultiplePagesOptions;
import fixtures.javaversion7.models.PagingGetMultiplePagesWithOffsetNextOptions;
import fixtures.javaversion7.models.PagingGetMultiplePagesWithOffsetOptions;
import fixtures.javaversion7.models.PagingGetOdataMultiplePagesOptions;
import fixtures.javaversion7.models.Product;
import io.reactivex.Observable;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;
import io.reactivex.functions.Function;

/**
 * An instance of this class provides access to all the operations defined in
 * Pagings.
 */
public final class PagingsImpl implements Pagings {
    /**
     * The proxy service used to perform REST calls.
     */
    private PagingsService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestPagingTestServiceImpl client;

    /**
     * Initializes an instance of PagingsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public PagingsImpl(AutoRestPagingTestServiceImpl client) {
        this.service = AzureProxy.create(PagingsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Pagings to be used by the
     * proxy service to perform REST calls.
     */
    @Host("http://localhost:3000")
    private interface PagingsService {
        @GET("paging/single")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl<Product>>> getSinglePages(@HeaderParam("accept-language") String acceptLanguage);

        @GET("paging/multiple")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl<Product>>> getMultiplePages(@HeaderParam("client-request-id") String clientRequestId, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("maxresults") Integer maxresults, @HeaderParam("timeout") Integer timeout);

        @GET("paging/multiple/odata")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl1<Product>>> getOdataMultiplePages(@HeaderParam("client-request-id") String clientRequestId, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("maxresults") Integer maxresults, @HeaderParam("timeout") Integer timeout);

        @GET("paging/multiple/withpath/{offset}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl<Product>>> getMultiplePagesWithOffset(@PathParam("offset") int offset, @HeaderParam("client-request-id") String clientRequestId, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("maxresults") Integer maxresults, @HeaderParam("timeout") Integer timeout);

        @GET("paging/multiple/retryfirst")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl<Product>>> getMultiplePagesRetryFirst(@HeaderParam("accept-language") String acceptLanguage);

        @GET("paging/multiple/retrysecond")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl<Product>>> getMultiplePagesRetrySecond(@HeaderParam("accept-language") String acceptLanguage);

        @GET("paging/single/failure")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl<Product>>> getSinglePagesFailure(@HeaderParam("accept-language") String acceptLanguage);

        @GET("paging/multiple/failure")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl<Product>>> getMultiplePagesFailure(@HeaderParam("accept-language") String acceptLanguage);

        @GET("paging/multiple/failureuri")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl<Product>>> getMultiplePagesFailureUri(@HeaderParam("accept-language") String acceptLanguage);

        @GET("paging/multiple/fragment/{tenant}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl1<Product>>> getMultiplePagesFragmentNextLink(@PathParam("tenant") String tenant, @QueryParam("api_version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("paging/multiple/fragmentwithgrouping/{tenant}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl1<Product>>> getMultiplePagesFragmentWithGroupingNextLink(@PathParam("tenant") String tenant, @HeaderParam("accept-language") String acceptLanguage, @QueryParam("api_version") String apiVersion);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl1<Product>>> nextFragment(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @QueryParam("api_version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl1<Product>>> nextFragmentWithGrouping(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage, @QueryParam("api_version") String apiVersion);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl<Product>>> getSinglePagesNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl<Product>>> getMultiplePagesNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("client-request-id") String clientRequestId, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("maxresults") Integer maxresults, @HeaderParam("timeout") Integer timeout);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl1<Product>>> getOdataMultiplePagesNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("client-request-id") String clientRequestId, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("maxresults") Integer maxresults, @HeaderParam("timeout") Integer timeout);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl<Product>>> getMultiplePagesWithOffsetNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("client-request-id") String clientRequestId, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("maxresults") Integer maxresults, @HeaderParam("timeout") Integer timeout);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl<Product>>> getMultiplePagesRetryFirstNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl<Product>>> getMultiplePagesRetrySecondNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl<Product>>> getSinglePagesFailureNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl<Product>>> getMultiplePagesFailureNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl<Product>>> getMultiplePagesFailureUriNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getSinglePages() {
        Page<Product> response = getSinglePagesSinglePageAsync().blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getSinglePagesNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getSinglePagesAsync() {
        return getSinglePagesSinglePageAsync()
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getSinglePagesNextAsync(nextPageLink));
                }
            });
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getSinglePagesSinglePageAsync() {
        return service.getSinglePages(this.client.acceptLanguage()).map(new Function<RestResponse<Void, PageImpl<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getMultiplePages() {
        Page<Product> response = getMultiplePagesSinglePageAsync().blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesNextSinglePageAsync(nextPageLink, null, null).blockingGet();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getMultiplePagesAsync() {
        return getMultiplePagesSinglePageAsync()
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getMultiplePagesNextAsync(nextPageLink, null, null));
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getMultiplePagesSinglePageAsync() {
        final String clientRequestId = null;
        final PagingGetMultiplePagesOptions pagingGetMultiplePagesOptions = null;
        Integer maxresults = null;
        Integer timeout = null;
        return service.getMultiplePages(clientRequestId, this.client.acceptLanguage(), maxresults, timeout).map(new Function<RestResponse<Void, PageImpl<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getMultiplePages(final String clientRequestId, final PagingGetMultiplePagesOptions pagingGetMultiplePagesOptions) {
        Page<Product> response = getMultiplePagesSinglePageAsync(clientRequestId, pagingGetMultiplePagesOptions).blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesOptions).blockingGet();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getMultiplePagesAsync(final String clientRequestId, final PagingGetMultiplePagesOptions pagingGetMultiplePagesOptions) {
        return getMultiplePagesSinglePageAsync(clientRequestId, pagingGetMultiplePagesOptions)
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getMultiplePagesNextAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesOptions));
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getMultiplePagesSinglePageAsync(final String clientRequestId, final PagingGetMultiplePagesOptions pagingGetMultiplePagesOptions) {
        Validator.validate(pagingGetMultiplePagesOptions);
        Integer maxresults = null;
        if (pagingGetMultiplePagesOptions != null) {
            maxresults = pagingGetMultiplePagesOptions.maxresults();
        }
        Integer timeout = null;
        if (pagingGetMultiplePagesOptions != null) {
            timeout = pagingGetMultiplePagesOptions.timeout();
        }
        return service.getMultiplePages(clientRequestId, this.client.acceptLanguage(), maxresults, timeout).map(new Function<RestResponse<Void, PageImpl<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getOdataMultiplePages() {
        Page<Product> response = getOdataMultiplePagesSinglePageAsync().blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, null, null).blockingGet();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getOdataMultiplePagesAsync() {
        return getOdataMultiplePagesSinglePageAsync()
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getOdataMultiplePagesNextAsync(nextPageLink, null, null));
                }
            });
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getOdataMultiplePagesSinglePageAsync() {
        final String clientRequestId = null;
        final PagingGetOdataMultiplePagesOptions pagingGetOdataMultiplePagesOptions = null;
        Integer maxresults = null;
        Integer timeout = null;
        return service.getOdataMultiplePages(clientRequestId, this.client.acceptLanguage(), maxresults, timeout).map(new Function<RestResponse<Void, PageImpl1<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl1<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getOdataMultiplePages(final String clientRequestId, final PagingGetOdataMultiplePagesOptions pagingGetOdataMultiplePagesOptions) {
        Page<Product> response = getOdataMultiplePagesSinglePageAsync(clientRequestId, pagingGetOdataMultiplePagesOptions).blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetOdataMultiplePagesOptions).blockingGet();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getOdataMultiplePagesAsync(final String clientRequestId, final PagingGetOdataMultiplePagesOptions pagingGetOdataMultiplePagesOptions) {
        return getOdataMultiplePagesSinglePageAsync(clientRequestId, pagingGetOdataMultiplePagesOptions)
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getOdataMultiplePagesNextAsync(nextPageLink, clientRequestId, pagingGetOdataMultiplePagesOptions));
                }
            });
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getOdataMultiplePagesSinglePageAsync(final String clientRequestId, final PagingGetOdataMultiplePagesOptions pagingGetOdataMultiplePagesOptions) {
        Validator.validate(pagingGetOdataMultiplePagesOptions);
        Integer maxresults = null;
        if (pagingGetOdataMultiplePagesOptions != null) {
            maxresults = pagingGetOdataMultiplePagesOptions.maxresults();
        }
        Integer timeout = null;
        if (pagingGetOdataMultiplePagesOptions != null) {
            timeout = pagingGetOdataMultiplePagesOptions.timeout();
        }
        return service.getOdataMultiplePages(clientRequestId, this.client.acceptLanguage(), maxresults, timeout).map(new Function<RestResponse<Void, PageImpl1<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl1<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getMultiplePagesWithOffset(@NonNull final PagingGetMultiplePagesWithOffsetOptions pagingGetMultiplePagesWithOffsetOptions) {
        Page<Product> response = getMultiplePagesWithOffsetSinglePageAsync(pagingGetMultiplePagesWithOffsetOptions).blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                PagingGetMultiplePagesWithOffsetNextOptions pagingGetMultiplePagesWithOffsetNextOptions = new PagingGetMultiplePagesWithOffsetNextOptions();
                pagingGetMultiplePagesWithOffsetNextOptions.withMaxresults(pagingGetMultiplePagesWithOffsetOptions.maxresults());
                pagingGetMultiplePagesWithOffsetNextOptions.withTimeout(pagingGetMultiplePagesWithOffsetOptions.timeout());
                return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, null, pagingGetMultiplePagesWithOffsetNextOptions).blockingGet();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getMultiplePagesWithOffsetAsync(@NonNull final PagingGetMultiplePagesWithOffsetOptions pagingGetMultiplePagesWithOffsetOptions) {
        return getMultiplePagesWithOffsetSinglePageAsync(pagingGetMultiplePagesWithOffsetOptions)
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    PagingGetMultiplePagesWithOffsetNextOptions pagingGetMultiplePagesWithOffsetNextOptions = new PagingGetMultiplePagesWithOffsetNextOptions();
                    pagingGetMultiplePagesWithOffsetNextOptions.withMaxresults(pagingGetMultiplePagesWithOffsetOptions.maxresults());
                    pagingGetMultiplePagesWithOffsetNextOptions.withTimeout(pagingGetMultiplePagesWithOffsetOptions.timeout());
                    return Observable.just(page).concatWith(getMultiplePagesWithOffsetNextAsync(nextPageLink, null, pagingGetMultiplePagesWithOffsetNextOptions));
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getMultiplePagesWithOffsetSinglePageAsync(@NonNull final PagingGetMultiplePagesWithOffsetOptions pagingGetMultiplePagesWithOffsetOptions) {
        if (pagingGetMultiplePagesWithOffsetOptions == null) {
            throw new IllegalArgumentException("Parameter pagingGetMultiplePagesWithOffsetOptions is required and cannot be null.");
        }
        Validator.validate(pagingGetMultiplePagesWithOffsetOptions);
        final String clientRequestId = null;
        Integer maxresults = pagingGetMultiplePagesWithOffsetOptions.maxresults();
        int offset = pagingGetMultiplePagesWithOffsetOptions.offset();
        Integer timeout = pagingGetMultiplePagesWithOffsetOptions.timeout();
        return service.getMultiplePagesWithOffset(offset, clientRequestId, this.client.acceptLanguage(), maxresults, timeout).map(new Function<RestResponse<Void, PageImpl<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @param clientRequestId the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getMultiplePagesWithOffset(@NonNull final PagingGetMultiplePagesWithOffsetOptions pagingGetMultiplePagesWithOffsetOptions, final String clientRequestId) {
        Page<Product> response = getMultiplePagesWithOffsetSinglePageAsync(pagingGetMultiplePagesWithOffsetOptions, clientRequestId).blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                PagingGetMultiplePagesWithOffsetNextOptions pagingGetMultiplePagesWithOffsetNextOptions = new PagingGetMultiplePagesWithOffsetNextOptions();
                pagingGetMultiplePagesWithOffsetNextOptions.withMaxresults(pagingGetMultiplePagesWithOffsetOptions.maxresults());
                pagingGetMultiplePagesWithOffsetNextOptions.withTimeout(pagingGetMultiplePagesWithOffsetOptions.timeout());
                return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesWithOffsetNextOptions).blockingGet();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @param clientRequestId the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getMultiplePagesWithOffsetAsync(@NonNull final PagingGetMultiplePagesWithOffsetOptions pagingGetMultiplePagesWithOffsetOptions, final String clientRequestId) {
        return getMultiplePagesWithOffsetSinglePageAsync(pagingGetMultiplePagesWithOffsetOptions, clientRequestId)
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    PagingGetMultiplePagesWithOffsetNextOptions pagingGetMultiplePagesWithOffsetNextOptions = new PagingGetMultiplePagesWithOffsetNextOptions();
                    pagingGetMultiplePagesWithOffsetNextOptions.withMaxresults(pagingGetMultiplePagesWithOffsetOptions.maxresults());
                    pagingGetMultiplePagesWithOffsetNextOptions.withTimeout(pagingGetMultiplePagesWithOffsetOptions.timeout());
                    return Observable.just(page).concatWith(getMultiplePagesWithOffsetNextAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesWithOffsetNextOptions));
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @param clientRequestId the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getMultiplePagesWithOffsetSinglePageAsync(@NonNull final PagingGetMultiplePagesWithOffsetOptions pagingGetMultiplePagesWithOffsetOptions, final String clientRequestId) {
        if (pagingGetMultiplePagesWithOffsetOptions == null) {
            throw new IllegalArgumentException("Parameter pagingGetMultiplePagesWithOffsetOptions is required and cannot be null.");
        }
        Validator.validate(pagingGetMultiplePagesWithOffsetOptions);
        Integer maxresults = pagingGetMultiplePagesWithOffsetOptions.maxresults();
        int offset = pagingGetMultiplePagesWithOffsetOptions.offset();
        Integer timeout = pagingGetMultiplePagesWithOffsetOptions.timeout();
        return service.getMultiplePagesWithOffset(offset, clientRequestId, this.client.acceptLanguage(), maxresults, timeout).map(new Function<RestResponse<Void, PageImpl<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getMultiplePagesRetryFirst() {
        Page<Product> response = getMultiplePagesRetryFirstSinglePageAsync().blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesRetryFirstNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getMultiplePagesRetryFirstAsync() {
        return getMultiplePagesRetryFirstSinglePageAsync()
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getMultiplePagesRetryFirstNextAsync(nextPageLink));
                }
            });
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getMultiplePagesRetryFirstSinglePageAsync() {
        return service.getMultiplePagesRetryFirst(this.client.acceptLanguage()).map(new Function<RestResponse<Void, PageImpl<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getMultiplePagesRetrySecond() {
        Page<Product> response = getMultiplePagesRetrySecondSinglePageAsync().blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesRetrySecondNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getMultiplePagesRetrySecondAsync() {
        return getMultiplePagesRetrySecondSinglePageAsync()
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getMultiplePagesRetrySecondNextAsync(nextPageLink));
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getMultiplePagesRetrySecondSinglePageAsync() {
        return service.getMultiplePagesRetrySecond(this.client.acceptLanguage()).map(new Function<RestResponse<Void, PageImpl<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getSinglePagesFailure() {
        Page<Product> response = getSinglePagesFailureSinglePageAsync().blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getSinglePagesFailureNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getSinglePagesFailureAsync() {
        return getSinglePagesFailureSinglePageAsync()
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getSinglePagesFailureNextAsync(nextPageLink));
                }
            });
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getSinglePagesFailureSinglePageAsync() {
        return service.getSinglePagesFailure(this.client.acceptLanguage()).map(new Function<RestResponse<Void, PageImpl<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getMultiplePagesFailure() {
        Page<Product> response = getMultiplePagesFailureSinglePageAsync().blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesFailureNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getMultiplePagesFailureAsync() {
        return getMultiplePagesFailureSinglePageAsync()
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getMultiplePagesFailureNextAsync(nextPageLink));
                }
            });
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getMultiplePagesFailureSinglePageAsync() {
        return service.getMultiplePagesFailure(this.client.acceptLanguage()).map(new Function<RestResponse<Void, PageImpl<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getMultiplePagesFailureUri() {
        Page<Product> response = getMultiplePagesFailureUriSinglePageAsync().blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesFailureUriNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getMultiplePagesFailureUriAsync() {
        return getMultiplePagesFailureUriSinglePageAsync()
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getMultiplePagesFailureUriNextAsync(nextPageLink));
                }
            });
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getMultiplePagesFailureUriSinglePageAsync() {
        return service.getMultiplePagesFailureUri(this.client.acceptLanguage()).map(new Function<RestResponse<Void, PageImpl<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getMultiplePagesFragmentNextLink(@NonNull final String tenant, @NonNull final String apiVersion) {
        Page<Product> response = getMultiplePagesFragmentNextLinkSinglePageAsync(tenant, apiVersion).blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextLink) {
                return nextFragmentSinglePageAsync(tenant, nextLink, apiVersion).blockingGet();
            }
        };
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getMultiplePagesFragmentNextLinkAsync(@NonNull final String tenant, @NonNull final String apiVersion) {
        return getMultiplePagesFragmentNextLinkSinglePageAsync(tenant, apiVersion)
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextLink = page.nextPageLink();
                    if (nextLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(nextFragmentAsync(tenant, nextLink, apiVersion));
                }
            });
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getMultiplePagesFragmentNextLinkSinglePageAsync(@NonNull final String tenant, @NonNull final String apiVersion) {
        if (tenant == null) {
            throw new IllegalArgumentException("Parameter tenant is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        return service.getMultiplePagesFragmentNextLink(tenant, apiVersion, this.client.acceptLanguage()).map(new Function<RestResponse<Void, PageImpl1<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl1<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment with parameters grouped.
     *
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getMultiplePagesFragmentWithGroupingNextLink(@NonNull final CustomParameterGroup customParameterGroup) {
        Page<Product> response = getMultiplePagesFragmentWithGroupingNextLinkSinglePageAsync(customParameterGroup).blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextLink) {
                return nextFragmentWithGroupingSinglePageAsync(nextLink, customParameterGroup).blockingGet();
            }
        };
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment with parameters grouped.
     *
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getMultiplePagesFragmentWithGroupingNextLinkAsync(@NonNull final CustomParameterGroup customParameterGroup) {
        return getMultiplePagesFragmentWithGroupingNextLinkSinglePageAsync(customParameterGroup)
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextLink = page.nextPageLink();
                    if (nextLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(nextFragmentWithGroupingAsync(nextLink, customParameterGroup));
                }
            });
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment with parameters grouped.
     *
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getMultiplePagesFragmentWithGroupingNextLinkSinglePageAsync(@NonNull final CustomParameterGroup customParameterGroup) {
        if (customParameterGroup == null) {
            throw new IllegalArgumentException("Parameter customParameterGroup is required and cannot be null.");
        }
        Validator.validate(customParameterGroup);
        String apiVersion = customParameterGroup.apiVersion();
        String tenant = customParameterGroup.tenant();
        return service.getMultiplePagesFragmentWithGroupingNextLink(tenant, this.client.acceptLanguage(), apiVersion).map(new Function<RestResponse<Void, PageImpl1<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl1<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param nextLink Next link for list operation.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> nextFragment(@NonNull final String tenant, @NonNull final String nextLink, @NonNull final String apiVersion) {
        Page<Product> response = nextFragmentSinglePageAsync(tenant, nextLink, apiVersion).blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextLink) {
                return nextFragmentSinglePageAsync(tenant, nextLink, apiVersion).blockingGet();
            }
        };
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param nextLink Next link for list operation.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> nextFragmentAsync(@NonNull final String tenant, @NonNull final String nextLink, @NonNull final String apiVersion) {
        return nextFragmentSinglePageAsync(tenant, nextLink, apiVersion)
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextLink = page.nextPageLink();
                    if (nextLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(nextFragmentAsync(tenant, nextLink, apiVersion));
                }
            });
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param nextLink Next link for list operation.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> nextFragmentSinglePageAsync(@NonNull final String tenant, @NonNull final String nextLink, @NonNull final String apiVersion) {
        if (tenant == null) {
            throw new IllegalArgumentException("Parameter tenant is required and cannot be null.");
        }
        if (nextLink == null) {
            throw new IllegalArgumentException("Parameter nextLink is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        String nextUrl = String.format("paging/multiple/fragment/%s/%s", tenant, nextLink);
        return service.nextFragment(nextUrl, apiVersion, this.client.acceptLanguage()).map(new Function<RestResponse<Void, PageImpl1<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl1<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param nextLink Next link for list operation.
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> nextFragmentWithGrouping(@NonNull final String nextLink, @NonNull final CustomParameterGroup customParameterGroup) {
        Page<Product> response = nextFragmentWithGroupingSinglePageAsync(nextLink, customParameterGroup).blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextLink) {
                return nextFragmentWithGroupingSinglePageAsync(nextLink, customParameterGroup).blockingGet();
            }
        };
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param nextLink Next link for list operation.
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> nextFragmentWithGroupingAsync(@NonNull final String nextLink, @NonNull final CustomParameterGroup customParameterGroup) {
        return nextFragmentWithGroupingSinglePageAsync(nextLink, customParameterGroup)
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextLink = page.nextPageLink();
                    if (nextLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(nextFragmentWithGroupingAsync(nextLink, customParameterGroup));
                }
            });
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param nextLink Next link for list operation.
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> nextFragmentWithGroupingSinglePageAsync(@NonNull final String nextLink, @NonNull final CustomParameterGroup customParameterGroup) {
        if (nextLink == null) {
            throw new IllegalArgumentException("Parameter nextLink is required and cannot be null.");
        }
        if (customParameterGroup == null) {
            throw new IllegalArgumentException("Parameter customParameterGroup is required and cannot be null.");
        }
        Validator.validate(customParameterGroup);
        String apiVersion = customParameterGroup.apiVersion();
        String tenant = customParameterGroup.tenant();
        String nextUrl = String.format("paging/multiple/fragmentwithgrouping/%s/%s", tenant, nextLink);
        return service.nextFragmentWithGrouping(nextUrl, this.client.acceptLanguage(), apiVersion).map(new Function<RestResponse<Void, PageImpl1<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl1<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getSinglePagesNext(@NonNull final String nextPageLink) {
        Page<Product> response = getSinglePagesNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getSinglePagesNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getSinglePagesNextAsync(@NonNull final String nextPageLink) {
        return getSinglePagesNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getSinglePagesNextAsync(nextPageLink));
                }
            });
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getSinglePagesNextSinglePageAsync(@NonNull final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getSinglePagesNext(nextUrl, this.client.acceptLanguage()).map(new Function<RestResponse<Void, PageImpl<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getMultiplePagesNext(@NonNull final String nextPageLink) {
        Page<Product> response = getMultiplePagesNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesNextSinglePageAsync(nextPageLink, null, null).blockingGet();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getMultiplePagesNextAsync(@NonNull final String nextPageLink) {
        return getMultiplePagesNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getMultiplePagesNextAsync(nextPageLink, null, null));
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getMultiplePagesNextSinglePageAsync(@NonNull final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        final String clientRequestId = null;
        final PagingGetMultiplePagesOptions pagingGetMultiplePagesOptions = null;
        Integer maxresults = null;
        Integer timeout = null;
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesNext(nextUrl, clientRequestId, this.client.acceptLanguage(), maxresults, timeout).map(new Function<RestResponse<Void, PageImpl<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getMultiplePagesNext(@NonNull final String nextPageLink, final String clientRequestId, final PagingGetMultiplePagesOptions pagingGetMultiplePagesOptions) {
        Page<Product> response = getMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesOptions).blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesOptions).blockingGet();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getMultiplePagesNextAsync(@NonNull final String nextPageLink, final String clientRequestId, final PagingGetMultiplePagesOptions pagingGetMultiplePagesOptions) {
        return getMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesOptions)
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getMultiplePagesNextAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesOptions));
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getMultiplePagesNextSinglePageAsync(@NonNull final String nextPageLink, final String clientRequestId, final PagingGetMultiplePagesOptions pagingGetMultiplePagesOptions) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        Validator.validate(pagingGetMultiplePagesOptions);
        Integer maxresults = null;
        if (pagingGetMultiplePagesOptions != null) {
            maxresults = pagingGetMultiplePagesOptions.maxresults();
        }
        Integer timeout = null;
        if (pagingGetMultiplePagesOptions != null) {
            timeout = pagingGetMultiplePagesOptions.timeout();
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesNext(nextUrl, clientRequestId, this.client.acceptLanguage(), maxresults, timeout).map(new Function<RestResponse<Void, PageImpl<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getOdataMultiplePagesNext(@NonNull final String nextPageLink) {
        Page<Product> response = getOdataMultiplePagesNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, null, null).blockingGet();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getOdataMultiplePagesNextAsync(@NonNull final String nextPageLink) {
        return getOdataMultiplePagesNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getOdataMultiplePagesNextAsync(nextPageLink, null, null));
                }
            });
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getOdataMultiplePagesNextSinglePageAsync(@NonNull final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        final String clientRequestId = null;
        final PagingGetOdataMultiplePagesOptions pagingGetOdataMultiplePagesOptions = null;
        Integer maxresults = null;
        Integer timeout = null;
        String nextUrl = String.format("%s", nextPageLink);
        return service.getOdataMultiplePagesNext(nextUrl, clientRequestId, this.client.acceptLanguage(), maxresults, timeout).map(new Function<RestResponse<Void, PageImpl1<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl1<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getOdataMultiplePagesNext(@NonNull final String nextPageLink, final String clientRequestId, final PagingGetOdataMultiplePagesOptions pagingGetOdataMultiplePagesOptions) {
        Page<Product> response = getOdataMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetOdataMultiplePagesOptions).blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetOdataMultiplePagesOptions).blockingGet();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getOdataMultiplePagesNextAsync(@NonNull final String nextPageLink, final String clientRequestId, final PagingGetOdataMultiplePagesOptions pagingGetOdataMultiplePagesOptions) {
        return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetOdataMultiplePagesOptions)
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getOdataMultiplePagesNextAsync(nextPageLink, clientRequestId, pagingGetOdataMultiplePagesOptions));
                }
            });
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getOdataMultiplePagesNextSinglePageAsync(@NonNull final String nextPageLink, final String clientRequestId, final PagingGetOdataMultiplePagesOptions pagingGetOdataMultiplePagesOptions) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        Validator.validate(pagingGetOdataMultiplePagesOptions);
        Integer maxresults = null;
        if (pagingGetOdataMultiplePagesOptions != null) {
            maxresults = pagingGetOdataMultiplePagesOptions.maxresults();
        }
        Integer timeout = null;
        if (pagingGetOdataMultiplePagesOptions != null) {
            timeout = pagingGetOdataMultiplePagesOptions.timeout();
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getOdataMultiplePagesNext(nextUrl, clientRequestId, this.client.acceptLanguage(), maxresults, timeout).map(new Function<RestResponse<Void, PageImpl1<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl1<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getMultiplePagesWithOffsetNext(@NonNull final String nextPageLink) {
        Page<Product> response = getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, null, null).blockingGet();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getMultiplePagesWithOffsetNextAsync(@NonNull final String nextPageLink) {
        return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getMultiplePagesWithOffsetNextAsync(nextPageLink, null, null));
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getMultiplePagesWithOffsetNextSinglePageAsync(@NonNull final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        final String clientRequestId = null;
        final PagingGetMultiplePagesWithOffsetNextOptions pagingGetMultiplePagesWithOffsetNextOptions = null;
        Integer maxresults = null;
        Integer timeout = null;
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesWithOffsetNext(nextUrl, clientRequestId, this.client.acceptLanguage(), maxresults, timeout).map(new Function<RestResponse<Void, PageImpl<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingGetMultiplePagesWithOffsetNextOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getMultiplePagesWithOffsetNext(@NonNull final String nextPageLink, final String clientRequestId, final PagingGetMultiplePagesWithOffsetNextOptions pagingGetMultiplePagesWithOffsetNextOptions) {
        Page<Product> response = getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesWithOffsetNextOptions).blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesWithOffsetNextOptions).blockingGet();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingGetMultiplePagesWithOffsetNextOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getMultiplePagesWithOffsetNextAsync(@NonNull final String nextPageLink, final String clientRequestId, final PagingGetMultiplePagesWithOffsetNextOptions pagingGetMultiplePagesWithOffsetNextOptions) {
        return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesWithOffsetNextOptions)
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getMultiplePagesWithOffsetNextAsync(nextPageLink, clientRequestId, pagingGetMultiplePagesWithOffsetNextOptions));
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingGetMultiplePagesWithOffsetNextOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getMultiplePagesWithOffsetNextSinglePageAsync(@NonNull final String nextPageLink, final String clientRequestId, final PagingGetMultiplePagesWithOffsetNextOptions pagingGetMultiplePagesWithOffsetNextOptions) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        Validator.validate(pagingGetMultiplePagesWithOffsetNextOptions);
        Integer maxresults = null;
        if (pagingGetMultiplePagesWithOffsetNextOptions != null) {
            maxresults = pagingGetMultiplePagesWithOffsetNextOptions.maxresults();
        }
        Integer timeout = null;
        if (pagingGetMultiplePagesWithOffsetNextOptions != null) {
            timeout = pagingGetMultiplePagesWithOffsetNextOptions.timeout();
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesWithOffsetNext(nextUrl, clientRequestId, this.client.acceptLanguage(), maxresults, timeout).map(new Function<RestResponse<Void, PageImpl<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getMultiplePagesRetryFirstNext(@NonNull final String nextPageLink) {
        Page<Product> response = getMultiplePagesRetryFirstNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesRetryFirstNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getMultiplePagesRetryFirstNextAsync(@NonNull final String nextPageLink) {
        return getMultiplePagesRetryFirstNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getMultiplePagesRetryFirstNextAsync(nextPageLink));
                }
            });
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getMultiplePagesRetryFirstNextSinglePageAsync(@NonNull final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesRetryFirstNext(nextUrl, this.client.acceptLanguage()).map(new Function<RestResponse<Void, PageImpl<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getMultiplePagesRetrySecondNext(@NonNull final String nextPageLink) {
        Page<Product> response = getMultiplePagesRetrySecondNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesRetrySecondNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getMultiplePagesRetrySecondNextAsync(@NonNull final String nextPageLink) {
        return getMultiplePagesRetrySecondNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getMultiplePagesRetrySecondNextAsync(nextPageLink));
                }
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getMultiplePagesRetrySecondNextSinglePageAsync(@NonNull final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesRetrySecondNext(nextUrl, this.client.acceptLanguage()).map(new Function<RestResponse<Void, PageImpl<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getSinglePagesFailureNext(@NonNull final String nextPageLink) {
        Page<Product> response = getSinglePagesFailureNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getSinglePagesFailureNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getSinglePagesFailureNextAsync(@NonNull final String nextPageLink) {
        return getSinglePagesFailureNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getSinglePagesFailureNextAsync(nextPageLink));
                }
            });
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getSinglePagesFailureNextSinglePageAsync(@NonNull final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getSinglePagesFailureNext(nextUrl, this.client.acceptLanguage()).map(new Function<RestResponse<Void, PageImpl<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getMultiplePagesFailureNext(@NonNull final String nextPageLink) {
        Page<Product> response = getMultiplePagesFailureNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesFailureNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getMultiplePagesFailureNextAsync(@NonNull final String nextPageLink) {
        return getMultiplePagesFailureNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getMultiplePagesFailureNextAsync(nextPageLink));
                }
            });
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getMultiplePagesFailureNextSinglePageAsync(@NonNull final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesFailureNext(nextUrl, this.client.acceptLanguage()).map(new Function<RestResponse<Void, PageImpl<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl<Product>> response) {
                return response.body();
            }
        });
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;Product&gt; object if successful.
     */
    public PagedList<Product> getMultiplePagesFailureUriNext(@NonNull final String nextPageLink) {
        Page<Product> response = getMultiplePagesFailureUriNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<Product>(response) {
            @Override
            public Page<Product> nextPage(String nextPageLink) {
                return getMultiplePagesFailureUriNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;Product&gt; object.
     */
    public Observable<Page<Product>> getMultiplePagesFailureUriNextAsync(@NonNull final String nextPageLink) {
        return getMultiplePagesFailureUriNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap(new Function<Page<Product>, Observable<Page<Product>>>() {
                @Override
                public Observable<Page<Product>> apply(Page<Product> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(getMultiplePagesFailureUriNextAsync(nextPageLink));
                }
            });
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;Page&lt;Product&gt;&gt;} object if successful.
     */
    public Single<Page<Product>> getMultiplePagesFailureUriNextSinglePageAsync(@NonNull final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesFailureUriNext(nextUrl, this.client.acceptLanguage()).map(new Function<RestResponse<Void, PageImpl<Product>>, Page<Product>>() {
            @Override
            public Page<Product> apply(RestResponse<Void, PageImpl<Product>> response) {
                return response.body();
            }
        });
    }
}
