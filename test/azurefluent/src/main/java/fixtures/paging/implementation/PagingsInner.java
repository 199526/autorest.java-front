/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.paging.implementation;

import com.microsoft.azure.v3.AzureProxy;
import com.microsoft.azure.v3.CloudException;
import com.microsoft.azure.v3.Page;
import com.microsoft.azure.v3.PagedList;
import com.microsoft.rest.v3.BodyResponse;
import com.microsoft.rest.v3.Validator;
import com.microsoft.rest.v3.annotations.ExpectedResponses;
import com.microsoft.rest.v3.annotations.GET;
import com.microsoft.rest.v3.annotations.HeaderParam;
import com.microsoft.rest.v3.annotations.Host;
import com.microsoft.rest.v3.annotations.PathParam;
import com.microsoft.rest.v3.annotations.QueryParam;
import com.microsoft.rest.v3.annotations.UnexpectedResponseExceptionType;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * Pagings.
 */
public final class PagingsInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private PagingsService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestPagingTestServiceImpl client;

    /**
     * Initializes an instance of PagingsInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public PagingsInner(AutoRestPagingTestServiceImpl client) {
        this.service = AzureProxy.create(PagingsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Pagings to be used by the
     * proxy service to perform REST calls.
     */
    @Host("http://localhost:3000")
    private interface PagingsService {
        @GET("paging/single")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<BodyResponse<PageImpl<ProductInner>>> getSinglePages(@HeaderParam("accept-language") String acceptLanguage);

        @GET("paging/multiple")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<BodyResponse<PageImpl<ProductInner>>> getMultiplePages(@HeaderParam("client-request-id") String clientRequestId, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("maxresults") Integer maxresults, @HeaderParam("timeout") Integer timeout);

        @GET("paging/multiple/odata")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<BodyResponse<PageImpl1<ProductInner>>> getOdataMultiplePages(@HeaderParam("client-request-id") String clientRequestId, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("maxresults") Integer maxresults, @HeaderParam("timeout") Integer timeout);

        @GET("paging/multiple/withpath/{offset}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<BodyResponse<PageImpl<ProductInner>>> getMultiplePagesWithOffset(@PathParam("offset") int offset, @HeaderParam("client-request-id") String clientRequestId, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("maxresults") Integer maxresults, @HeaderParam("timeout") Integer timeout);

        @GET("paging/multiple/retryfirst")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<BodyResponse<PageImpl<ProductInner>>> getMultiplePagesRetryFirst(@HeaderParam("accept-language") String acceptLanguage);

        @GET("paging/multiple/retrysecond")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<BodyResponse<PageImpl<ProductInner>>> getMultiplePagesRetrySecond(@HeaderParam("accept-language") String acceptLanguage);

        @GET("paging/single/failure")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<BodyResponse<PageImpl<ProductInner>>> getSinglePagesFailure(@HeaderParam("accept-language") String acceptLanguage);

        @GET("paging/multiple/failure")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<BodyResponse<PageImpl<ProductInner>>> getMultiplePagesFailure(@HeaderParam("accept-language") String acceptLanguage);

        @GET("paging/multiple/failureuri")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<BodyResponse<PageImpl<ProductInner>>> getMultiplePagesFailureUri(@HeaderParam("accept-language") String acceptLanguage);

        @GET("paging/multiple/fragment/{tenant}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<BodyResponse<PageImpl1<ProductInner>>> getMultiplePagesFragmentNextLink(@PathParam("tenant") String tenant, @QueryParam("api_version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("paging/multiple/fragmentwithgrouping/{tenant}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<BodyResponse<PageImpl1<ProductInner>>> getMultiplePagesFragmentWithGroupingNextLink(@PathParam("tenant") String tenant, @HeaderParam("accept-language") String acceptLanguage, @QueryParam("api_version") String apiVersion);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<BodyResponse<PageImpl1<ProductInner>>> nextFragment(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @QueryParam("api_version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<BodyResponse<PageImpl1<ProductInner>>> nextFragmentWithGrouping(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage, @QueryParam("api_version") String apiVersion);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<BodyResponse<PageImpl<ProductInner>>> getSinglePagesNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<BodyResponse<PageImpl<ProductInner>>> getMultiplePagesNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("client-request-id") String clientRequestId, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("maxresults") Integer maxresults, @HeaderParam("timeout") Integer timeout);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<BodyResponse<PageImpl1<ProductInner>>> getOdataMultiplePagesNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("client-request-id") String clientRequestId, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("maxresults") Integer maxresults, @HeaderParam("timeout") Integer timeout);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<BodyResponse<PageImpl<ProductInner>>> getMultiplePagesWithOffsetNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("client-request-id") String clientRequestId, @HeaderParam("accept-language") String acceptLanguage, @HeaderParam("maxresults") Integer maxresults, @HeaderParam("timeout") Integer timeout);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<BodyResponse<PageImpl<ProductInner>>> getMultiplePagesRetryFirstNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<BodyResponse<PageImpl<ProductInner>>> getMultiplePagesRetrySecondNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<BodyResponse<PageImpl<ProductInner>>> getSinglePagesFailureNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<BodyResponse<PageImpl<ProductInner>>> getMultiplePagesFailureNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Mono<BodyResponse<PageImpl<ProductInner>>> getMultiplePagesFailureUriNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getSinglePages() {
        Page<ProductInner> response = getSinglePagesSinglePageAsync().block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                return getSinglePagesNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getSinglePagesAsync() {
        return getSinglePagesSinglePageAsync()
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getSinglePagesNextAsync(nextPageLink));
            });
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getSinglePagesSinglePageAsync() {
        return service.getSinglePages(this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getMultiplePages() {
        Page<ProductInner> response = getMultiplePagesSinglePageAsync().block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                return getMultiplePagesNextSinglePageAsync(nextPageLink, null, null).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getMultiplePagesAsync() {
        return getMultiplePagesSinglePageAsync()
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesNextAsync(nextPageLink, null, null));
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getMultiplePagesSinglePageAsync() {
        final String clientRequestId = null;
        final Integer maxresults = null;
        final Integer timeout = 30;
        return service.getMultiplePages(clientRequestId, this.client.acceptLanguage(), maxresults, timeout)
            .map((BodyResponse<PageImpl<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getMultiplePages(String clientRequestId, PagingsGetMultiplePagesOptionsInner pagingsGetMultiplePagesOptions) {
        Page<ProductInner> response = getMultiplePagesSinglePageAsync(clientRequestId, pagingsGetMultiplePagesOptions).block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                return getMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetMultiplePagesOptions).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getMultiplePagesAsync(String clientRequestId, PagingsGetMultiplePagesOptionsInner pagingsGetMultiplePagesOptions) {
        return getMultiplePagesSinglePageAsync(clientRequestId, pagingsGetMultiplePagesOptions)
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesNextAsync(nextPageLink, clientRequestId, pagingsGetMultiplePagesOptions));
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getMultiplePagesSinglePageAsync(String clientRequestId, PagingsGetMultiplePagesOptionsInner pagingsGetMultiplePagesOptions) {
        Validator.validate(pagingsGetMultiplePagesOptions);
        Integer maxresults = null;
        if (pagingsGetMultiplePagesOptions != null) {
            maxresults = pagingsGetMultiplePagesOptions.maxresults();
        }
        Integer timeout = null;
        if (pagingsGetMultiplePagesOptions != null) {
            timeout = pagingsGetMultiplePagesOptions.timeout();
        }
        return service.getMultiplePages(clientRequestId, this.client.acceptLanguage(), maxresults, timeout)
            .map((BodyResponse<PageImpl<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getOdataMultiplePages() {
        Page<ProductInner> response = getOdataMultiplePagesSinglePageAsync().block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, null, null).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getOdataMultiplePagesAsync() {
        return getOdataMultiplePagesSinglePageAsync()
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getOdataMultiplePagesNextAsync(nextPageLink, null, null));
            });
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getOdataMultiplePagesSinglePageAsync() {
        final String clientRequestId = null;
        final Integer maxresults = null;
        final Integer timeout = 30;
        return service.getOdataMultiplePages(clientRequestId, this.client.acceptLanguage(), maxresults, timeout)
            .map((BodyResponse<PageImpl1<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingsGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getOdataMultiplePages(String clientRequestId, PagingsGetOdataMultiplePagesOptionsInner pagingsGetOdataMultiplePagesOptions) {
        Page<ProductInner> response = getOdataMultiplePagesSinglePageAsync(clientRequestId, pagingsGetOdataMultiplePagesOptions).block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetOdataMultiplePagesOptions).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingsGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getOdataMultiplePagesAsync(String clientRequestId, PagingsGetOdataMultiplePagesOptionsInner pagingsGetOdataMultiplePagesOptions) {
        return getOdataMultiplePagesSinglePageAsync(clientRequestId, pagingsGetOdataMultiplePagesOptions)
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getOdataMultiplePagesNextAsync(nextPageLink, clientRequestId, pagingsGetOdataMultiplePagesOptions));
            });
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param clientRequestId the String value.
     * @param pagingsGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getOdataMultiplePagesSinglePageAsync(String clientRequestId, PagingsGetOdataMultiplePagesOptionsInner pagingsGetOdataMultiplePagesOptions) {
        Validator.validate(pagingsGetOdataMultiplePagesOptions);
        Integer maxresults = null;
        if (pagingsGetOdataMultiplePagesOptions != null) {
            maxresults = pagingsGetOdataMultiplePagesOptions.maxresults();
        }
        Integer timeout = null;
        if (pagingsGetOdataMultiplePagesOptions != null) {
            timeout = pagingsGetOdataMultiplePagesOptions.timeout();
        }
        return service.getOdataMultiplePages(clientRequestId, this.client.acceptLanguage(), maxresults, timeout)
            .map((BodyResponse<PageImpl1<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingsGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getMultiplePagesWithOffset(@NonNull PagingsGetMultiplePagesWithOffsetOptionsInner pagingsGetMultiplePagesWithOffsetOptions) {
        Page<ProductInner> response = getMultiplePagesWithOffsetSinglePageAsync(pagingsGetMultiplePagesWithOffsetOptions).block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                PagingsGetMultiplePagesWithOffsetNextOptionsInner pagingsGetMultiplePagesWithOffsetNextOptions = new PagingsGetMultiplePagesWithOffsetNextOptionsInner();
                pagingsGetMultiplePagesWithOffsetNextOptions.withMaxresults(pagingsGetMultiplePagesWithOffsetOptions.maxresults());
                pagingsGetMultiplePagesWithOffsetNextOptions.withTimeout(pagingsGetMultiplePagesWithOffsetOptions.timeout());
                return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, null, pagingsGetMultiplePagesWithOffsetNextOptions).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingsGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getMultiplePagesWithOffsetAsync(@NonNull PagingsGetMultiplePagesWithOffsetOptionsInner pagingsGetMultiplePagesWithOffsetOptions) {
        return getMultiplePagesWithOffsetSinglePageAsync(pagingsGetMultiplePagesWithOffsetOptions)
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                PagingsGetMultiplePagesWithOffsetNextOptionsInner pagingsGetMultiplePagesWithOffsetNextOptions = new PagingsGetMultiplePagesWithOffsetNextOptionsInner();
                pagingsGetMultiplePagesWithOffsetNextOptions.withMaxresults(pagingsGetMultiplePagesWithOffsetOptions.maxresults());
                pagingsGetMultiplePagesWithOffsetNextOptions.withTimeout(pagingsGetMultiplePagesWithOffsetOptions.timeout());
                return Flux.just(page).concatWith(getMultiplePagesWithOffsetNextAsync(nextPageLink, null, pagingsGetMultiplePagesWithOffsetNextOptions));
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingsGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getMultiplePagesWithOffsetSinglePageAsync(@NonNull PagingsGetMultiplePagesWithOffsetOptionsInner pagingsGetMultiplePagesWithOffsetOptions) {
        if (pagingsGetMultiplePagesWithOffsetOptions == null) {
            throw new IllegalArgumentException("Parameter pagingsGetMultiplePagesWithOffsetOptions is required and cannot be null.");
        }
        Validator.validate(pagingsGetMultiplePagesWithOffsetOptions);
        final String clientRequestId = null;
        final Integer maxresults = null;
        final Integer timeout = 30;
        Integer offset = pagingsGetMultiplePagesWithOffsetOptions.offset();
        return service.getMultiplePagesWithOffset(offset, clientRequestId, this.client.acceptLanguage(), maxresults, timeout)
            .map((BodyResponse<PageImpl<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingsGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @param clientRequestId the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getMultiplePagesWithOffset(@NonNull PagingsGetMultiplePagesWithOffsetOptionsInner pagingsGetMultiplePagesWithOffsetOptions, String clientRequestId) {
        Page<ProductInner> response = getMultiplePagesWithOffsetSinglePageAsync(pagingsGetMultiplePagesWithOffsetOptions, clientRequestId).block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                PagingsGetMultiplePagesWithOffsetNextOptionsInner pagingsGetMultiplePagesWithOffsetNextOptions = new PagingsGetMultiplePagesWithOffsetNextOptionsInner();
                pagingsGetMultiplePagesWithOffsetNextOptions.withMaxresults(pagingsGetMultiplePagesWithOffsetOptions.maxresults());
                pagingsGetMultiplePagesWithOffsetNextOptions.withTimeout(pagingsGetMultiplePagesWithOffsetOptions.timeout());
                return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetMultiplePagesWithOffsetNextOptions).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingsGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @param clientRequestId the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getMultiplePagesWithOffsetAsync(@NonNull PagingsGetMultiplePagesWithOffsetOptionsInner pagingsGetMultiplePagesWithOffsetOptions, String clientRequestId) {
        return getMultiplePagesWithOffsetSinglePageAsync(pagingsGetMultiplePagesWithOffsetOptions, clientRequestId)
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                PagingsGetMultiplePagesWithOffsetNextOptionsInner pagingsGetMultiplePagesWithOffsetNextOptions = new PagingsGetMultiplePagesWithOffsetNextOptionsInner();
                pagingsGetMultiplePagesWithOffsetNextOptions.withMaxresults(pagingsGetMultiplePagesWithOffsetOptions.maxresults());
                pagingsGetMultiplePagesWithOffsetNextOptions.withTimeout(pagingsGetMultiplePagesWithOffsetOptions.timeout());
                return Flux.just(page).concatWith(getMultiplePagesWithOffsetNextAsync(nextPageLink, clientRequestId, pagingsGetMultiplePagesWithOffsetNextOptions));
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param pagingsGetMultiplePagesWithOffsetOptions Additional parameters for the operation.
     * @param clientRequestId the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getMultiplePagesWithOffsetSinglePageAsync(@NonNull PagingsGetMultiplePagesWithOffsetOptionsInner pagingsGetMultiplePagesWithOffsetOptions, String clientRequestId) {
        if (pagingsGetMultiplePagesWithOffsetOptions == null) {
            throw new IllegalArgumentException("Parameter pagingsGetMultiplePagesWithOffsetOptions is required and cannot be null.");
        }
        Validator.validate(pagingsGetMultiplePagesWithOffsetOptions);
        Integer maxresults = pagingsGetMultiplePagesWithOffsetOptions.maxresults();
        Integer offset = pagingsGetMultiplePagesWithOffsetOptions.offset();
        Integer timeout = pagingsGetMultiplePagesWithOffsetOptions.timeout();
        return service.getMultiplePagesWithOffset(offset, clientRequestId, this.client.acceptLanguage(), maxresults, timeout)
            .map((BodyResponse<PageImpl<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getMultiplePagesRetryFirst() {
        Page<ProductInner> response = getMultiplePagesRetryFirstSinglePageAsync().block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                return getMultiplePagesRetryFirstNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getMultiplePagesRetryFirstAsync() {
        return getMultiplePagesRetryFirstSinglePageAsync()
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesRetryFirstNextAsync(nextPageLink));
            });
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getMultiplePagesRetryFirstSinglePageAsync() {
        return service.getMultiplePagesRetryFirst(this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getMultiplePagesRetrySecond() {
        Page<ProductInner> response = getMultiplePagesRetrySecondSinglePageAsync().block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                return getMultiplePagesRetrySecondNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getMultiplePagesRetrySecondAsync() {
        return getMultiplePagesRetrySecondSinglePageAsync()
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesRetrySecondNextAsync(nextPageLink));
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getMultiplePagesRetrySecondSinglePageAsync() {
        return service.getMultiplePagesRetrySecond(this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getSinglePagesFailure() {
        Page<ProductInner> response = getSinglePagesFailureSinglePageAsync().block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                return getSinglePagesFailureNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getSinglePagesFailureAsync() {
        return getSinglePagesFailureSinglePageAsync()
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getSinglePagesFailureNextAsync(nextPageLink));
            });
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getSinglePagesFailureSinglePageAsync() {
        return service.getSinglePagesFailure(this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getMultiplePagesFailure() {
        Page<ProductInner> response = getMultiplePagesFailureSinglePageAsync().block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                return getMultiplePagesFailureNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getMultiplePagesFailureAsync() {
        return getMultiplePagesFailureSinglePageAsync()
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesFailureNextAsync(nextPageLink));
            });
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getMultiplePagesFailureSinglePageAsync() {
        return service.getMultiplePagesFailure(this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getMultiplePagesFailureUri() {
        Page<ProductInner> response = getMultiplePagesFailureUriSinglePageAsync().block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                return getMultiplePagesFailureUriNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getMultiplePagesFailureUriAsync() {
        return getMultiplePagesFailureUriSinglePageAsync()
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesFailureUriNextAsync(nextPageLink));
            });
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getMultiplePagesFailureUriSinglePageAsync() {
        return service.getMultiplePagesFailureUri(this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getMultiplePagesFragmentNextLink(@NonNull String tenant, @NonNull String apiVersion) {
        Page<ProductInner> response = getMultiplePagesFragmentNextLinkSinglePageAsync(tenant, apiVersion).block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextLink) {
                return nextFragmentSinglePageAsync(tenant, nextLink, apiVersion).block();
            }
        };
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getMultiplePagesFragmentNextLinkAsync(@NonNull String tenant, @NonNull String apiVersion) {
        return getMultiplePagesFragmentNextLinkSinglePageAsync(tenant, apiVersion)
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextLink = page.nextPageLink();
                if (nextLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(nextFragmentAsync(tenant, nextLink, apiVersion));
            });
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getMultiplePagesFragmentNextLinkSinglePageAsync(@NonNull String tenant, @NonNull String apiVersion) {
        if (tenant == null) {
            throw new IllegalArgumentException("Parameter tenant is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        return service.getMultiplePagesFragmentNextLink(tenant, apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl1<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment with parameters grouped.
     *
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getMultiplePagesFragmentWithGroupingNextLink(@NonNull CustomParameterGroupInner customParameterGroup) {
        Page<ProductInner> response = getMultiplePagesFragmentWithGroupingNextLinkSinglePageAsync(customParameterGroup).block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextLink) {
                return nextFragmentWithGroupingSinglePageAsync(nextLink, customParameterGroup).block();
            }
        };
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment with parameters grouped.
     *
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getMultiplePagesFragmentWithGroupingNextLinkAsync(@NonNull CustomParameterGroupInner customParameterGroup) {
        return getMultiplePagesFragmentWithGroupingNextLinkSinglePageAsync(customParameterGroup)
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextLink = page.nextPageLink();
                if (nextLink == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(nextFragmentWithGroupingAsync(nextLink, customParameterGroup));
            });
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment with parameters grouped.
     *
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getMultiplePagesFragmentWithGroupingNextLinkSinglePageAsync(@NonNull CustomParameterGroupInner customParameterGroup) {
        if (customParameterGroup == null) {
            throw new IllegalArgumentException("Parameter customParameterGroup is required and cannot be null.");
        }
        Validator.validate(customParameterGroup);
        String apiVersion = customParameterGroup.apiVersion();
        String tenant = customParameterGroup.tenant();
        return service.getMultiplePagesFragmentWithGroupingNextLink(tenant, this.client.acceptLanguage(), apiVersion)
            .map((BodyResponse<PageImpl1<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param nextLink Next link for list operation.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> nextFragment(@NonNull String tenant, @NonNull String nextLink, @NonNull String apiVersion) {
        Page<ProductInner> response = nextFragmentSinglePageAsync(tenant, nextLink, apiVersion).block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextLink) {
                return nextFragmentSinglePageAsync(tenant, nextLink, apiVersion).block();
            }
        };
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param nextLink Next link for list operation.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> nextFragmentAsync(@NonNull String tenant, @NonNull String nextLink, @NonNull String apiVersion) {
        return nextFragmentSinglePageAsync(tenant, nextLink, apiVersion)
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextLink1 = page.nextPageLink();
                if (nextLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(nextFragmentAsync(tenant, nextLink1, apiVersion));
            });
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param tenant Sets the tenant to use.
     * @param nextLink Next link for list operation.
     * @param apiVersion Sets the api version to use.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> nextFragmentSinglePageAsync(@NonNull String tenant, @NonNull String nextLink, @NonNull String apiVersion) {
        if (tenant == null) {
            throw new IllegalArgumentException("Parameter tenant is required and cannot be null.");
        }
        if (nextLink == null) {
            throw new IllegalArgumentException("Parameter nextLink is required and cannot be null.");
        }
        if (apiVersion == null) {
            throw new IllegalArgumentException("Parameter apiVersion is required and cannot be null.");
        }
        String nextUrl = String.format("paging/multiple/fragment/%s/%s", tenant, nextLink);
        return service.nextFragment(nextUrl, apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl1<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param nextLink Next link for list operation.
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> nextFragmentWithGrouping(@NonNull String nextLink, @NonNull CustomParameterGroupInner customParameterGroup) {
        Page<ProductInner> response = nextFragmentWithGroupingSinglePageAsync(nextLink, customParameterGroup).block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextLink) {
                return nextFragmentWithGroupingSinglePageAsync(nextLink, customParameterGroup).block();
            }
        };
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param nextLink Next link for list operation.
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> nextFragmentWithGroupingAsync(@NonNull String nextLink, @NonNull CustomParameterGroupInner customParameterGroup) {
        return nextFragmentWithGroupingSinglePageAsync(nextLink, customParameterGroup)
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextLink1 = page.nextPageLink();
                if (nextLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(nextFragmentWithGroupingAsync(nextLink1, customParameterGroup));
            });
    }

    /**
     * A paging operation that doesn't return a full URL, just a fragment.
     *
     * @param nextLink Next link for list operation.
     * @param customParameterGroup Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> nextFragmentWithGroupingSinglePageAsync(@NonNull String nextLink, @NonNull CustomParameterGroupInner customParameterGroup) {
        if (nextLink == null) {
            throw new IllegalArgumentException("Parameter nextLink is required and cannot be null.");
        }
        if (customParameterGroup == null) {
            throw new IllegalArgumentException("Parameter customParameterGroup is required and cannot be null.");
        }
        Validator.validate(customParameterGroup);
        String apiVersion = customParameterGroup.apiVersion();
        String tenant = customParameterGroup.tenant();
        String nextUrl = String.format("paging/multiple/fragmentwithgrouping/%s/%s", tenant, nextLink);
        return service.nextFragmentWithGrouping(nextUrl, this.client.acceptLanguage(), apiVersion)
            .map((BodyResponse<PageImpl1<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getSinglePagesNext(@NonNull String nextPageLink) {
        Page<ProductInner> response = getSinglePagesNextSinglePageAsync(nextPageLink).block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                return getSinglePagesNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getSinglePagesNextAsync(@NonNull String nextPageLink) {
        return getSinglePagesNextSinglePageAsync(nextPageLink)
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getSinglePagesNextAsync(nextPageLink1));
            });
    }

    /**
     * A paging operation that finishes on the first call without a nextlink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getSinglePagesNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getSinglePagesNext(nextUrl, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getMultiplePagesNext(@NonNull String nextPageLink) {
        Page<ProductInner> response = getMultiplePagesNextSinglePageAsync(nextPageLink).block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                return getMultiplePagesNextSinglePageAsync(nextPageLink, null, null).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getMultiplePagesNextAsync(@NonNull String nextPageLink) {
        return getMultiplePagesNextSinglePageAsync(nextPageLink)
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesNextAsync(nextPageLink1, null, null));
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getMultiplePagesNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        final String clientRequestId = null;
        final Integer maxresults = null;
        final Integer timeout = 30;
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesNext(nextUrl, clientRequestId, this.client.acceptLanguage(), maxresults, timeout)
            .map((BodyResponse<PageImpl<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getMultiplePagesNext(@NonNull String nextPageLink, String clientRequestId, PagingsGetMultiplePagesOptionsInner pagingsGetMultiplePagesOptions) {
        Page<ProductInner> response = getMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetMultiplePagesOptions).block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                return getMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetMultiplePagesOptions).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getMultiplePagesNextAsync(@NonNull String nextPageLink, String clientRequestId, PagingsGetMultiplePagesOptionsInner pagingsGetMultiplePagesOptions) {
        return getMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetMultiplePagesOptions)
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesNextAsync(nextPageLink1, clientRequestId, pagingsGetMultiplePagesOptions));
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getMultiplePagesNextSinglePageAsync(@NonNull String nextPageLink, String clientRequestId, PagingsGetMultiplePagesOptionsInner pagingsGetMultiplePagesOptions) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        Validator.validate(pagingsGetMultiplePagesOptions);
        Integer maxresults = null;
        if (pagingsGetMultiplePagesOptions != null) {
            maxresults = pagingsGetMultiplePagesOptions.maxresults();
        }
        Integer timeout = null;
        if (pagingsGetMultiplePagesOptions != null) {
            timeout = pagingsGetMultiplePagesOptions.timeout();
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesNext(nextUrl, clientRequestId, this.client.acceptLanguage(), maxresults, timeout)
            .map((BodyResponse<PageImpl<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getOdataMultiplePagesNext(@NonNull String nextPageLink) {
        Page<ProductInner> response = getOdataMultiplePagesNextSinglePageAsync(nextPageLink).block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, null, null).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getOdataMultiplePagesNextAsync(@NonNull String nextPageLink) {
        return getOdataMultiplePagesNextSinglePageAsync(nextPageLink)
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getOdataMultiplePagesNextAsync(nextPageLink1, null, null));
            });
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getOdataMultiplePagesNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        final String clientRequestId = null;
        final Integer maxresults = null;
        final Integer timeout = 30;
        String nextUrl = String.format("%s", nextPageLink);
        return service.getOdataMultiplePagesNext(nextUrl, clientRequestId, this.client.acceptLanguage(), maxresults, timeout)
            .map((BodyResponse<PageImpl1<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getOdataMultiplePagesNext(@NonNull String nextPageLink, String clientRequestId, PagingsGetOdataMultiplePagesOptionsInner pagingsGetOdataMultiplePagesOptions) {
        Page<ProductInner> response = getOdataMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetOdataMultiplePagesOptions).block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetOdataMultiplePagesOptions).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getOdataMultiplePagesNextAsync(@NonNull String nextPageLink, String clientRequestId, PagingsGetOdataMultiplePagesOptionsInner pagingsGetOdataMultiplePagesOptions) {
        return getOdataMultiplePagesNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetOdataMultiplePagesOptions)
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getOdataMultiplePagesNextAsync(nextPageLink1, clientRequestId, pagingsGetOdataMultiplePagesOptions));
            });
    }

    /**
     * A paging operation that includes a nextLink in odata format that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetOdataMultiplePagesOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getOdataMultiplePagesNextSinglePageAsync(@NonNull String nextPageLink, String clientRequestId, PagingsGetOdataMultiplePagesOptionsInner pagingsGetOdataMultiplePagesOptions) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        Validator.validate(pagingsGetOdataMultiplePagesOptions);
        Integer maxresults = null;
        if (pagingsGetOdataMultiplePagesOptions != null) {
            maxresults = pagingsGetOdataMultiplePagesOptions.maxresults();
        }
        Integer timeout = null;
        if (pagingsGetOdataMultiplePagesOptions != null) {
            timeout = pagingsGetOdataMultiplePagesOptions.timeout();
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getOdataMultiplePagesNext(nextUrl, clientRequestId, this.client.acceptLanguage(), maxresults, timeout)
            .map((BodyResponse<PageImpl1<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getMultiplePagesWithOffsetNext(@NonNull String nextPageLink) {
        Page<ProductInner> response = getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink).block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, null, null).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getMultiplePagesWithOffsetNextAsync(@NonNull String nextPageLink) {
        return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink)
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesWithOffsetNextAsync(nextPageLink1, null, null));
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getMultiplePagesWithOffsetNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        final String clientRequestId = null;
        final Integer maxresults = null;
        final Integer timeout = 30;
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesWithOffsetNext(nextUrl, clientRequestId, this.client.acceptLanguage(), maxresults, timeout)
            .map((BodyResponse<PageImpl<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesWithOffsetNextOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getMultiplePagesWithOffsetNext(@NonNull String nextPageLink, String clientRequestId, PagingsGetMultiplePagesWithOffsetNextOptionsInner pagingsGetMultiplePagesWithOffsetNextOptions) {
        Page<ProductInner> response = getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetMultiplePagesWithOffsetNextOptions).block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetMultiplePagesWithOffsetNextOptions).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesWithOffsetNextOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getMultiplePagesWithOffsetNextAsync(@NonNull String nextPageLink, String clientRequestId, PagingsGetMultiplePagesWithOffsetNextOptionsInner pagingsGetMultiplePagesWithOffsetNextOptions) {
        return getMultiplePagesWithOffsetNextSinglePageAsync(nextPageLink, clientRequestId, pagingsGetMultiplePagesWithOffsetNextOptions)
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesWithOffsetNextAsync(nextPageLink1, clientRequestId, pagingsGetMultiplePagesWithOffsetNextOptions));
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param clientRequestId the String value.
     * @param pagingsGetMultiplePagesWithOffsetNextOptions Additional parameters for the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getMultiplePagesWithOffsetNextSinglePageAsync(@NonNull String nextPageLink, String clientRequestId, PagingsGetMultiplePagesWithOffsetNextOptionsInner pagingsGetMultiplePagesWithOffsetNextOptions) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        Validator.validate(pagingsGetMultiplePagesWithOffsetNextOptions);
        Integer maxresults = null;
        if (pagingsGetMultiplePagesWithOffsetNextOptions != null) {
            maxresults = pagingsGetMultiplePagesWithOffsetNextOptions.maxresults();
        }
        Integer timeout = null;
        if (pagingsGetMultiplePagesWithOffsetNextOptions != null) {
            timeout = pagingsGetMultiplePagesWithOffsetNextOptions.timeout();
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesWithOffsetNext(nextUrl, clientRequestId, this.client.acceptLanguage(), maxresults, timeout)
            .map((BodyResponse<PageImpl<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getMultiplePagesRetryFirstNext(@NonNull String nextPageLink) {
        Page<ProductInner> response = getMultiplePagesRetryFirstNextSinglePageAsync(nextPageLink).block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                return getMultiplePagesRetryFirstNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getMultiplePagesRetryFirstNextAsync(@NonNull String nextPageLink) {
        return getMultiplePagesRetryFirstNextSinglePageAsync(nextPageLink)
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesRetryFirstNextAsync(nextPageLink1));
            });
    }

    /**
     * A paging operation that fails on the first call with 500 and then retries and then get a response including a nextLink that has 10 pages.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getMultiplePagesRetryFirstNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesRetryFirstNext(nextUrl, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getMultiplePagesRetrySecondNext(@NonNull String nextPageLink) {
        Page<ProductInner> response = getMultiplePagesRetrySecondNextSinglePageAsync(nextPageLink).block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                return getMultiplePagesRetrySecondNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getMultiplePagesRetrySecondNextAsync(@NonNull String nextPageLink) {
        return getMultiplePagesRetrySecondNextSinglePageAsync(nextPageLink)
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesRetrySecondNextAsync(nextPageLink1));
            });
    }

    /**
     * A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails first with 500. The client should retry and finish all 10 pages eventually.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getMultiplePagesRetrySecondNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesRetrySecondNext(nextUrl, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getSinglePagesFailureNext(@NonNull String nextPageLink) {
        Page<ProductInner> response = getSinglePagesFailureNextSinglePageAsync(nextPageLink).block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                return getSinglePagesFailureNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getSinglePagesFailureNextAsync(@NonNull String nextPageLink) {
        return getSinglePagesFailureNextSinglePageAsync(nextPageLink)
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getSinglePagesFailureNextAsync(nextPageLink1));
            });
    }

    /**
     * A paging operation that receives a 400 on the first call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getSinglePagesFailureNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getSinglePagesFailureNext(nextUrl, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getMultiplePagesFailureNext(@NonNull String nextPageLink) {
        Page<ProductInner> response = getMultiplePagesFailureNextSinglePageAsync(nextPageLink).block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                return getMultiplePagesFailureNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getMultiplePagesFailureNextAsync(@NonNull String nextPageLink) {
        return getMultiplePagesFailureNextSinglePageAsync(nextPageLink)
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesFailureNextAsync(nextPageLink1));
            });
    }

    /**
     * A paging operation that receives a 400 on the second call.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getMultiplePagesFailureNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesFailureNext(nextUrl, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<ProductInner>> res) -> res.body());
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ProductInner&gt; object if successful.
     */
    public PagedList<ProductInner> getMultiplePagesFailureUriNext(@NonNull String nextPageLink) {
        Page<ProductInner> response = getMultiplePagesFailureUriNextSinglePageAsync(nextPageLink).block();
        return new PagedList<ProductInner>(response) {
            @Override
            public Page<ProductInner> nextPage(String nextPageLink) {
                return getMultiplePagesFailureUriNextSinglePageAsync(nextPageLink).block();
            }
        };
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ProductInner&gt; object.
     */
    public Flux<Page<ProductInner>> getMultiplePagesFailureUriNextAsync(@NonNull String nextPageLink) {
        return getMultiplePagesFailureUriNextSinglePageAsync(nextPageLink)
            .repeat(1)
            .concatMap((Page<ProductInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Flux.just(page);
                }
                return Flux.just(page).concatWith(getMultiplePagesFailureUriNextAsync(nextPageLink1));
            });
    }

    /**
     * A paging operation that receives an invalid nextLink.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Mono&lt;Page&lt;ProductInner&gt;&gt; object if successful.
     */
    public Mono<Page<ProductInner>> getMultiplePagesFailureUriNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.getMultiplePagesFailureUriNext(nextUrl, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<ProductInner>> res) -> res.body());
    }
}
