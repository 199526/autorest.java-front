/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.xml.implementation;

import com.microsoft.rest.v3.BodyResponse;
import com.microsoft.rest.v3.RestProxy;
import com.microsoft.rest.v3.ServiceCallback;
import com.microsoft.rest.v3.ServiceFuture;
import com.microsoft.rest.v3.Validator;
import com.microsoft.rest.v3.VoidResponse;
import com.microsoft.rest.v3.annotations.BodyParam;
import com.microsoft.rest.v3.annotations.ExpectedResponses;
import com.microsoft.rest.v3.annotations.GET;
import com.microsoft.rest.v3.annotations.Host;
import com.microsoft.rest.v3.annotations.PUT;
import com.microsoft.rest.v3.annotations.UnexpectedResponseExceptionType;
import fixtures.xml.Xmls;
import fixtures.xml.models.AppleBarrel;
import fixtures.xml.models.Banana;
import fixtures.xml.models.ErrorException;
import fixtures.xml.models.Slideshow;
import fixtures.xml.models.XmlsGetHeadersResponse;
import java.util.ArrayList;
import java.util.List;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * Xmls.
 */
public final class XmlsImpl implements Xmls {
    /**
     * The proxy service used to perform REST calls.
     */
    private XmlsService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestSwaggerBATXMLServiceImpl client;

    /**
     * Initializes an instance of XmlsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public XmlsImpl(AutoRestSwaggerBATXMLServiceImpl client) {
        this.service = RestProxy.create(XmlsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Xmls to be used by the proxy
     * service to perform REST calls.
     */
    @Host("http://localhost")
    private interface XmlsService {
        @GET("xml/simple")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<BodyResponse<Slideshow>> getSimple();

        @PUT("xml/simple")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putSimple(@BodyParam("application/xml; charset=utf-8") Slideshow wrappedLists);

        @GET("xml/wrapped-lists")
        @ExpectedResponses({200})
        Mono<BodyResponse<AppleBarrel>> getWrappedLists();

        @PUT("xml/wrapped-lists")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putWrappedLists(@BodyParam("application/xml; charset=utf-8") AppleBarrel wrappedLists);

        @GET("xml/headers")
        @ExpectedResponses({200})
        Mono<XmlsGetHeadersResponse> getHeaders();

        @GET("xml/empty-list")
        @ExpectedResponses({200})
        Mono<BodyResponse<Slideshow>> getEmptyList();

        @GET("xml/empty-wrapped-lists")
        @ExpectedResponses({200})
        Mono<BodyResponse<AppleBarrel>> getEmptyWrappedLists();

        @GET("xml/root-list")
        @ExpectedResponses({200})
        Mono<BodyResponse<List<Banana>>> getRootList();

        @PUT("xml/root-list")
        @ExpectedResponses({201})
        Mono<VoidResponse> putRootList(@BodyParam("application/xml; charset=utf-8") BananasWrapper bananas);

        @GET("xml/empty-root-list")
        @ExpectedResponses({200})
        Mono<BodyResponse<List<Banana>>> getEmptyRootList();

        @PUT("xml/empty-root-list")
        @ExpectedResponses({201})
        Mono<VoidResponse> putEmptyRootList(@BodyParam("application/xml; charset=utf-8") BananasWrapper bananas);

        @GET("xml/empty-child-element")
        @ExpectedResponses({200})
        Mono<BodyResponse<Banana>> getEmptyChildElement();

        @PUT("xml/empty-child-element")
        @ExpectedResponses({201})
        Mono<VoidResponse> putEmptyChildElement(@BodyParam("application/xml; charset=utf-8") Banana banana);
    }

    /**
     * Get a simple XML document.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Slideshow object if successful.
     */
    public Slideshow getSimple() {
        return getSimpleAsync().block();
    }

    /**
     * Get a simple XML document.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Slideshow> getSimpleAsync(ServiceCallback<Slideshow> serviceCallback) {
        return ServiceFuture.fromBody(getSimpleAsync(), serviceCallback);
    }

    /**
     * Get a simple XML document.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<Slideshow>> getSimpleWithRestResponseAsync() {
        return service.getSimple();
    }

    /**
     * Get a simple XML document.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Slideshow> getSimpleAsync() {
        return getSimpleWithRestResponseAsync()
            .flatMap((BodyResponse<Slideshow> res) -> Mono.just(res.body()));
    }

    /**
     * Put a simple XML document.
     *
     * @param wrappedLists the Slideshow value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putSimple(@NonNull Slideshow wrappedLists) {
        putSimpleAsync(wrappedLists).block();
    }

    /**
     * Put a simple XML document.
     *
     * @param wrappedLists the Slideshow value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putSimpleAsync(@NonNull Slideshow wrappedLists, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putSimpleAsync(wrappedLists), serviceCallback);
    }

    /**
     * Put a simple XML document.
     *
     * @param wrappedLists the Slideshow value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<VoidResponse> putSimpleWithRestResponseAsync(@NonNull Slideshow wrappedLists) {
        if (wrappedLists == null) {
            throw new IllegalArgumentException("Parameter wrappedLists is required and cannot be null.");
        }
        Validator.validate(wrappedLists);
        return service.putSimple(wrappedLists);
    }

    /**
     * Put a simple XML document.
     *
     * @param wrappedLists the Slideshow value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> putSimpleAsync(@NonNull Slideshow wrappedLists) {
        return putSimpleWithRestResponseAsync(wrappedLists)
            .flatMap((VoidResponse res) -> Mono.just(res.body()));
    }

    /**
     * Get an XML document with multiple wrapped lists.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppleBarrel object if successful.
     */
    public AppleBarrel getWrappedLists() {
        return getWrappedListsAsync().block();
    }

    /**
     * Get an XML document with multiple wrapped lists.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<AppleBarrel> getWrappedListsAsync(ServiceCallback<AppleBarrel> serviceCallback) {
        return ServiceFuture.fromBody(getWrappedListsAsync(), serviceCallback);
    }

    /**
     * Get an XML document with multiple wrapped lists.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<AppleBarrel>> getWrappedListsWithRestResponseAsync() {
        return service.getWrappedLists();
    }

    /**
     * Get an XML document with multiple wrapped lists.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<AppleBarrel> getWrappedListsAsync() {
        return getWrappedListsWithRestResponseAsync()
            .flatMap((BodyResponse<AppleBarrel> res) -> Mono.just(res.body()));
    }

    /**
     * Put an XML document with multiple wrapped lists.
     *
     * @param wrappedLists the AppleBarrel value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putWrappedLists(@NonNull AppleBarrel wrappedLists) {
        putWrappedListsAsync(wrappedLists).block();
    }

    /**
     * Put an XML document with multiple wrapped lists.
     *
     * @param wrappedLists the AppleBarrel value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putWrappedListsAsync(@NonNull AppleBarrel wrappedLists, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putWrappedListsAsync(wrappedLists), serviceCallback);
    }

    /**
     * Put an XML document with multiple wrapped lists.
     *
     * @param wrappedLists the AppleBarrel value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<VoidResponse> putWrappedListsWithRestResponseAsync(@NonNull AppleBarrel wrappedLists) {
        if (wrappedLists == null) {
            throw new IllegalArgumentException("Parameter wrappedLists is required and cannot be null.");
        }
        Validator.validate(wrappedLists);
        return service.putWrappedLists(wrappedLists);
    }

    /**
     * Put an XML document with multiple wrapped lists.
     *
     * @param wrappedLists the AppleBarrel value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> putWrappedListsAsync(@NonNull AppleBarrel wrappedLists) {
        return putWrappedListsWithRestResponseAsync(wrappedLists)
            .flatMap((VoidResponse res) -> Mono.just(res.body()));
    }

    /**
     * Get strongly-typed response headers.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void getHeaders() {
        getHeadersAsync().block();
    }

    /**
     * Get strongly-typed response headers.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> getHeadersAsync(ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(getHeadersAsync(), serviceCallback);
    }

    /**
     * Get strongly-typed response headers.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<XmlsGetHeadersResponse> getHeadersWithRestResponseAsync() {
        return service.getHeaders();
    }

    /**
     * Get strongly-typed response headers.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> getHeadersAsync() {
        return getHeadersWithRestResponseAsync()
            .flatMap((XmlsGetHeadersResponse res) -> Mono.just(res.body()));
    }

    /**
     * Get an empty list.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Slideshow object if successful.
     */
    public Slideshow getEmptyList() {
        return getEmptyListAsync().block();
    }

    /**
     * Get an empty list.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Slideshow> getEmptyListAsync(ServiceCallback<Slideshow> serviceCallback) {
        return ServiceFuture.fromBody(getEmptyListAsync(), serviceCallback);
    }

    /**
     * Get an empty list.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<Slideshow>> getEmptyListWithRestResponseAsync() {
        return service.getEmptyList();
    }

    /**
     * Get an empty list.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Slideshow> getEmptyListAsync() {
        return getEmptyListWithRestResponseAsync()
            .flatMap((BodyResponse<Slideshow> res) -> Mono.just(res.body()));
    }

    /**
     * Gets some empty wrapped lists.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppleBarrel object if successful.
     */
    public AppleBarrel getEmptyWrappedLists() {
        return getEmptyWrappedListsAsync().block();
    }

    /**
     * Gets some empty wrapped lists.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<AppleBarrel> getEmptyWrappedListsAsync(ServiceCallback<AppleBarrel> serviceCallback) {
        return ServiceFuture.fromBody(getEmptyWrappedListsAsync(), serviceCallback);
    }

    /**
     * Gets some empty wrapped lists.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<AppleBarrel>> getEmptyWrappedListsWithRestResponseAsync() {
        return service.getEmptyWrappedLists();
    }

    /**
     * Gets some empty wrapped lists.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<AppleBarrel> getEmptyWrappedListsAsync() {
        return getEmptyWrappedListsWithRestResponseAsync()
            .flatMap((BodyResponse<AppleBarrel> res) -> Mono.just(res.body()));
    }

    /**
     * Gets a list as the root element.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Banana&gt; object if successful.
     */
    public List<Banana> getRootList() {
        return getRootListAsync().block();
    }

    /**
     * Gets a list as the root element.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<List<Banana>> getRootListAsync(ServiceCallback<List<Banana>> serviceCallback) {
        return ServiceFuture.fromBody(getRootListAsync(), serviceCallback);
    }

    /**
     * Gets a list as the root element.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<List<Banana>>> getRootListWithRestResponseAsync() {
        return service.getRootList();
    }

    /**
     * Gets a list as the root element.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<Banana>> getRootListAsync() {
        return getRootListWithRestResponseAsync()
            .flatMap((BodyResponse<List<Banana>> res) -> Mono.just(res.body()));
    }

    /**
     * Puts a list as the root element.
     *
     * @param bananas the List&lt;Banana&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putRootList(@NonNull List<Banana> bananas) {
        putRootListAsync(bananas).block();
    }

    /**
     * Puts a list as the root element.
     *
     * @param bananas the List&lt;Banana&gt; value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putRootListAsync(@NonNull List<Banana> bananas, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putRootListAsync(bananas), serviceCallback);
    }

    /**
     * Puts a list as the root element.
     *
     * @param bananas the List&lt;Banana&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<VoidResponse> putRootListWithRestResponseAsync(@NonNull List<Banana> bananas) {
        if (bananas == null) {
            throw new IllegalArgumentException("Parameter bananas is required and cannot be null.");
        }
        Validator.validate(bananas);
        BananasWrapper bananasConverted = new BananasWrapper(bananas);
        return service.putRootList(bananasConverted);
    }

    /**
     * Puts a list as the root element.
     *
     * @param bananas the List&lt;Banana&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> putRootListAsync(@NonNull List<Banana> bananas) {
        return putRootListWithRestResponseAsync(bananas)
            .flatMap((VoidResponse res) -> Mono.just(res.body()));
    }

    /**
     * Gets an empty list as the root element.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;Banana&gt; object if successful.
     */
    public List<Banana> getEmptyRootList() {
        return getEmptyRootListAsync().block();
    }

    /**
     * Gets an empty list as the root element.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<List<Banana>> getEmptyRootListAsync(ServiceCallback<List<Banana>> serviceCallback) {
        return ServiceFuture.fromBody(getEmptyRootListAsync(), serviceCallback);
    }

    /**
     * Gets an empty list as the root element.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<List<Banana>>> getEmptyRootListWithRestResponseAsync() {
        return service.getEmptyRootList();
    }

    /**
     * Gets an empty list as the root element.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<List<Banana>> getEmptyRootListAsync() {
        return getEmptyRootListWithRestResponseAsync()
            .flatMap((BodyResponse<List<Banana>> res) -> Mono.just(res.body()));
    }

    /**
     * Puts an empty list as the root element.
     *
     * @param bananas the List&lt;Banana&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putEmptyRootList(@NonNull List<Banana> bananas) {
        putEmptyRootListAsync(bananas).block();
    }

    /**
     * Puts an empty list as the root element.
     *
     * @param bananas the List&lt;Banana&gt; value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putEmptyRootListAsync(@NonNull List<Banana> bananas, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putEmptyRootListAsync(bananas), serviceCallback);
    }

    /**
     * Puts an empty list as the root element.
     *
     * @param bananas the List&lt;Banana&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<VoidResponse> putEmptyRootListWithRestResponseAsync(@NonNull List<Banana> bananas) {
        if (bananas == null) {
            throw new IllegalArgumentException("Parameter bananas is required and cannot be null.");
        }
        Validator.validate(bananas);
        BananasWrapper bananasConverted = new BananasWrapper(bananas);
        return service.putEmptyRootList(bananasConverted);
    }

    /**
     * Puts an empty list as the root element.
     *
     * @param bananas the List&lt;Banana&gt; value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> putEmptyRootListAsync(@NonNull List<Banana> bananas) {
        return putEmptyRootListWithRestResponseAsync(bananas)
            .flatMap((VoidResponse res) -> Mono.just(res.body()));
    }

    /**
     * Gets an XML document with an empty child element.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Banana object if successful.
     */
    public Banana getEmptyChildElement() {
        return getEmptyChildElementAsync().block();
    }

    /**
     * Gets an XML document with an empty child element.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Banana> getEmptyChildElementAsync(ServiceCallback<Banana> serviceCallback) {
        return ServiceFuture.fromBody(getEmptyChildElementAsync(), serviceCallback);
    }

    /**
     * Gets an XML document with an empty child element.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<Banana>> getEmptyChildElementWithRestResponseAsync() {
        return service.getEmptyChildElement();
    }

    /**
     * Gets an XML document with an empty child element.
     *
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Banana> getEmptyChildElementAsync() {
        return getEmptyChildElementWithRestResponseAsync()
            .flatMap((BodyResponse<Banana> res) -> Mono.just(res.body()));
    }

    /**
     * Puts a value with an empty child element.
     *
     * @param banana the Banana value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putEmptyChildElement(@NonNull Banana banana) {
        putEmptyChildElementAsync(banana).block();
    }

    /**
     * Puts a value with an empty child element.
     *
     * @param banana the Banana value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putEmptyChildElementAsync(@NonNull Banana banana, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putEmptyChildElementAsync(banana), serviceCallback);
    }

    /**
     * Puts a value with an empty child element.
     *
     * @param banana the Banana value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<VoidResponse> putEmptyChildElementWithRestResponseAsync(@NonNull Banana banana) {
        if (banana == null) {
            throw new IllegalArgumentException("Parameter banana is required and cannot be null.");
        }
        Validator.validate(banana);
        return service.putEmptyChildElement(banana);
    }

    /**
     * Puts a value with an empty child element.
     *
     * @param banana the Banana value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> putEmptyChildElementAsync(@NonNull Banana banana) {
        return putEmptyChildElementWithRestResponseAsync(banana)
            .flatMap((VoidResponse res) -> Mono.just(res.body()));
    }
}
