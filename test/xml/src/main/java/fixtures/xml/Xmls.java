/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.xml;

import com.microsoft.rest.v2.RestResponse;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import fixtures.xml.models.AppleBarrel;
import fixtures.xml.models.Slideshow;
import fixtures.xml.models.XmlGetHeadersHeaders;
import io.reactivex.Completable;
import io.reactivex.Maybe;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * Xmls.
 */
public interface Xmls {
    /**
     * Get a simple XML document.
     *
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Slideshow object if successful.
     */
    Slideshow getSimple();

    /**
     * Get a simple XML document.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Slideshow&gt;} object.
     */
    ServiceFuture<Slideshow> getSimpleAsync(ServiceCallback<Slideshow> serviceCallback);

    /**
     * Get a simple XML document.
     *
     * @return the {@link Single&lt;RestResponse&lt;Void, Slideshow&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Slideshow>> getSimpleWithRestResponseAsync();

    /**
     * Get a simple XML document.
     *
     * @return the {@link Maybe&lt;Slideshow&gt;} object if successful.
     */
    Maybe<Slideshow> getSimpleAsync();

    /**
     * Put a simple XML document.
     *
     * @param wrappedLists the Slideshow value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void putSimple(@NonNull Slideshow wrappedLists);

    /**
     * Put a simple XML document.
     *
     * @param wrappedLists the Slideshow value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Void&gt;} object.
     */
    ServiceFuture<Void> putSimpleAsync(@NonNull Slideshow wrappedLists, ServiceCallback<Void> serviceCallback);

    /**
     * Put a simple XML document.
     *
     * @param wrappedLists the Slideshow value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;RestResponse&lt;Void, Void&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Void>> putSimpleWithRestResponseAsync(@NonNull Slideshow wrappedLists);

    /**
     * Put a simple XML document.
     *
     * @param wrappedLists the Slideshow value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Completable} object if successful.
     */
    Completable putSimpleAsync(@NonNull Slideshow wrappedLists);

    /**
     * Get an XML document with multiple wrapped lists.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AppleBarrel object if successful.
     */
    AppleBarrel getWrappedLists();

    /**
     * Get an XML document with multiple wrapped lists.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;AppleBarrel&gt;} object.
     */
    ServiceFuture<AppleBarrel> getWrappedListsAsync(ServiceCallback<AppleBarrel> serviceCallback);

    /**
     * Get an XML document with multiple wrapped lists.
     *
     * @return the {@link Single&lt;RestResponse&lt;Void, AppleBarrel&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, AppleBarrel>> getWrappedListsWithRestResponseAsync();

    /**
     * Get an XML document with multiple wrapped lists.
     *
     * @return the {@link Maybe&lt;AppleBarrel&gt;} object if successful.
     */
    Maybe<AppleBarrel> getWrappedListsAsync();

    /**
     * Put an XML document with multiple wrapped lists.
     *
     * @param wrappedLists the AppleBarrel value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void putWrappedLists(@NonNull AppleBarrel wrappedLists);

    /**
     * Put an XML document with multiple wrapped lists.
     *
     * @param wrappedLists the AppleBarrel value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Void&gt;} object.
     */
    ServiceFuture<Void> putWrappedListsAsync(@NonNull AppleBarrel wrappedLists, ServiceCallback<Void> serviceCallback);

    /**
     * Put an XML document with multiple wrapped lists.
     *
     * @param wrappedLists the AppleBarrel value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;RestResponse&lt;Void, Void&gt;&gt;} object if successful.
     */
    Single<RestResponse<Void, Void>> putWrappedListsWithRestResponseAsync(@NonNull AppleBarrel wrappedLists);

    /**
     * Put an XML document with multiple wrapped lists.
     *
     * @param wrappedLists the AppleBarrel value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Completable} object if successful.
     */
    Completable putWrappedListsAsync(@NonNull AppleBarrel wrappedLists);

    /**
     * Get strongly-typed response headers.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void getHeaders();

    /**
     * Get strongly-typed response headers.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Void&gt;} object.
     */
    ServiceFuture<Void> getHeadersAsync(ServiceCallback<Void> serviceCallback);

    /**
     * Get strongly-typed response headers.
     *
     * @return the {@link Single&lt;RestResponse&lt;XmlGetHeadersHeaders, Void&gt;&gt;} object if successful.
     */
    Single<RestResponse<XmlGetHeadersHeaders, Void>> getHeadersWithRestResponseAsync();

    /**
     * Get strongly-typed response headers.
     *
     * @return the {@link Completable} object if successful.
     */
    Completable getHeadersAsync();
}
