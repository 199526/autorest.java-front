/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodybyte.implementation;

import com.microsoft.rest.v3.BodyResponse;
import com.microsoft.rest.v3.Context;
import com.microsoft.rest.v3.RestProxy;
import com.microsoft.rest.v3.ServiceCallback;
import com.microsoft.rest.v3.ServiceFuture;
import com.microsoft.rest.v3.VoidResponse;
import com.microsoft.rest.v3.annotations.BodyParam;
import com.microsoft.rest.v3.annotations.ExpectedResponses;
import com.microsoft.rest.v3.annotations.GET;
import com.microsoft.rest.v3.annotations.Host;
import com.microsoft.rest.v3.annotations.PUT;
import com.microsoft.rest.v3.annotations.UnexpectedResponseExceptionType;
import fixtures.bodybyte.Bytes;
import fixtures.bodybyte.models.ErrorException;
import reactor.core.publisher.Mono;
import reactor.util.annotation.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * Bytes.
 */
public final class BytesImpl implements Bytes {
    /**
     * The proxy service used to perform REST calls.
     */
    private BytesService service;

    /**
     * The service client containing this operation class.
     */
    private AutoRestSwaggerBATByteServiceImpl client;

    /**
     * Initializes an instance of BytesImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public BytesImpl(AutoRestSwaggerBATByteServiceImpl client) {
        this.service = RestProxy.create(BytesService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Bytes to be used by the
     * proxy service to perform REST calls.
     */
    @Host("http://localhost:3000")
    private interface BytesService {
        @GET("byte/null")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<BodyResponse<byte[]>> getNull(Context context);

        @GET("byte/empty")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<BodyResponse<byte[]>> getEmpty(Context context);

        @GET("byte/nonAscii")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<BodyResponse<byte[]>> getNonAscii(Context context);

        @PUT("byte/nonAscii")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<VoidResponse> putNonAscii(Context context, @BodyParam("application/json; charset=utf-8") byte[] byteBody);

        @GET("byte/invalid")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorException.class)
        Mono<BodyResponse<byte[]>> getInvalid(Context context);
    }

    /**
     * Get null byte value.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the byte[] object if successful.
     */
    public byte[] getNull(Context context) {
        return getNullAsync(context).block();
    }

    /**
     * Get null byte value.
     *
     * @param context The context to associate with this operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<byte[]> getNullAsync(Context context, ServiceCallback<byte[]> serviceCallback) {
        return ServiceFuture.fromBody(getNullAsync(context), serviceCallback);
    }

    /**
     * Get null byte value.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<byte[]>> getNullWithRestResponseAsync(Context context) {
        return service.getNull(context, context);
    }

    /**
     * Get null byte value.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<byte[]> getNullAsync(Context context) {
        return getNullWithRestResponseAsync(context)
            .flatMap((BodyResponse<byte[]> res) -> Mono.just(res.body()));
    }

    /**
     * Get empty byte value ''.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the byte[] object if successful.
     */
    public byte[] getEmpty(Context context) {
        return getEmptyAsync(context).block();
    }

    /**
     * Get empty byte value ''.
     *
     * @param context The context to associate with this operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<byte[]> getEmptyAsync(Context context, ServiceCallback<byte[]> serviceCallback) {
        return ServiceFuture.fromBody(getEmptyAsync(context), serviceCallback);
    }

    /**
     * Get empty byte value ''.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<byte[]>> getEmptyWithRestResponseAsync(Context context) {
        return service.getEmpty(context, context);
    }

    /**
     * Get empty byte value ''.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<byte[]> getEmptyAsync(Context context) {
        return getEmptyWithRestResponseAsync(context)
            .flatMap((BodyResponse<byte[]> res) -> Mono.just(res.body()));
    }

    /**
     * Get non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6).
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the byte[] object if successful.
     */
    public byte[] getNonAscii(Context context) {
        return getNonAsciiAsync(context).block();
    }

    /**
     * Get non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6).
     *
     * @param context The context to associate with this operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<byte[]> getNonAsciiAsync(Context context, ServiceCallback<byte[]> serviceCallback) {
        return ServiceFuture.fromBody(getNonAsciiAsync(context), serviceCallback);
    }

    /**
     * Get non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6).
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<byte[]>> getNonAsciiWithRestResponseAsync(Context context) {
        return service.getNonAscii(context, context);
    }

    /**
     * Get non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6).
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<byte[]> getNonAsciiAsync(Context context) {
        return getNonAsciiWithRestResponseAsync(context)
            .flatMap((BodyResponse<byte[]> res) -> Mono.just(res.body()));
    }

    /**
     * Put non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6).
     *
     * @param context The context to associate with this operation.
     * @param byteBody Base64-encoded non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void putNonAscii(Context context, @NonNull byte[] byteBody) {
        putNonAsciiAsync(context, byteBody).block();
    }

    /**
     * Put non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6).
     *
     * @param context The context to associate with this operation.
     * @param byteBody Base64-encoded non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> putNonAsciiAsync(Context context, @NonNull byte[] byteBody, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(putNonAsciiAsync(context, byteBody), serviceCallback);
    }

    /**
     * Put non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6).
     *
     * @param context The context to associate with this operation.
     * @param byteBody Base64-encoded non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<VoidResponse> putNonAsciiWithRestResponseAsync(Context context, @NonNull byte[] byteBody) {
        if (byteBody == null) {
            throw new IllegalArgumentException("Parameter byteBody is required and cannot be null.");
        }
        return service.putNonAscii(context, context, byteBody);
    }

    /**
     * Put non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6).
     *
     * @param context The context to associate with this operation.
     * @param byteBody Base64-encoded non-ascii byte string hex(FF FE FD FC FB FA F9 F8 F7 F6).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<Void> putNonAsciiAsync(Context context, @NonNull byte[] byteBody) {
        return putNonAsciiWithRestResponseAsync(context, byteBody)
            .flatMap((VoidResponse res) -> Mono.just(res.body()));
    }

    /**
     * Get invalid byte value ':::SWAGGER::::'.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the byte[] object if successful.
     */
    public byte[] getInvalid(Context context) {
        return getInvalidAsync(context).block();
    }

    /**
     * Get invalid byte value ':::SWAGGER::::'.
     *
     * @param context The context to associate with this operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<byte[]> getInvalidAsync(Context context, ServiceCallback<byte[]> serviceCallback) {
        return ServiceFuture.fromBody(getInvalidAsync(context), serviceCallback);
    }

    /**
     * Get invalid byte value ':::SWAGGER::::'.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<BodyResponse<byte[]>> getInvalidWithRestResponseAsync(Context context) {
        return service.getInvalid(context, context);
    }

    /**
     * Get invalid byte value ':::SWAGGER::::'.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    public Mono<byte[]> getInvalidAsync(Context context) {
        return getInvalidWithRestResponseAsync(context)
            .flatMap((BodyResponse<byte[]> res) -> Mono.just(res.body()));
    }
}
